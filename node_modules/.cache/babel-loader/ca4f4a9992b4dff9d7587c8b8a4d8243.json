{"ast":null,"code":"/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getTokenList(listUrl, resolveENSContentHash) {\n  console.log(listUrl, 11111111);\n  let response;\n\n  try {\n    response = await fetch('/tokens/tokenlist.json');\n\n    if (!response.ok) {}\n\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.debug('Failed to fetch list', listUrl, error);\n  }\n}\nexport function filterTokenByChainId(tokens) {}\nexport async function getTokenListLocal(listUrl) {\n  let response;\n\n  try {\n    response = await fetch('/tokens/tokenlist.json');\n\n    if (!response.ok) {}\n\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.debug('Failed to fetch list', listUrl, error);\n  }\n}","map":{"version":3,"sources":["/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/utils/getTokenList.ts"],"names":["getTokenList","listUrl","resolveENSContentHash","console","log","response","fetch","ok","json","error","debug","filterTokenByChainId","tokens","getTokenListLocal"],"mappings":"AAKA;;;;;AAKA,eAAe,eAAeA,YAAf,CACbC,OADa,EAEbC,qBAFa,EAGC;AACdC,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAqB,QAArB;AACA,MAAII,QAAJ;;AACE,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAD,CAAtB;;AACA,QAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB,CAEjB;;AACD,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACA,WAAOA,IAAP;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdN,IAAAA,OAAO,CAACO,KAAR,CAAc,sBAAd,EAAsCT,OAAtC,EAA+CQ,KAA/C;AAED;AACJ;AAED,OAAO,SAASE,oBAAT,CAA8BC,MAA9B,EAAmD,CAEzD;AAED,OAAO,eAAeC,iBAAf,CACLZ,OADK,EAES;AACd,MAAII,QAAJ;;AACE,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAD,CAAtB;;AACA,QAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB,CAEjB;;AACD,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACA,WAAOA,IAAP;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdN,IAAAA,OAAO,CAACO,KAAR,CAAc,sBAAd,EAAsCT,OAAtC,EAA+CQ,KAA/C;AAED;AACJ","sourcesContent":["import { TokenList, TokenInfo } from '@uniswap/token-lists'\n\nimport { NETWORK_CHAIN_ID } from '../connectors'\nimport { ST_TOKEN_LIST, AIR_TOKEN_LIST } from '../constants/tokenList'\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getTokenList(\n  listUrl: string,\n  resolveENSContentHash?: (ensName: string) => Promise<string>\n): Promise<any> {\n  console.log(listUrl, 11111111)\n  let response\n    try {\n      response = await fetch('/tokens/tokenlist.json')\n      if (!response.ok) {\n      \n      }\n      const json = await response.json()\n      return json as TokenList\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error)\n      \n    }\n}\n\nexport function filterTokenByChainId(tokens: TokenInfo[]) {\n  \n}\n\nexport async function getTokenListLocal(\n  listUrl: string,\n): Promise<any> {\n  let response\n    try {\n      response = await fetch('/tokens/tokenlist.json')\n      if (!response.ok) {\n      \n      }\n      const json = await response.json()\n      return json as TokenList\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error)\n      \n    }\n}\n"]},"metadata":{},"sourceType":"module"}