{"ast":null,"code":"\"use strict\";\n\nfunction t(t) {\n  return t && \"object\" == typeof t && \"default\" in t ? t.default : t;\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\n\nvar e,\n    n,\n    r,\n    i,\n    a = t(require(\"jsbi\")),\n    o = t(require(\"tiny-invariant\")),\n    u = (t(require(\"tiny-warning\")), require(\"@ethersproject/address\")),\n    s = t(require(\"big.js\")),\n    p = t(require(\"toformat\")),\n    c = t(require(\"decimal.js-light\")),\n    d = require(\"@ethersproject/solidity\"),\n    l = require(\"@ethersproject/contracts\"),\n    y = require(\"@ethersproject/networks\"),\n    f = require(\"@ethersproject/providers\");\n\n(n = exports.ChainId || (exports.ChainId = {}))[n.MAINNET = 1] = \"MAINNET\", n[n.SEPOLIA = 11155111] = \"SEPOLIA\", (r = exports.TradeType || (exports.TradeType = {}))[r.EXACT_INPUT = 0] = \"EXACT_INPUT\", r[r.EXACT_OUTPUT = 1] = \"EXACT_OUTPUT\", (i = exports.Rounding || (exports.Rounding = {}))[i.ROUND_DOWN = 0] = \"ROUND_DOWN\", i[i.ROUND_HALF_UP = 1] = \"ROUND_HALF_UP\", i[i.ROUND_UP = 2] = \"ROUND_UP\";\nvar m,\n    h = \"0x3ff5a57d3cff2a87c16babf1bd5b75630fa43eec63718c79bda4190933c2d320\",\n    v = a.BigInt(1e3),\n    T = a.BigInt(0),\n    w = a.BigInt(1),\n    b = a.BigInt(2),\n    g = a.BigInt(3),\n    k = a.BigInt(5),\n    x = a.BigInt(10),\n    A = a.BigInt(100),\n    I = a.BigInt(997),\n    O = a.BigInt(1e3);\n!function (t) {\n  t.uint8 = \"uint8\", t.uint256 = \"uint256\";\n}(m || (m = {}));\nvar E = ((e = {})[m.uint8] = a.BigInt(\"0xff\"), e[m.uint256] = a.BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"), e);\n\nfunction q(t, e) {\n  for (var n = 0; n < e.length; n++) {\n    var r = e[n];\n    r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);\n  }\n}\n\nfunction C(t, e, n) {\n  return e && q(t.prototype, e), n && q(t, n), t;\n}\n\nfunction P() {\n  return (P = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);\n      }\n    }\n\n    return t;\n  }).apply(this, arguments);\n}\n\nfunction _(t, e) {\n  t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;\n}\n\nfunction U(t) {\n  return (U = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  })(t);\n}\n\nfunction R(t, e) {\n  return (R = Object.setPrototypeOf || function (t, e) {\n    return t.__proto__ = e, t;\n  })(t, e);\n}\n\nfunction N() {\n  if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n  if (Reflect.construct.sham) return !1;\n  if (\"function\" == typeof Proxy) return !0;\n\n  try {\n    return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;\n  } catch (t) {\n    return !1;\n  }\n}\n\nfunction D(t, e, n) {\n  return (D = N() ? Reflect.construct : function (t, e, n) {\n    var r = [null];\n    r.push.apply(r, e);\n    var i = new (Function.bind.apply(t, r))();\n    return n && R(i, n.prototype), i;\n  }).apply(null, arguments);\n}\n\nfunction M(t) {\n  var e = \"function\" == typeof Map ? new Map() : void 0;\n  return (M = function M(t) {\n    if (null === t || -1 === Function.toString.call(t).indexOf(\"[native code]\")) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n\n    if (void 0 !== e) {\n      if (e.has(t)) return e.get(t);\n      e.set(t, n);\n    }\n\n    function n() {\n      return D(t, arguments, U(this).constructor);\n    }\n\n    return n.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: n,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), R(n, t);\n  })(t);\n}\n\nfunction F(t) {\n  if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return t;\n}\n\nfunction S(t, e) {\n  (null == e || e > t.length) && (e = t.length);\n\n  for (var n = 0, r = new Array(e); n < e; n++) {\n    r[n] = t[n];\n  }\n\n  return r;\n}\n\nfunction B(t, e) {\n  var n;\n\n  if (\"undefined\" == typeof Symbol || null == t[Symbol.iterator]) {\n    if (Array.isArray(t) || (n = function (t, e) {\n      if (t) {\n        if (\"string\" == typeof t) return S(t, void 0);\n        var n = Object.prototype.toString.call(t).slice(8, -1);\n        return \"Object\" === n && t.constructor && (n = t.constructor.name), \"Map\" === n || \"Set\" === n ? Array.from(t) : \"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? S(t, void 0) : void 0;\n      }\n    }(t)) || e && t && \"number\" == typeof t.length) {\n      n && (t = n);\n      var r = 0;\n      return function () {\n        return r >= t.length ? {\n          done: !0\n        } : {\n          done: !1,\n          value: t[r++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  return (n = t[Symbol.iterator]()).next.bind(n);\n}\n\nvar j = (\"setPrototypeOf\" in Object),\n    H = function (t) {\n  function e() {\n    var n;\n    return (n = t.call(this) || this).isInsufficientReservesError = !0, n.name = n.constructor.name, j && Object.setPrototypeOf(F(n), (this instanceof e ? this.constructor : void 0).prototype), n;\n  }\n\n  return _(e, t), e;\n}(M(Error)),\n    L = function (t) {\n  function e() {\n    var n;\n    return (n = t.call(this) || this).isInsufficientInputAmountError = !0, n.name = n.constructor.name, j && Object.setPrototypeOf(F(n), (this instanceof e ? this.constructor : void 0).prototype), n;\n  }\n\n  return _(e, t), e;\n}(M(Error));\n\nfunction X(t, e) {\n  a.greaterThanOrEqual(t, T) || o(!1), a.lessThanOrEqual(t, E[e]) || o(!1);\n}\n\nfunction W(t) {\n  try {\n    return u.getAddress(t);\n  } catch (t) {\n    o(!1);\n  }\n}\n\nfunction V(t) {\n  return t instanceof a ? t : a.BigInt(\"bigint\" == typeof t ? t.toString() : t);\n}\n\nfunction Y(t) {\n  X(t, m.uint256);\n  var e,\n      n = T;\n  if (a.greaterThan(t, g)) for (n = t, e = a.add(a.divide(t, b), w); a.lessThan(e, n);) {\n    n = e, e = a.divide(a.add(a.divide(t, e), e), b);\n  } else a.notEqual(t, T) && (n = w);\n  return n;\n}\n\nfunction Q(t, e, n, r) {\n  if (n > 0 || o(!1), t.length <= n || o(!1), 0 === t.length) return t.push(e), null;\n  var i = t.length === n;\n  if (i && r(t[t.length - 1], e) <= 0) return e;\n\n  for (var a = 0, u = t.length; a < u;) {\n    var s = a + u >>> 1;\n    r(t[s], e) <= 0 ? a = s + 1 : u = s;\n  }\n\n  return t.splice(a, 0, e), i ? t.pop() : null;\n}\n\nvar z,\n    J = function J(t, e, n) {\n  X(a.BigInt(t), m.uint8), this.decimals = t, this.symbol = e, this.name = n;\n},\n    $ = J.ETHER = new J(18, \"ETH\", \"Ether\"),\n    G = function (t) {\n  function e(e, n, r, i, a) {\n    var o;\n    return (o = t.call(this, r, i, a) || this).chainId = e, o.address = W(n), o;\n  }\n\n  _(e, t);\n\n  var n = e.prototype;\n  return n.equals = function (t) {\n    return this === t || this.chainId === t.chainId && this.address === t.address;\n  }, n.sortsBefore = function (t) {\n    return this.chainId !== t.chainId && o(!1), this.address === t.address && o(!1), this.address.toLowerCase() < t.address.toLowerCase();\n  }, e;\n}(J);\n\nfunction K(t, e) {\n  return t instanceof G && e instanceof G ? t.equals(e) : !(t instanceof G || e instanceof G || t !== e);\n}\n\nvar Z,\n    tt,\n    et = ((z = {})[exports.ChainId.MAINNET] = new G(exports.ChainId.MAINNET, \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", 18, \"WETH\", \"Wrapped Ether\"), z[exports.ChainId.SEPOLIA] = new G(exports.ChainId.SEPOLIA, \"0x770cDf0f0783cF58a3d1bDc0269dE4C2883e7892\", 18, \"WETH\", \"Wrapped Ether\"), z),\n    nt = p(c),\n    rt = p(s),\n    it = ((Z = {})[exports.Rounding.ROUND_DOWN] = nt.ROUND_DOWN, Z[exports.Rounding.ROUND_HALF_UP] = nt.ROUND_HALF_UP, Z[exports.Rounding.ROUND_UP] = nt.ROUND_UP, Z),\n    at = ((tt = {})[exports.Rounding.ROUND_DOWN] = 0, tt[exports.Rounding.ROUND_HALF_UP] = 1, tt[exports.Rounding.ROUND_UP] = 3, tt),\n    ot = function () {\n  function t(t, e) {\n    void 0 === e && (e = w), this.numerator = V(t), this.denominator = V(e);\n  }\n\n  var e = t.prototype;\n  return e.invert = function () {\n    return new t(this.denominator, this.numerator);\n  }, e.add = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return a.equal(this.denominator, n.denominator) ? new t(a.add(this.numerator, n.numerator), this.denominator) : new t(a.add(a.multiply(this.numerator, n.denominator), a.multiply(n.numerator, this.denominator)), a.multiply(this.denominator, n.denominator));\n  }, e.subtract = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return a.equal(this.denominator, n.denominator) ? new t(a.subtract(this.numerator, n.numerator), this.denominator) : new t(a.subtract(a.multiply(this.numerator, n.denominator), a.multiply(n.numerator, this.denominator)), a.multiply(this.denominator, n.denominator));\n  }, e.lessThan = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return a.lessThan(a.multiply(this.numerator, n.denominator), a.multiply(n.numerator, this.denominator));\n  }, e.equalTo = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return a.equal(a.multiply(this.numerator, n.denominator), a.multiply(n.numerator, this.denominator));\n  }, e.greaterThan = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return a.greaterThan(a.multiply(this.numerator, n.denominator), a.multiply(n.numerator, this.denominator));\n  }, e.multiply = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return new t(a.multiply(this.numerator, n.numerator), a.multiply(this.denominator, n.denominator));\n  }, e.divide = function (e) {\n    var n = e instanceof t ? e : new t(V(e));\n    return new t(a.multiply(this.numerator, n.denominator), a.multiply(this.denominator, n.numerator));\n  }, e.toSignificant = function (t, e, n) {\n    void 0 === e && (e = {\n      groupSeparator: \"\"\n    }), void 0 === n && (n = exports.Rounding.ROUND_HALF_UP), Number.isInteger(t) || o(!1), t > 0 || o(!1), nt.set({\n      precision: t + 1,\n      rounding: it[n]\n    });\n    var r = new nt(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(t);\n    return r.toFormat(r.decimalPlaces(), e);\n  }, e.toFixed = function (t, e, n) {\n    return void 0 === e && (e = {\n      groupSeparator: \"\"\n    }), void 0 === n && (n = exports.Rounding.ROUND_HALF_UP), Number.isInteger(t) || o(!1), t >= 0 || o(!1), rt.DP = t, rt.RM = at[n], new rt(this.numerator.toString()).div(this.denominator.toString()).toFormat(t, e);\n  }, C(t, [{\n    key: \"quotient\",\n    get: function get() {\n      return a.divide(this.numerator, this.denominator);\n    }\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new t(a.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }]), t;\n}(),\n    ut = p(s),\n    st = function (t) {\n  function e(e, n) {\n    var r,\n        i = V(n);\n    return X(i, m.uint256), (r = t.call(this, i, a.exponentiate(x, a.BigInt(e.decimals))) || this).currency = e, r;\n  }\n\n  _(e, t), e.ether = function (t) {\n    return new e($, t);\n  };\n  var n = e.prototype;\n  return n.add = function (t) {\n    return K(this.currency, t.currency) || o(!1), new e(this.currency, a.add(this.raw, t.raw));\n  }, n.subtract = function (t) {\n    return K(this.currency, t.currency) || o(!1), new e(this.currency, a.subtract(this.raw, t.raw));\n  }, n.toSignificant = function (e, n, r) {\n    return void 0 === e && (e = 6), void 0 === r && (r = exports.Rounding.ROUND_DOWN), t.prototype.toSignificant.call(this, e, n, r);\n  }, n.toFixed = function (e, n, r) {\n    return void 0 === e && (e = this.currency.decimals), void 0 === r && (r = exports.Rounding.ROUND_DOWN), e <= this.currency.decimals || o(!1), t.prototype.toFixed.call(this, e, n, r);\n  }, n.toExact = function (t) {\n    return void 0 === t && (t = {\n      groupSeparator: \"\"\n    }), ut.DP = this.currency.decimals, new ut(this.numerator.toString()).div(this.denominator.toString()).toFormat(t);\n  }, C(e, [{\n    key: \"raw\",\n    get: function get() {\n      return this.numerator;\n    }\n  }]), e;\n}(ot),\n    pt = function (t) {\n  function e(e, n) {\n    var r;\n    return (r = t.call(this, e, n) || this).token = e, r;\n  }\n\n  _(e, t);\n\n  var n = e.prototype;\n  return n.add = function (t) {\n    return this.token.equals(t.token) || o(!1), new e(this.token, a.add(this.raw, t.raw));\n  }, n.subtract = function (t) {\n    return this.token.equals(t.token) || o(!1), new e(this.token, a.subtract(this.raw, t.raw));\n  }, e;\n}(st),\n    ct = function (t) {\n  function e(e, n, r, i) {\n    var o;\n    return (o = t.call(this, i, r) || this).baseCurrency = e, o.quoteCurrency = n, o.scalar = new ot(a.exponentiate(x, a.BigInt(e.decimals)), a.exponentiate(x, a.BigInt(n.decimals))), o;\n  }\n\n  _(e, t), e.fromRoute = function (t) {\n    for (var n, r = [], i = B(t.pairs.entries()); !(n = i()).done;) {\n      var a = n.value,\n          o = a[1];\n      r.push(t.path[a[0]].equals(o.token0) ? new e(o.reserve0.currency, o.reserve1.currency, o.reserve0.raw, o.reserve1.raw) : new e(o.reserve1.currency, o.reserve0.currency, o.reserve1.raw, o.reserve0.raw));\n    }\n\n    return r.slice(1).reduce(function (t, e) {\n      return t.multiply(e);\n    }, r[0]);\n  };\n  var n = e.prototype;\n  return n.invert = function () {\n    return new e(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }, n.multiply = function (n) {\n    K(this.quoteCurrency, n.baseCurrency) || o(!1);\n    var r = t.prototype.multiply.call(this, n);\n    return new e(this.baseCurrency, n.quoteCurrency, r.denominator, r.numerator);\n  }, n.quote = function (e) {\n    return K(e.currency, this.baseCurrency) || o(!1), this.quoteCurrency instanceof G ? new pt(this.quoteCurrency, t.prototype.multiply.call(this, e.raw).quotient) : st.ether(t.prototype.multiply.call(this, e.raw).quotient);\n  }, n.toSignificant = function (t, e, n) {\n    return void 0 === t && (t = 6), this.adjusted.toSignificant(t, e, n);\n  }, n.toFixed = function (t, e, n) {\n    return void 0 === t && (t = 4), this.adjusted.toFixed(t, e, n);\n  }, C(e, [{\n    key: \"raw\",\n    get: function get() {\n      return new ot(this.numerator, this.denominator);\n    }\n  }, {\n    key: \"adjusted\",\n    get: function get() {\n      return t.prototype.multiply.call(this, this.scalar);\n    }\n  }]), e;\n}(ot),\n    dt = {},\n    lt = function () {\n  function t(e, n) {\n    var r = e.token.sortsBefore(n.token) ? [e, n] : [n, e];\n    this.liquidityToken = new G(r[0].token.chainId, t.getAddress(r[0].token, r[1].token), 18, \"UNI-V2\", \"Uniswap V2\"), this.tokenAmounts = r;\n  }\n\n  t.getAddress = function (t, e) {\n    var n,\n        r,\n        i,\n        a,\n        o,\n        s = t.sortsBefore(e) ? [t, e] : [e, t];\n    return void 0 === (null === (n = dt) || void 0 === n || null === (r = n[s[0].address]) || void 0 === r ? void 0 : r[s[1].address]) && (dt = P({}, dt, ((o = {})[s[0].address] = P({}, null === (i = dt) || void 0 === i ? void 0 : i[s[0].address], ((a = {})[s[1].address] = u.getCreate2Address(\"0x5530A244A1E47f7400C981d5dB46A182f8a5e080\", d.keccak256([\"bytes\"], [d.pack([\"address\", \"address\"], [s[0].address, s[1].address])]), h), a)), o))), dt[s[0].address][s[1].address];\n  };\n\n  var e = t.prototype;\n  return e.involvesToken = function (t) {\n    return t.equals(this.token0) || t.equals(this.token1);\n  }, e.priceOf = function (t) {\n    return this.involvesToken(t) || o(!1), t.equals(this.token0) ? this.token0Price : this.token1Price;\n  }, e.reserveOf = function (t) {\n    return this.involvesToken(t) || o(!1), t.equals(this.token0) ? this.reserve0 : this.reserve1;\n  }, e.getOutputAmount = function (e) {\n    if (this.involvesToken(e.token) || o(!1), a.equal(this.reserve0.raw, T) || a.equal(this.reserve1.raw, T)) throw new H();\n    var n = this.reserveOf(e.token),\n        r = this.reserveOf(e.token.equals(this.token0) ? this.token1 : this.token0),\n        i = a.multiply(e.raw, I),\n        u = a.multiply(i, r.raw),\n        s = a.add(a.multiply(n.raw, O), i),\n        p = new pt(e.token.equals(this.token0) ? this.token1 : this.token0, a.divide(u, s));\n    if (a.equal(p.raw, T)) throw new L();\n    return [p, new t(n.add(e), r.subtract(p))];\n  }, e.getInputAmount = function (e) {\n    if (this.involvesToken(e.token) || o(!1), a.equal(this.reserve0.raw, T) || a.equal(this.reserve1.raw, T) || a.greaterThanOrEqual(e.raw, this.reserveOf(e.token).raw)) throw new H();\n    var n = this.reserveOf(e.token),\n        r = this.reserveOf(e.token.equals(this.token0) ? this.token1 : this.token0),\n        i = a.multiply(a.multiply(r.raw, e.raw), O),\n        u = a.multiply(a.subtract(n.raw, e.raw), I),\n        s = new pt(e.token.equals(this.token0) ? this.token1 : this.token0, a.add(a.divide(i, u), w));\n    return [s, new t(r.add(s), n.subtract(e))];\n  }, e.getLiquidityMinted = function (t, e, n) {\n    t.token.equals(this.liquidityToken) || o(!1);\n    var r,\n        i = e.token.sortsBefore(n.token) ? [e, n] : [n, e];\n    if (i[0].token.equals(this.token0) && i[1].token.equals(this.token1) || o(!1), a.equal(t.raw, T)) r = a.subtract(Y(a.multiply(i[0].raw, i[1].raw)), v);else {\n      var u = a.divide(a.multiply(i[0].raw, t.raw), this.reserve0.raw),\n          s = a.divide(a.multiply(i[1].raw, t.raw), this.reserve1.raw);\n      r = a.lessThanOrEqual(u, s) ? u : s;\n    }\n    if (!a.greaterThan(r, T)) throw new L();\n    return new pt(this.liquidityToken, r);\n  }, e.getLiquidityValue = function (t, e, n, r, i) {\n    var u;\n\n    if (void 0 === r && (r = !1), this.involvesToken(t) || o(!1), e.token.equals(this.liquidityToken) || o(!1), n.token.equals(this.liquidityToken) || o(!1), a.lessThanOrEqual(n.raw, e.raw) || o(!1), r) {\n      i || o(!1);\n      var s = V(i);\n      if (a.equal(s, T)) u = e;else {\n        var p = Y(a.multiply(this.reserve0.raw, this.reserve1.raw)),\n            c = Y(s);\n\n        if (a.greaterThan(p, c)) {\n          var d = a.multiply(e.raw, a.subtract(p, c)),\n              l = a.add(a.multiply(p, k), c),\n              y = a.divide(d, l);\n          u = e.add(new pt(this.liquidityToken, y));\n        } else u = e;\n      }\n    } else u = e;\n\n    return new pt(t, a.divide(a.multiply(n.raw, this.reserveOf(t).raw), u.raw));\n  }, C(t, [{\n    key: \"token0Price\",\n    get: function get() {\n      return new ct(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n    }\n  }, {\n    key: \"token1Price\",\n    get: function get() {\n      return new ct(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: \"token0\",\n    get: function get() {\n      return this.tokenAmounts[0].token;\n    }\n  }, {\n    key: \"token1\",\n    get: function get() {\n      return this.tokenAmounts[1].token;\n    }\n  }, {\n    key: \"reserve0\",\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: \"reserve1\",\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]), t;\n}(),\n    yt = function () {\n  function t(t, e, n) {\n    t.length > 0 || o(!1), t.every(function (e) {\n      return e.chainId === t[0].chainId;\n    }) || o(!1), e instanceof G && t[0].involvesToken(e) || e === $ && t[0].involvesToken(et[t[0].chainId]) || o(!1), void 0 === n || n instanceof G && t[t.length - 1].involvesToken(n) || n === $ && t[t.length - 1].involvesToken(et[t[0].chainId]) || o(!1);\n\n    for (var r, i = [e instanceof G ? e : et[t[0].chainId]], a = B(t.entries()); !(r = a()).done;) {\n      var u = r.value,\n          s = u[1],\n          p = i[u[0]];\n      p.equals(s.token0) || p.equals(s.token1) || o(!1);\n      var c = p.equals(s.token0) ? s.token1 : s.token0;\n      i.push(c);\n    }\n\n    this.pairs = t, this.path = i, this.midPrice = ct.fromRoute(this), this.input = e, this.output = null != n ? n : i[i.length - 1];\n  }\n\n  return C(t, [{\n    key: \"chainId\",\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]), t;\n}(),\n    ft = new ot(A),\n    mt = function (t) {\n  function e() {\n    return t.apply(this, arguments) || this;\n  }\n\n  _(e, t);\n\n  var n = e.prototype;\n  return n.toSignificant = function (t, e, n) {\n    return void 0 === t && (t = 5), this.multiply(ft).toSignificant(t, e, n);\n  }, n.toFixed = function (t, e, n) {\n    return void 0 === t && (t = 2), this.multiply(ft).toFixed(t, e, n);\n  }, e;\n}(ot);\n\nfunction ht(t, e) {\n  return K(t.inputAmount.currency, e.inputAmount.currency) || o(!1), K(t.outputAmount.currency, e.outputAmount.currency) || o(!1), t.outputAmount.equalTo(e.outputAmount) ? t.inputAmount.equalTo(e.inputAmount) ? 0 : t.inputAmount.lessThan(e.inputAmount) ? -1 : 1 : t.outputAmount.lessThan(e.outputAmount) ? 1 : -1;\n}\n\nfunction vt(t, e) {\n  var n = ht(t, e);\n  return 0 !== n ? n : t.priceImpact.lessThan(e.priceImpact) ? -1 : t.priceImpact.greaterThan(e.priceImpact) ? 1 : t.route.path.length - e.route.path.length;\n}\n\nfunction Tt(t, e) {\n  return t instanceof pt ? t : t.currency === $ ? new pt(et[e], t.raw) : void o(!1);\n}\n\nfunction wt(t, e) {\n  return t instanceof G ? t : t === $ ? et[e] : void o(!1);\n}\n\nvar bt = function () {\n  function t(t, e, n) {\n    var r,\n        i,\n        a,\n        u = new Array(t.path.length),\n        s = new Array(t.pairs.length);\n\n    if (n === exports.TradeType.EXACT_INPUT) {\n      K(e.currency, t.input) || o(!1), u[0] = Tt(e, t.chainId);\n\n      for (var p = 0; p < t.path.length - 1; p++) {\n        var c = t.pairs[p].getOutputAmount(u[p]),\n            d = c[1];\n        u[p + 1] = c[0], s[p] = d;\n      }\n    } else {\n      K(e.currency, t.output) || o(!1), u[u.length - 1] = Tt(e, t.chainId);\n\n      for (var l = t.path.length - 1; l > 0; l--) {\n        var y = t.pairs[l - 1].getInputAmount(u[l]),\n            f = y[1];\n        u[l - 1] = y[0], s[l - 1] = f;\n      }\n    }\n\n    this.route = t, this.tradeType = n, this.inputAmount = n === exports.TradeType.EXACT_INPUT ? e : t.input === $ ? st.ether(u[0].raw) : u[0], this.outputAmount = n === exports.TradeType.EXACT_OUTPUT ? e : t.output === $ ? st.ether(u[u.length - 1].raw) : u[u.length - 1], this.executionPrice = new ct(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw), this.nextMidPrice = ct.fromRoute(new yt(s, t.input)), this.priceImpact = (r = this.outputAmount, a = (i = t.midPrice.raw.multiply(this.inputAmount.raw)).subtract(r.raw).divide(i), new mt(a.numerator, a.denominator));\n  }\n\n  t.exactIn = function (e, n) {\n    return new t(e, n, exports.TradeType.EXACT_INPUT);\n  }, t.exactOut = function (e, n) {\n    return new t(e, n, exports.TradeType.EXACT_OUTPUT);\n  };\n  var e = t.prototype;\n  return e.minimumAmountOut = function (t) {\n    if (t.lessThan(T) && o(!1), this.tradeType === exports.TradeType.EXACT_OUTPUT) return this.outputAmount;\n    var e = new ot(w).add(t).invert().multiply(this.outputAmount.raw).quotient;\n    return this.outputAmount instanceof pt ? new pt(this.outputAmount.token, e) : st.ether(e);\n  }, e.maximumAmountIn = function (t) {\n    if (t.lessThan(T) && o(!1), this.tradeType === exports.TradeType.EXACT_INPUT) return this.inputAmount;\n    var e = new ot(w).add(t).multiply(this.inputAmount.raw).quotient;\n    return this.inputAmount instanceof pt ? new pt(this.inputAmount.token, e) : st.ether(e);\n  }, t.bestTradeExactIn = function (e, n, r, i, a, u, s) {\n    var p = void 0 === i ? {} : i,\n        c = p.maxNumResults,\n        d = void 0 === c ? 3 : c,\n        l = p.maxHops,\n        y = void 0 === l ? 3 : l;\n    void 0 === a && (a = []), void 0 === u && (u = n), void 0 === s && (s = []), e.length > 0 || o(!1), y > 0 || o(!1), u === n || a.length > 0 || o(!1);\n    var f = n instanceof pt ? n.token.chainId : r instanceof G ? r.chainId : void 0;\n    void 0 === f && o(!1);\n\n    for (var m = Tt(n, f), h = wt(r, f), v = 0; v < e.length; v++) {\n      var w = e[v];\n\n      if ((w.token0.equals(m.token) || w.token1.equals(m.token)) && !w.reserve0.equalTo(T) && !w.reserve1.equalTo(T)) {\n        var b = void 0;\n\n        try {\n          b = w.getOutputAmount(m)[0];\n        } catch (t) {\n          if (t.isInsufficientInputAmountError) continue;\n          throw t;\n        }\n\n        if (b.token.equals(h)) Q(s, new t(new yt([].concat(a, [w]), u.currency, r), u, exports.TradeType.EXACT_INPUT), d, vt);else if (y > 1 && e.length > 1) {\n          var g = e.slice(0, v).concat(e.slice(v + 1, e.length));\n          t.bestTradeExactIn(g, b, r, {\n            maxNumResults: d,\n            maxHops: y - 1\n          }, [].concat(a, [w]), u, s);\n        }\n      }\n    }\n\n    return s;\n  }, t.bestTradeExactOut = function (e, n, r, i, a, u, s) {\n    var p = void 0 === i ? {} : i,\n        c = p.maxNumResults,\n        d = void 0 === c ? 3 : c,\n        l = p.maxHops,\n        y = void 0 === l ? 3 : l;\n    void 0 === a && (a = []), void 0 === u && (u = r), void 0 === s && (s = []), e.length > 0 || o(!1), y > 0 || o(!1), u === r || a.length > 0 || o(!1);\n    var f = r instanceof pt ? r.token.chainId : n instanceof G ? n.chainId : void 0;\n    void 0 === f && o(!1);\n\n    for (var m = Tt(r, f), h = wt(n, f), v = 0; v < e.length; v++) {\n      var w = e[v];\n\n      if ((w.token0.equals(m.token) || w.token1.equals(m.token)) && !w.reserve0.equalTo(T) && !w.reserve1.equalTo(T)) {\n        var b = void 0;\n\n        try {\n          b = w.getInputAmount(m)[0];\n        } catch (t) {\n          if (t.isInsufficientReservesError) continue;\n          throw t;\n        }\n\n        if (b.token.equals(h)) Q(s, new t(new yt([w].concat(a), n, u.currency), u, exports.TradeType.EXACT_OUTPUT), d, vt);else if (y > 1 && e.length > 1) {\n          var g = e.slice(0, v).concat(e.slice(v + 1, e.length));\n          t.bestTradeExactOut(g, n, b, {\n            maxNumResults: d,\n            maxHops: y - 1\n          }, [w].concat(a), u, s);\n        }\n      }\n    }\n\n    return s;\n  }, t;\n}();\n\nfunction gt(t) {\n  return \"0x\" + t.raw.toString(16);\n}\n\nvar kt,\n    xt = function () {\n  function t() {}\n\n  return t.swapCallParameters = function (t, e) {\n    var n = t.inputAmount.currency === $,\n        r = t.outputAmount.currency === $;\n    n && r && o(!1), !(\"ttl\" in e) || e.ttl > 0 || o(!1);\n    var i,\n        a,\n        u,\n        s = W(e.recipient),\n        p = gt(t.maximumAmountIn(e.allowedSlippage)),\n        c = gt(t.minimumAmountOut(e.allowedSlippage)),\n        d = t.route.path.map(function (t) {\n      return t.address;\n    }),\n        l = \"ttl\" in e ? \"0x\" + (Math.floor(new Date().getTime() / 1e3) + e.ttl).toString(16) : \"0x\" + e.deadline.toString(16),\n        y = Boolean(e.feeOnTransfer);\n\n    switch (t.tradeType) {\n      case exports.TradeType.EXACT_INPUT:\n        n ? (i = y ? \"swapExactETHForTokensSupportingFeeOnTransferTokens\" : \"swapExactETHForTokens\", a = [c, d, s, l], u = p) : r ? (i = y ? \"swapExactTokensForETHSupportingFeeOnTransferTokens\" : \"swapExactTokensForETH\", a = [p, c, d, s, l], u = \"0x0\") : (i = y ? \"swapExactTokensForTokensSupportingFeeOnTransferTokens\" : \"swapExactTokensForTokens\", a = [p, c, d, s, l], u = \"0x0\");\n        break;\n\n      case exports.TradeType.EXACT_OUTPUT:\n        y && o(!1), n ? (i = \"swapETHForExactTokens\", a = [c, d, s, l], u = p) : r ? (i = \"swapTokensForExactETH\", a = [c, p, d, s, l], u = \"0x0\") : (i = \"swapTokensForExactTokens\", a = [c, p, d, s, l], u = \"0x0\");\n    }\n\n    return {\n      methodName: i,\n      args: a,\n      value: u\n    };\n  }, t;\n}(),\n    At = [{\n  constant: !0,\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    name: \"\",\n    type: \"uint8\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [{\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}],\n    It = [{\n  inputs: [],\n  payable: !1,\n  stateMutability: \"nonpayable\",\n  type: \"constructor\"\n}, {\n  anonymous: !1,\n  inputs: [{\n    indexed: !0,\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    indexed: !0,\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    indexed: !1,\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"Approval\",\n  type: \"event\"\n}, {\n  anonymous: !1,\n  inputs: [{\n    indexed: !0,\n    internalType: \"address\",\n    name: \"sender\",\n    type: \"address\"\n  }, {\n    indexed: !1,\n    internalType: \"uint256\",\n    name: \"amount0\",\n    type: \"uint256\"\n  }, {\n    indexed: !1,\n    internalType: \"uint256\",\n    name: \"amount1\",\n    type: \"uint256\"\n  }, {\n    indexed: !0,\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }],\n  name: \"Burn\",\n  type: \"event\"\n}, {\n  anonymous: !1,\n  inputs: [{\n    indexed: !0,\n    internalType: \"address\",\n    name: \"sender\",\n    type: \"address\"\n  }, {\n    indexed: !1,\n    internalType: \"uint256\",\n    name: \"amount0\",\n    type: \"uint256\"\n  }, {\n    indexed: !1,\n    internalType: \"uint256\",\n    name: \"amount1\",\n    type: \"uint256\"\n  }],\n  name: \"Mint\",\n  type: \"event\"\n}, {\n  anonymous: !1,\n  inputs: [{\n    indexed: !0,\n    internalType: \"address\",\n    name: \"sender\",\n    type: \"address\"\n  }, {\n    indexed: !1,\n    internalType: \"uint256\",\n    name: \"amount0In\",\n    type: \"uint256\"\n  }, {\n    indexed: !1,\n    internalType: \"uint256\",\n    name: \"amount1In\",\n    type: \"uint256\"\n  }, {\n    indexed: !1,\n    internalType: \"uint256\",\n    name: \"amount0Out\",\n    type: \"uint256\"\n  }, {\n    indexed: !1,\n    internalType: \"uint256\",\n    name: \"amount1Out\",\n    type: \"uint256\"\n  }, {\n    indexed: !0,\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }],\n  name: \"Swap\",\n  type: \"event\"\n}, {\n  anonymous: !1,\n  inputs: [{\n    indexed: !1,\n    internalType: \"uint112\",\n    name: \"reserve0\",\n    type: \"uint112\"\n  }, {\n    indexed: !1,\n    internalType: \"uint112\",\n    name: \"reserve1\",\n    type: \"uint112\"\n  }],\n  name: \"Sync\",\n  type: \"event\"\n}, {\n  anonymous: !1,\n  inputs: [{\n    indexed: !0,\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    indexed: !0,\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    indexed: !1,\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"Transfer\",\n  type: \"event\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"DOMAIN_SEPARATOR\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"MINIMUM_LIQUIDITY\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"PERMIT_TYPEHASH\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"allowance\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !1,\n  inputs: [{\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"approve\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  payable: !1,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !1,\n  inputs: [{\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }],\n  name: \"burn\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"amount0\",\n    type: \"uint256\"\n  }, {\n    internalType: \"uint256\",\n    name: \"amount1\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"chainId\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    internalType: \"uint8\",\n    name: \"\",\n    type: \"uint8\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"factory\",\n  outputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"getReserves\",\n  outputs: [{\n    internalType: \"uint112\",\n    name: \"_reserve0\",\n    type: \"uint112\"\n  }, {\n    internalType: \"uint112\",\n    name: \"_reserve1\",\n    type: \"uint112\"\n  }, {\n    internalType: \"uint32\",\n    name: \"_blockTimestampLast\",\n    type: \"uint32\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !1,\n  inputs: [{\n    internalType: \"address\",\n    name: \"_token0\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"_token1\",\n    type: \"address\"\n  }],\n  name: \"initialize\",\n  outputs: [],\n  payable: !1,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"kLast\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !1,\n  inputs: [{\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }],\n  name: \"mint\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"liquidity\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"name\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"nonces\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !1,\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }, {\n    internalType: \"uint256\",\n    name: \"deadline\",\n    type: \"uint256\"\n  }, {\n    internalType: \"uint8\",\n    name: \"v\",\n    type: \"uint8\"\n  }, {\n    internalType: \"bytes32\",\n    name: \"r\",\n    type: \"bytes32\"\n  }, {\n    internalType: \"bytes32\",\n    name: \"s\",\n    type: \"bytes32\"\n  }],\n  name: \"permit\",\n  outputs: [],\n  payable: !1,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"price0CumulativeLast\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"price1CumulativeLast\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !1,\n  inputs: [{\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }],\n  name: \"skim\",\n  outputs: [],\n  payable: !1,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  constant: !1,\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"amount0Out\",\n    type: \"uint256\"\n  }, {\n    internalType: \"uint256\",\n    name: \"amount1Out\",\n    type: \"uint256\"\n  }, {\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"bytes\",\n    name: \"data\",\n    type: \"bytes\"\n  }],\n  name: \"swap\",\n  outputs: [],\n  payable: !1,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"symbol\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !1,\n  inputs: [],\n  name: \"sync\",\n  outputs: [],\n  payable: !1,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"token0\",\n  outputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"token1\",\n  outputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !0,\n  inputs: [],\n  name: \"totalSupply\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: !1,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: !1,\n  inputs: [{\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"transfer\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  payable: !1,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  constant: !1,\n  inputs: [{\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"value\",\n    type: \"uint256\"\n  }],\n  name: \"transferFrom\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  payable: !1,\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}],\n    Ot = ((kt = {})[exports.ChainId.MAINNET] = {\n  \"0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A\": 9\n}, kt),\n    Et = function () {\n  function t() {}\n\n  return t.fetchTokenData = function (t, e, n, r, i) {\n    try {\n      var a,\n          o,\n          u = function u(n) {\n        return new G(t, e, n, r, i);\n      };\n\n      void 0 === n && (n = f.getDefaultProvider(y.getNetwork(t)));\n      var s = \"number\" == typeof (null === (a = Ot) || void 0 === a || null === (o = a[t]) || void 0 === o ? void 0 : o[e]);\n      return Promise.resolve(s ? u(Ot[t][e]) : Promise.resolve(new l.Contract(e, At, n).decimals().then(function (n) {\n        var r, i, a;\n        return Ot = P({}, Ot, ((a = {})[t] = P({}, null === (r = Ot) || void 0 === r ? void 0 : r[t], ((i = {})[e] = n, i)), a)), n;\n      })).then(u));\n    } catch (t) {\n      return Promise.reject(t);\n    }\n  }, t.fetchPairData = function (t, e, n) {\n    try {\n      void 0 === n && (n = f.getDefaultProvider(y.getNetwork(t.chainId))), t.chainId !== e.chainId && o(!1);\n      var r = lt.getAddress(t, e);\n      return Promise.resolve(new l.Contract(r, It, n).getReserves()).then(function (n) {\n        var r = n[0],\n            i = n[1],\n            a = t.sortsBefore(e) ? [r, i] : [i, r];\n        return new lt(new pt(t, a[0]), new pt(e, a[1]));\n      });\n    } catch (t) {\n      return Promise.reject(t);\n    }\n  }, t;\n}();\n\nexports.JSBI = a, exports.Currency = J, exports.CurrencyAmount = st, exports.DeploymentInfo = {\n  4: {\n    weth: {\n      proxyAddress: \"0x8C016998148629564e04FCAadD493D643777f559\",\n      implAddress: \"0x8C016998148629564e04FCAadD493D643777f559\",\n      version: \"1.0.0\",\n      contract: \"WETH9\",\n      operator: \"0x3eA0949424eBB2A3d311a943e53773CB05C4BE3e\",\n      fromBlock: 10108203\n    },\n    factory: {\n      proxyAddress: \"0x167d8a11C58A2Dfa4C2F508CD132170F6F1FB006\",\n      implAddress: \"0x167d8a11C58A2Dfa4C2F508CD132170F6F1FB006\",\n      version: \"1.0.0\",\n      contract: \"UniswapV2Factory\",\n      operator: \"0x3eA0949424eBB2A3d311a943e53773CB05C4BE3e\",\n      fromBlock: 10108204\n    },\n    router: {\n      proxyAddress: \"0x619AbA4e59e4B33E1D9E40f34C68568837eC8438\",\n      implAddress: \"0x619AbA4e59e4B33E1D9E40f34C68568837eC8438\",\n      version: \"1.0.0\",\n      contract: \"UniswapV2Router02\",\n      operator: \"0x3eA0949424eBB2A3d311a943e53773CB05C4BE3e\",\n      fromBlock: 10108205\n    }\n  }\n}, exports.ETHER = $, exports.FACTORY_ADDRESS = \"0x5530A244A1E47f7400C981d5dB46A182f8a5e080\", exports.Fetcher = Et, exports.Fraction = ot, exports.INIT_CODE_HASH = h, exports.InsufficientInputAmountError = L, exports.InsufficientReservesError = H, exports.MINIMUM_LIQUIDITY = v, exports.Pair = lt, exports.Percent = mt, exports.Price = ct, exports.Route = yt, exports.Router = xt, exports.Token = G, exports.TokenAmount = pt, exports.Trade = bt, exports.WETH = et, exports.currencyEquals = K, exports.inputOutputComparator = ht, exports.tradeComparator = vt;","map":{"version":3,"sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"names":["ChainId","TradeType","Rounding","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","Error","name","_this","constructor","setPrototypeOf","prototype","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","invariant","greaterThanOrEqual","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","SEPOLIA","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","remainder","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","groupSeparator","rounding","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","CurrencyAmount","ether","amount","currency","parsedAmount","exponentiate","raw","toExact","TokenAmount","token","Price","fromRoute","route","prices","pair","pairs","entries","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","baseCurrency","quoteCurrency","scalar","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","exactIn","amountIn","EXACT_INPUT","exactOut","amountOut","EXACT_OUTPUT","tradeType","amounts","Array","nextPairs","i","nextPair","executionPrice","nextMidPrice","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","maxNumResults","maxHops","currentPairs","originalAmountIn","bestTrades","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","getDefaultProvider","getNetwork","parsedDecimals","Contract","ERC20","then","fetchPairData","reserves0","reserves1","InfererPairAbi","getReserves","balances"],"mappings":";;;;;;;;;;;IAKYA,C;IAKAC,C;IAKAC,C;IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAAA,C;IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,C;IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,OAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA,wBAAAA,CAAAA,C;IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAAAA,C;IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,OAAAA,CAAAA,UAAAA,CAAAA,C;IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,OAAAA,CAAAA,kBAAAA,CAAAA,C;IAAAA,CAAAA,GAAAA,OAAAA,CAAAA,yBAAAA,C;IAAAA,CAAAA,GAAAA,OAAAA,CAAAA,0BAAAA,C;IAAAA,CAAAA,GAAAA,OAAAA,CAAAA,yBAAAA,C;IAAAA,CAAAA,GAAAA,OAAAA,CAAAA,0BAAAA,C;;AAAAA,CAVAF,CAAAA,GAAAA,OAAAA,CAAAA,OAAAA,KAAAA,OAAAA,CAAAA,OAAAA,GAAAA,EAAAA,CAUAE,EAVAF,CAAAA,CAAAA,OAAAA,GAAAA,CAUAE,IAVAF,SAUAE,EARVF,CAAAA,CAAAA,CAAAA,CAAAA,OAAAA,GAAAA,QAAAA,CAAAA,GAAAA,SAQUE,EARVF,CAGUC,CAAAA,GAAAA,OAAAA,CAAAA,SAAAA,KAAAA,OAAAA,CAAAA,SAAAA,GAAAA,EAAAA,CAHVD,EAGUC,CAAAA,CAAAA,WAAAA,GAAAA,CAHVD,IAGUC,aAKAC,EAHVD,CAAAA,CAAAA,CAAAA,CAAAA,YAAAA,GAAAA,CAAAA,CAAAA,GAAAA,cAGUC,EAHVD,CAGUC,CAAAA,GAAAA,OAAAA,CAAAA,QAAAA,KAAAA,OAAAA,CAAAA,QAAAA,GAAAA,EAAAA,CAHVD,EAGUC,CAAAA,CAAAA,UAAAA,GAAAA,CAHVD,IAGUC,YAAAA,EAEVA,CAAAA,CAAAA,CAAAA,CAAAA,aAAAA,GAAAA,CAAAA,CAAAA,GAAAA,eAFUA,EAGVA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,GAAAA,CAAAA,CAAAA,GAAAA,UAHUA;AAGVA,IAoBUc,CApBVd;AAAAA,IAKWC,CAAAA,GAAiB,oEAL5BD;AAAAA,IAOWE,CAAAA,GAAoBC,CAAAA,CAAKC,MAALD,CAAY,GAAZA,CAP/BH;AAAAA,IAUWK,CAAAA,GAAOF,CAAAA,CAAKC,MAALD,CAAY,CAAZA,CAVlBH;AAAAA,IAWWM,CAAAA,GAAMH,CAAAA,CAAKC,MAALD,CAAY,CAAZA,CAXjBH;AAAAA,IAYWO,CAAAA,GAAMJ,CAAAA,CAAKC,MAALD,CAAY,CAAZA,CAZjBH;AAAAA,IAaWQ,CAAAA,GAAQL,CAAAA,CAAKC,MAALD,CAAY,CAAZA,CAbnBH;AAAAA,IAcWS,CAAAA,GAAON,CAAAA,CAAKC,MAALD,CAAY,CAAZA,CAdlBH;AAAAA,IAeWU,CAAAA,GAAMP,CAAAA,CAAKC,MAALD,CAAY,EAAZA,CAfjBH;AAAAA,IAgBWW,CAAAA,GAAOR,CAAAA,CAAKC,MAALD,CAAY,GAAZA,CAhBlBH;AAAAA,IAiBWY,CAAAA,GAAOT,CAAAA,CAAKC,MAALD,CAAY,GAAZA,CAjBlBH;AAAAA,IAkBWa,CAAAA,GAAQV,CAAAA,CAAKC,MAALD,CAAY,GAAZA,CAlBnBH;AAkB+B,CAEjC,UAAYc,CAAZ,EAAYA;AACVA,EAAAA,CAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EACAA,CAAAA,CAAAA,OAAAA,GAAAA,SADAA;AADF,CAAA,CAAYA,CAAAA,KAAAA,CAAAA,GAAAA,EAAAA,CAAZ,CAFiC;AAO1B,IAAMC,CAAAA,IAAAA,CAAAA,CAAAA,GAAAA,EAAAA,EACVD,CAAAA,CAAaE,KADHD,IACWZ,CAAAA,CAAKC,MAALD,CAAY,MAAZA,CADXY,EACuB,CAAA,CACjCD,CAAAA,CAAaG,OADoB,CAAA,GACVd,CAAAA,CAAKC,MAALD,CAAY,oEAAZA,CAFbY,EAEyB,CAFzBA,CAAN;;AAE+B,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AAAA,OAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA,IAAA,CAAA,CAAA,UAAA,GAAA,CAAA,CAAA,UAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA,YAAA,GAAA,CAAA,CAAA,EAAA,WAAA,CAAA,KAAA,CAAA,CAAA,QAAA,GAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAAA;AAAA;;AAAA,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,SAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA;AAAA;;AAAA,SAAA,CAAA,GAAA;AAAA,SAAA,CAAA,CAAA,GAAA,MAAA,CAAA,MAAA,IAAA,UAAA,CAAA,EAAA;AAAA,SAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AAAA,UAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA;;AAAA,WAAA,IAAA,CAAA,IAAA,CAAA;AAAA,QAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA;AAAA;;AAAA,WAAA,CAAA;AAAA,GAAA,EAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AAAA,EAAA,CAAA,CAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA,SAAA,CAAA,WAAA,GAAA,CAAA,EAAA,CAAA,CAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,SAAA,CAAA,CAAA,CAAA,EAAA;AAAA,SAAA,CAAA,CAAA,GAAA,MAAA,CAAA,cAAA,GAAA,MAAA,CAAA,cAAA,GAAA,UAAA,CAAA,EAAA;AAAA,WAAA,CAAA,CAAA,SAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,CAAA;AAAA,GAAA,EAAA,CAAA,CAAA;AAAA;;AAAA,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AAAA,SAAA,CAAA,CAAA,GAAA,MAAA,CAAA,cAAA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,WAAA,CAAA,CAAA,SAAA,GAAA,CAAA,EAAA,CAAA;AAAA,GAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AAAA;;AAAA,SAAA,CAAA,GAAA;AAAA,MAAA,eAAA,OAAA,OAAA,IAAA,CAAA,OAAA,CAAA,SAAA,EAAA,OAAA,CAAA,CAAA;AAAA,MAAA,OAAA,CAAA,SAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;AAAA,MAAA,cAAA,OAAA,KAAA,EAAA,OAAA,CAAA,CAAA;;AAAA,MAAA;AAAA,WAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA,CAAA,SAAA,CAAA,IAAA,EAAA,EAAA,EAAA,YAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,GAAA,CAAA,OAAA,CAAA,EAAA;AAAA,WAAA,CAAA,CAAA;AAAA;AAAA;;AAAA,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,SAAA,CAAA,CAAA,GAAA,CAAA,KAAA,OAAA,CAAA,SAAA,GAAA,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA;AAAA,IAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA;AAAA,QAAA,CAAA,GAAA,KAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA;AAAA,WAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,SAAA,CAAA,EAAA,CAAA;AAAA,GAAA,EAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,SAAA,CAAA,CAAA,CAAA,EAAA;AAAA,MAAA,CAAA,GAAA,cAAA,OAAA,GAAA,GAAA,IAAA,GAAA,EAAA,GAAA,KAAA,CAAA;AAAA,SAAA,CAAA,CAAA,GAAA,WAAA,CAAA,EAAA;AAAA,QAAA,SAAA,CAAA,IAAA,CAAA,CAAA,KAAA,QAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,OAAA,CAAA,eAAA,CAAA,EAAA,OAAA,CAAA;AAAA,QAAA,cAAA,OAAA,CAAA,EAAA,MAAA,IAAA,SAAA,CAAA,oDAAA,CAAA;;AAAA,QAAA,KAAA,CAAA,KAAA,CAAA,EAAA;AAAA,UAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AAAA,MAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA;AAAA;;AAAA,aAAA,CAAA,GAAA;AAAA,aAAA,CAAA,CAAA,CAAA,EAAA,SAAA,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,WAAA,CAAA;AAAA;;AAAA,WAAA,CAAA,CAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,SAAA,EAAA;AAAA,MAAA,WAAA,EAAA;AAAA,QAAA,KAAA,EAAA,CAAA;AAAA,QAAA,UAAA,EAAA,CAAA,CAAA;AAAA,QAAA,QAAA,EAAA,CAAA,CAAA;AAAA,QAAA,YAAA,EAAA,CAAA;AAAA;AAAA,KAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAA,GAAA,EAAA,CAAA,CAAA;AAAA;;AAAA,SAAA,CAAA,CAAA,CAAA,EAAA;AAAA,MAAA,KAAA,CAAA,KAAA,CAAA,EAAA,MAAA,IAAA,cAAA,CAAA,2DAAA,CAAA;AAAA,SAAA,CAAA;AAAA;;AAAA,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AAAA,GAAA,QAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,MAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA;;AAAA,OAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA;AAAA,IAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA;;AAAA,SAAA,CAAA;AAAA;;AAAA,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AAAA,MAAA,CAAA;;AAAA,MAAA,eAAA,OAAA,MAAA,IAAA,QAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA;AAAA,QAAA,KAAA,CAAA,OAAA,CAAA,CAAA,MAAA,CAAA,GAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,UAAA,CAAA,EAAA;AAAA,YAAA,YAAA,OAAA,CAAA,EAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA;AAAA,YAAA,CAAA,GAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAAA,eAAA,aAAA,CAAA,IAAA,CAAA,CAAA,WAAA,KAAA,CAAA,GAAA,CAAA,CAAA,WAAA,CAAA,IAAA,GAAA,UAAA,CAAA,IAAA,UAAA,CAAA,GAAA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,gBAAA,CAAA,IAAA,2CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,GAAA,KAAA,CAAA;AAAA;AAAA,KAAA,CAAA,CAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,YAAA,OAAA,CAAA,CAAA,MAAA,EAAA;AAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA;AAAA,aAAA,YAAA;AAAA,eAAA,CAAA,IAAA,CAAA,CAAA,MAAA,GAAA;AAAA,UAAA,IAAA,EAAA,CAAA;AAAA,SAAA,GAAA;AAAA,UAAA,IAAA,EAAA,CAAA,CAAA;AAAA,UAAA,KAAA,EAAA,CAAA,CAAA,CAAA,EAAA;AAAA,SAAA;AAAA,OAAA;AAAA;;AAAA,UAAA,IAAA,SAAA,CAAA,uIAAA,CAAA;AAAA;;AAAA,SAAA,CAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AC5CtC;;AAAA,IAAMG,CAAAA,IAAoB,oBAAoBC,MAAxCD,CAAN;AAAA,IAMaE,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAAAA,WAAAA,CAAAA,GAAAA;AAAAA,QAAAA,CAAAA;AAAAA,WAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,KAAAA,IAAAA,EAAAA,2BAAAA,GAAAA,CACyC,CADzCA,EACyC,CAAA,CAI7CE,IAJ6C,GAItCC,CAAAA,CAAKC,WAALD,CAAiBD,IALpBF,EAMLF,CAAAA,IAAmBC,MAAAA,CAAOM,cAAPN,CAAOM,CAAAA,CAAAA,CAAAA,CAAPN,EAAOM,CAAAA,gBAAAA,CAAAA,GAAAA,KAAAA,WAAAA,GAAAA,KAAAA,CAAAA,EAAgCC,SAAvCP,CANdC,EAMqDM,CANrDN;AAMqDM;;AAAAA,SAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,CANrDN,CAMqDM,CAAAA,CANnBL,KAMmBK,CANrDN,CANb;AAAA,IAoBaO,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAAAA,WAAAA,CAAAA,GAAAA;AAAAA,QAAAA,CAAAA;AAAAA,WAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,KAAAA,IAAAA,EAAAA,8BAAAA,GAAAA,CAC4C,CAD5CA,EAC4C,CAAA,CAIhDL,IAJgD,GAIzCM,CAAAA,CAAKJ,WAALI,CAAiBN,IALpBK,EAMLT,CAAAA,IAAmBC,MAAAA,CAAOM,cAAPN,CAAOM,CAAAA,CAAAA,CAAAA,CAAPN,EAAOM,CAAAA,gBAAAA,CAAAA,GAAAA,KAAAA,WAAAA,GAAAA,KAAAA,CAAAA,EAAgCC,SAAvCP,CANdQ,EAMqDD,CANrDC;AAMqDD;;AAAAA,SAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,CANrDC,CAMqDD,CAAAA,CANhBL,KAMgBK,CANrDC,CApBb;;AAoBkDN,SCdlCQ,CDckCR,CCdLS,CDcKT,ECdQU,CDcRV,ECdQU;AAC9C5B,EAAAA,CAAAA,CAAK8B,kBAAL9B,CAAwB2B,CAAxB3B,EAA+BE,CAA/BF,KAAV6B,CAAAA,CAAAA,CAAAA,CAAAA,CAAU7B,EACAA,CAAAA,CAAK+B,eAAL/B,CAAqB2B,CAArB3B,EAA4BY,CAAAA,CAAqBgB,CAArBhB,CAA5BZ,KAAV6B,CAAAA,CAAAA,CAAAA,CAAAA,CADU7B;AACV6B;;AAAAA,SAIcG,CAJdH,CAIsCI,CAJtCJ,EAIsCI;AAAAA,MAAAA;AAAAA,WAETC,CAAAA,CAAAA,UAAAA,CAAWD,CAAXC,CAFSD;AAKpC,GALoCA,CAKpC,OAAOE,CAAP,EAAOA;AACPN,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,SAIYO,CAJZP,CAI2BQ,CAJ3BR,EAI2BQ;AAAAA,SACtBA,CAAAA,YAAqBrC,CAArBqC,GACHA,CADGA,GAGHrC,CAAAA,CAAKC,MAALD,CADqB,YAAA,OAAdqC,CAAc,GACTA,CAAAA,CAAUC,QAAVD,EADS,GAETA,CADZrC,CAJyBqC;AAKbA;;AAAAA,SAIFE,CAJEF,CAIGG,CAJHH,EAIGG;AACnBd,EAAAA,CAAAA,CAA6Bc,CAA7Bd,EAAgCf,CAAAA,CAAaG,OAA7CY,CAAAA;AAA6CZ,MAEzC4B,CAFyC5B;AAAAA,MACzC2B,CAAAA,GAAUvC,CAD+BY;AAC/BZ,MAEVF,CAAAA,CAAK2C,WAAL3C,CAAiBwC,CAAjBxC,EAAoBK,CAApBL,CAFUE,EAEUG,KACtBoC,CAAAA,GAAID,CAAJC,EACAC,CAAAA,GAAI1C,CAAAA,CAAK4C,GAAL5C,CAASA,CAAAA,CAAK6C,MAAL7C,CAAYwC,CAAZxC,EAAeI,CAAfJ,CAATA,EAA8BG,CAA9BH,CAFkBK,EAGfL,CAAAA,CAAK8C,QAAL9C,CAAc0C,CAAd1C,EAAiByC,CAAjBzC,CAHeK;AAIpBoC,IAAAA,CAAAA,GAAIC,CAAJD,EACAC,CAAAA,GAAI1C,CAAAA,CAAK6C,MAAL7C,CAAYA,CAAAA,CAAK4C,GAAL5C,CAASA,CAAAA,CAAK6C,MAAL7C,CAAYwC,CAAZxC,EAAe0C,CAAf1C,CAATA,EAA4B0C,CAA5B1C,CAAZA,EAA4CI,CAA5CJ,CADJyC;AAJoBpC,GAFVH,MASHF,CAAAA,CAAK+C,QAAL/C,CAAcwC,CAAdxC,EAAiBE,CAAjBF,MACTyC,CAAAA,GAAItC,CADKH;AACLG,SAECsC,CAFDtC;AAOR;;AAAA,SAAgB6C,CAAhB,CAAgCC,CAAhC,EAA4CL,CAA5C,EAAoDM,CAApD,EAAqEC,CAArE,EAAqEA;AAAAA,MACzDD,CAAAA,GAAU,CAAVA,IAAVrB,CAAAA,CAAAA,CAAAA,CAAAA,CAAUqB,EAEAD,CAAAA,CAAMG,MAANH,IAAgBC,CAAhBD,IAAVpB,CAAAA,CAAAA,CAAAA,CAAAA,CAFUqB,EAKW,MAAjBD,CAAAA,CAAMG,MANyDD,EAMzDC,OACRH,CAAAA,CAAMI,IAANJ,CAAWL,CAAXK,GACO,IAFCG;AAED,MAEDE,CAAAA,GAASL,CAAAA,CAAMG,MAANH,KAAiBC,CAFzB;AAEyBA,MAE5BI,CAAAA,IAAUH,CAAAA,CAAWF,CAAAA,CAAMA,CAAAA,CAAMG,MAANH,GAAe,CAArBA,CAAXE,EAAoCP,CAApCO,CAAAA,IAA4C,CAF1BD,EAE0B,OACjDN,CADiD;;AACjDA,OAAAA,IAGLW,CAAAA,GAAK,CAHAX,EAIPY,CAAAA,GAAKP,CAAAA,CAAMG,MAJJR,EAMFW,CAAAA,GAAKC,CANHZ,GAMO;AAAA,QACRa,CAAAA,GAAOF,CAAAA,GAAKC,CAALD,KAAa,CADZ;AAEVJ,IAAAA,CAAAA,CAAWF,CAAAA,CAAMQ,CAANR,CAAXE,EAAuBP,CAAvBO,CAAAA,IAA+B,CAA/BA,GACFI,CAAAA,GAAKE,CAAAA,GAAM,CADTN,GAGFK,CAAAA,GAAKC,CAHHN;AAGGM;;AAAAA,SAGTR,CAAAA,CAAMS,MAANT,CAAaM,CAAbN,EAAiB,CAAjBA,EAAoBL,CAApBK,GACOK,CAAAA,GAASL,CAAAA,CAAMU,GAANV,EAATK,GAAwB,IAJtBG;AAIsB;;AAAA,IAAA,CAAA;AAAA,ICrEtBG,CAAAA,GAgBX,SAhBWA,CAgBX,CAAsBC,CAAtB,EAAwCC,CAAxC,EAAyD3C,CAAzD,EAAyDA;AACvDO,EAAAA,CAAAA,CAA6B1B,CAAAA,CAAKC,MAALD,CAAY6D,CAAZ7D,CAA7B0B,EAAoDf,CAAAA,CAAaE,KAAjEa,CAAAA,EAAiEb,KAE5DgD,QAF4DhD,GAEjDgD,CAFhBnC,EAEgBmC,KACXC,MADWD,GACFC,CAHdpC,EAGcoC,KACT3C,IADS2C,GACF3C,CAJZO;AAIYP,CDgDmB;AAAA,IC5C7B4C,CAAAA,GAjBmBH,CAAAA,CAAAA,KAAAA,GAAkB,IAAIA,CAAJ,CAAa,EAAb,EAAiB,KAAjB,EAAwB,OAAxB,CD6DR;AAAA,IEtEtBI,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAAAA,WAAAA,CAAAA,CAIQC,CAJRD,EAI0B/B,CAJ1B+B,EAI2CH,CAJ3CG,EAI6DF,CAJ7DE,EAI8E7C,CAJ9E6C,EAI8E7C;AAAAA,QAAAA,CAAAA;AAAAA,WAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EACjF0C,CADiF1C,EACvE2C,CADuE3C,EAC/DA,CAD+DA,KAC/DA,IAD+DA,EAElF8C,OAFkF9C,GAExE8C,CAFwE9C,EAExE8C,CAAAA,CACVhC,OADUgC,GACAjC,CAAAA,CAAwBC,CAAxBD,CAHwEb,EAGhDc,CAHgDd;AAGhDc;;AAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,SAAAA;AAAAA,SAAAA,CAAAA,CAOlCiC,MAPkCjC,GAOlCiC,UAAOC,CAAPD,EAAOC;AAAAA,WAERC,SAASD,CAATC,IAGGA,KAAKH,OAALG,KAAiBD,CAAAA,CAAMF,OAAvBG,IAAkCA,KAAKnC,OAALmC,KAAiBD,CAAAA,CAAMlC,OALpDkC;AAKoDlC,GAZzBA,EAYyBA,CAAAA,CAS3DoC,WAT2DpC,GAS3DoC,UAAYF,CAAZE,EAAYF;AAAAA,WACPC,KAAKH,OAALG,KAAiBD,CAAAA,CAAMF,OAAvBG,IAAVvC,CAAAA,CAAAA,CAAAA,CAAAA,CAAUuC,EACAA,KAAKnC,OAALmC,KAAiBD,CAAAA,CAAMlC,OAAvBmC,IAAVvC,CAAAA,CAAAA,CAAAA,CAAAA,CADUuC,EAEHA,KAAKnC,OAALmC,CAAaE,WAAbF,KAA6BD,CAAAA,CAAMlC,OAANkC,CAAcG,WAAdH,EAHnBA;AAGiCG,GAxBXrC,EAwBWqC,CAxBXrC;AAwBWqC,CA/BzCN,CAAcJ,CAAdI,CFsEsB;;AEtERJ,SAsCXW,CAtCWX,CAsCIY,CAtCJZ,EAsCyBa,CAtCzBb,EAsCyBa;AAAAA,SAC9CD,CAAAA,YAAqBR,CAArBQ,IAA8BC,CAAAA,YAAqBT,CAAnDQ,GACKA,CAAAA,CAAUN,MAAVM,CAAiBC,CAAjBD,CADLA,GACsBC,EACfD,CAAAA,YAAqBR,CAArBQ,IAEAC,CAAAA,YAAqBT,CAFrBQ,IAKFA,CAAAA,KAAcC,CANGA,CAFwBA;AAYpD;;AAAA,IAAA,CAAA;AAAA,IAAA,EAAA;AAAA,IAAaC,EAAAA,IAAAA,CAAAA,CAAAA,GAAAA,EAAAA,EACV/E,OAAAA,CAAAA,OAAAA,CAAQgF,OADED,IACQ,IAAIV,CAAJ,CACjBrE,OAAAA,CAAAA,OAAAA,CAAQgF,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,MAJiB,EAKjB,eALiB,CADRD,EAMT,CAAA,CAED/E,OAAAA,CAAAA,OAAAA,CAAQiF,OAFP,CAAA,GAEiB,IAAIZ,CAAJ,CACjBrE,OAAAA,CAAAA,OAAAA,CAAQiF,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,MAJiB,EAKjB,eALiB,CARRF,EAaT,CAbSA,CAAb;AAAA,ICjDMG,EAAAA,GAAUC,CAAAA,CAASC,CAATD,CDiDhB;AAAA,IChDME,EAAAA,GAAMF,CAAAA,CAASG,CAATH,CDgDZ;AAAA,IC9CMI,EAAAA,IAAAA,CAAAA,CAAAA,GAAAA,EAAAA,EACHrF,OAAAA,CAAAA,QAAAA,CAASsF,UADND,IACmBL,EAAAA,CAAQM,UAD3BD,EAC2BC,CAAAA,CAC9BtF,OAAAA,CAAAA,QAAAA,CAASuF,aADqBD,CAAAA,GACLN,EAAAA,CAAQO,aAF9BF,EAE8BE,CAAAA,CACjCvF,OAAAA,CAAAA,QAAAA,CAASwF,QADwBD,CAAAA,GACbP,EAAAA,CAAQQ,QAHzBH,EAGyBG,CAHzBH,CD8CN;AAAA,ICxCMI,EAAAA,IAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EACHzF,OAAAA,CAAAA,QAAAA,CAASsF,UADNG,IACMH,CADNG,EACMH,EAAAA,CACTtF,OAAAA,CAAAA,QAAAA,CAASuF,aADAD,CAAAA,GACAC,CAFNE,EAEMF,EAAAA,CACTvF,OAAAA,CAAAA,QAAAA,CAASwF,QADAD,CAAAA,GACAC,CAHNC,EAGMD,EAHNC,CDwCN;AAAA,IClCaC,EAAAA,GAAAA,YAAAA;AAAAA,WAAAA,CAAAA,CAIQC,CAJRD,EAI8BE,CAJ9BF,EAI8BE;AAAAA,SAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAyBtF,CAAzBsF,GAAyBtF,KAC3DqF,SAD2DrF,GAC/CiC,CAAAA,CAAeoD,CAAfpD,CADsBqD,EACPD,KAC3BC,WAD2BD,GACbpD,CAAAA,CAAeqD,CAAfrD,CAFoBqD;AAELA;;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,SAAAA;AAAAA,SAAAA,CAAAA,CAa7BE,MAb6BF,GAa7BE,YAAAA;AAAAA,WACE,IAAIJ,CAAJ,CAAanB,KAAKqB,WAAlB,EAA+BrB,KAAKoB,SAApC,CADFG;AACsCH,GAdTC,EAcSD,CAAAA,CAGtC5C,GAHsC4C,GAGtC5C,UAAIuB,CAAJvB,EAAIuB;AAAAA,QACHyB,CAAAA,GAAczB,CAAAA,YAAiBoB,CAAjBpB,GAA4BA,CAA5BA,GAAoC,IAAIoB,CAAJ,CAAanD,CAAAA,CAAe+B,CAAf/B,CAAb,CAD/C+B;AAC2EA,WAChFnE,CAAAA,CAAK6F,KAAL7F,CAAWoE,KAAKqB,WAAhBzF,EAA6B4F,CAAAA,CAAYH,WAAzCzF,IACK,IAAIuF,CAAJ,CAAavF,CAAAA,CAAK4C,GAAL5C,CAASoE,KAAKoB,SAAdxF,EAAyB4F,CAAAA,CAAYJ,SAArCxF,CAAb,EAA8DoE,KAAKqB,WAAnE,CADLzF,GAGG,IAAIuF,CAAJ,CACLvF,CAAAA,CAAK4C,GAAL5C,CACEA,CAAAA,CAAK8F,QAAL9F,CAAcoE,KAAKoB,SAAnBxF,EAA8B4F,CAAAA,CAAYH,WAA1CzF,CADFA,EAEEA,CAAAA,CAAK8F,QAAL9F,CAAc4F,CAAAA,CAAYJ,SAA1BxF,EAAqCoE,KAAKqB,WAA1CzF,CAFFA,CADK,EAKLA,CAAAA,CAAK8F,QAAL9F,CAAcoE,KAAKqB,WAAnBzF,EAAgC4F,CAAAA,CAAYH,WAA5CzF,CALK,CAJ6EmE;AAStCsB,GA3BZA,EA2BYA,CAAAA,CAIzCM,QAJyCN,GAIzCM,UAAS5B,CAAT4B,EAAS5B;AAAAA,QACRyB,CAAAA,GAAczB,CAAAA,YAAiBoB,CAAjBpB,GAA4BA,CAA5BA,GAAoC,IAAIoB,CAAJ,CAAanD,CAAAA,CAAe+B,CAAf/B,CAAb,CAD1C+B;AACsEA,WAChFnE,CAAAA,CAAK6F,KAAL7F,CAAWoE,KAAKqB,WAAhBzF,EAA6B4F,CAAAA,CAAYH,WAAzCzF,IACK,IAAIuF,CAAJ,CAAavF,CAAAA,CAAK+F,QAAL/F,CAAcoE,KAAKoB,SAAnBxF,EAA8B4F,CAAAA,CAAYJ,SAA1CxF,CAAb,EAAmEoE,KAAKqB,WAAxE,CADLzF,GAGG,IAAIuF,CAAJ,CACLvF,CAAAA,CAAK+F,QAAL/F,CACEA,CAAAA,CAAK8F,QAAL9F,CAAcoE,KAAKoB,SAAnBxF,EAA8B4F,CAAAA,CAAYH,WAA1CzF,CADFA,EAEEA,CAAAA,CAAK8F,QAAL9F,CAAc4F,CAAAA,CAAYJ,SAA1BxF,EAAqCoE,KAAKqB,WAA1CzF,CAFFA,CADK,EAKLA,CAAAA,CAAK8F,QAAL9F,CAAcoE,KAAKqB,WAAnBzF,EAAgC4F,CAAAA,CAAYH,WAA5CzF,CALK,CAJ6EmE;AAStCsB,GAzCZA,EAyCYA,CAAAA,CAIzC3C,QAJyC2C,GAIzC3C,UAASqB,CAATrB,EAASqB;AAAAA,QACRyB,CAAAA,GAAczB,CAAAA,YAAiBoB,CAAjBpB,GAA4BA,CAA5BA,GAAoC,IAAIoB,CAAJ,CAAanD,CAAAA,CAAe+B,CAAf/B,CAAb,CAD1C+B;AACsEA,WAC7EnE,CAAAA,CAAK8C,QAAL9C,CACLA,CAAAA,CAAK8F,QAAL9F,CAAcoE,KAAKoB,SAAnBxF,EAA8B4F,CAAAA,CAAYH,WAA1CzF,CADKA,EAELA,CAAAA,CAAK8F,QAAL9F,CAAc4F,CAAAA,CAAYJ,SAA1BxF,EAAqCoE,KAAKqB,WAA1CzF,CAFKA,CAD6EmE;AAGxCsB,GAjDVA,EAiDUA,CAAAA,CAIvCO,OAJuCP,GAIvCO,UAAQ7B,CAAR6B,EAAQ7B;AAAAA,QACPyB,CAAAA,GAAczB,CAAAA,YAAiBoB,CAAjBpB,GAA4BA,CAA5BA,GAAoC,IAAIoB,CAAJ,CAAanD,CAAAA,CAAe+B,CAAf/B,CAAb,CAD3C+B;AACuEA,WAC7EnE,CAAAA,CAAK6F,KAAL7F,CACLA,CAAAA,CAAK8F,QAAL9F,CAAcoE,KAAKoB,SAAnBxF,EAA8B4F,CAAAA,CAAYH,WAA1CzF,CADKA,EAELA,CAAAA,CAAK8F,QAAL9F,CAAc4F,CAAAA,CAAYJ,SAA1BxF,EAAqCoE,KAAKqB,WAA1CzF,CAFKA,CAD6EmE;AAGxCsB,GAzDVA,EAyDUA,CAAAA,CAIvC9C,WAJuC8C,GAIvC9C,UAAYwB,CAAZxB,EAAYwB;AAAAA,QACXyB,CAAAA,GAAczB,CAAAA,YAAiBoB,CAAjBpB,GAA4BA,CAA5BA,GAAoC,IAAIoB,CAAJ,CAAanD,CAAAA,CAAe+B,CAAf/B,CAAb,CADvC+B;AACmEA,WAC7EnE,CAAAA,CAAK2C,WAAL3C,CACLA,CAAAA,CAAK8F,QAAL9F,CAAcoE,KAAKoB,SAAnBxF,EAA8B4F,CAAAA,CAAYH,WAA1CzF,CADKA,EAELA,CAAAA,CAAK8F,QAAL9F,CAAc4F,CAAAA,CAAYJ,SAA1BxF,EAAqCoE,KAAKqB,WAA1CzF,CAFKA,CAD6EmE;AAGxCsB,GAjEVA,EAiEUA,CAAAA,CAIvCK,QAJuCL,GAIvCK,UAAS3B,CAAT2B,EAAS3B;AAAAA,QACRyB,CAAAA,GAAczB,CAAAA,YAAiBoB,CAAjBpB,GAA4BA,CAA5BA,GAAoC,IAAIoB,CAAJ,CAAanD,CAAAA,CAAe+B,CAAf/B,CAAb,CAD1C+B;AACsEA,WAC7E,IAAIoB,CAAJ,CACLvF,CAAAA,CAAK8F,QAAL9F,CAAcoE,KAAKoB,SAAnBxF,EAA8B4F,CAAAA,CAAYJ,SAA1CxF,CADK,EAELA,CAAAA,CAAK8F,QAAL9F,CAAcoE,KAAKqB,WAAnBzF,EAAgC4F,CAAAA,CAAYH,WAA5CzF,CAFK,CAD6EmE;AAGtCsB,GAzEZA,EAyEYA,CAAAA,CAIzC5C,MAJyC4C,GAIzC5C,UAAOsB,CAAPtB,EAAOsB;AAAAA,QACNyB,CAAAA,GAAczB,CAAAA,YAAiBoB,CAAjBpB,GAA4BA,CAA5BA,GAAoC,IAAIoB,CAAJ,CAAanD,CAAAA,CAAe+B,CAAf/B,CAAb,CAD5C+B;AACwEA,WAC7E,IAAIoB,CAAJ,CACLvF,CAAAA,CAAK8F,QAAL9F,CAAcoE,KAAKoB,SAAnBxF,EAA8B4F,CAAAA,CAAYH,WAA1CzF,CADK,EAELA,CAAAA,CAAK8F,QAAL9F,CAAcoE,KAAKqB,WAAnBzF,EAAgC4F,CAAAA,CAAYJ,SAA5CxF,CAFK,CAD6EmE;AAGtCqB,GAjFZC,EAiFYD,CAAAA,CAIzCS,aAJyCT,GAIzCS,UACLC,CADKD,EAELE,CAFKF,EAGLI,CAHKJ,EAGLI;AAAAA,SAAAA,CAAAA,KADAF,CACAE,KADAF,CAAAA,GAAiB;AAAEC,MAAAA,cAAAA,EAAgB;AAAlB,KACjBC,GADmC,KAAA,CAAA,KACnCA,CADmC,KACnCA,CAAAA,GAAqBxG,OAAAA,CAAAA,QAAAA,CAASuF,aADK,CACnCiB,EAEUC,MAAAA,CAAOC,SAAPD,CAAiBJ,CAAjBI,KAAVzE,CAAAA,CAAAA,CAAAA,CAAAA,CAFAwE,EAGUH,CAAAA,GAAoB,CAApBA,IAAVrE,CAAAA,CAAAA,CAAAA,CAAAA,CAHAwE,EAKAxB,EAAAA,CAAQ2B,GAAR3B,CAAY;AAAE4B,MAAAA,SAAAA,EAAWP,CAAAA,GAAoB,CAAjC;AAAoCG,MAAAA,QAAAA,EAAUnB,EAAAA,CAAsBmB,CAAtBnB;AAA9C,KAAZL,CALAwB;AAKgFA,QAC1EK,CAAAA,GAAW,IAAI7B,EAAJ,CAAYT,KAAKoB,SAALpB,CAAe9B,QAAf8B,EAAZ,EACduC,GADc,CACVvC,KAAKqB,WAALrB,CAAiB9B,QAAjB8B,EADU,EAEdwC,mBAFc,CAEMV,CAFN,CAD+DG;AAGzDH,WAChBQ,CAAAA,CAAS5B,QAAT4B,CAAkBA,CAAAA,CAASG,aAATH,EAAlBA,EAA4CP,CAA5CO,CADgBR;AAC4BC,GAjGjBV,EAiGiBU,CAAAA,CAG9CW,OAH8CX,GAG9CW,UACLD,CADKC,EAELX,CAFKW,EAGLT,CAHKS,EAGLT;AAAAA,WAAAA,KAAAA,CAAAA,KADAF,CACAE,KADAF,CAAAA,GAAiB;AAAEC,MAAAA,cAAAA,EAAgB;AAAlB,KACjBC,GADmC,KAAA,CAAA,KACnCA,CADmC,KACnCA,CAAAA,GAAqBxG,OAAAA,CAAAA,QAAAA,CAASuF,aADK,CACnCiB,EAEUC,MAAAA,CAAOC,SAAPD,CAAiBO,CAAjBP,KAAVzE,CAAAA,CAAAA,CAAAA,CAAAA,CAFAwE,EAGUQ,CAAAA,IAAiB,CAAjBA,IAAVhF,CAAAA,CAAAA,CAAAA,CAAAA,CAHAwE,EAKArB,EAAAA,CAAI+B,EAAJ/B,GAAS6B,CALTR,EAMArB,EAAAA,CAAIgC,EAAJhC,GAASM,EAAAA,CAAgBe,CAAhBf,CANTe,EAOO,IAAIrB,EAAJ,CAAQZ,KAAKoB,SAALpB,CAAe9B,QAAf8B,EAAR,EAAmCuC,GAAnC,CAAuCvC,KAAKqB,WAALrB,CAAiB9B,QAAjB8B,EAAvC,EAAoEU,QAApE,CAA6E+B,CAA7E,EAA4FV,CAA5F,CAPPE;AAOmGF,GA9GjEV,EA8GiEU,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,IAAAA,GAAAA,EAAAA,UAAAA;AAAAA,IAAAA,GAAAA,EAAAA,eAAAA;AAAAA,aAzG5FnG,CAAAA,CAAK6C,MAAL7C,CAAYoE,KAAKoB,SAAjBxF,EAA4BoE,KAAKqB,WAAjCzF,CAyG4FmG;AAzG3DV;AAyG2DU,GAAAA,EAzG3DV;AAAAA,IAAAA,GAAAA,EAAAA,WAAAA;AAAAA,IAAAA,GAAAA,EAAAA,eAAAA;AAAAA,aAKjC,IAAIF,CAAJ,CAAavF,CAAAA,CAAK0F,SAAL1F,CAAeoE,KAAKoB,SAApBxF,EAA+BoE,KAAKqB,WAApCzF,CAAb,EAA+DoE,KAAKqB,WAApE,CALiCA;AAKmCA;AALnCA,GAyG2DU,CAAAA,CA9GjEV,EAUyCA,CAVzCA;AAUyCA,CAhBlEF,EDkCb;AAAA,IEhDMP,EAAAA,GAAMF,CAAAA,CAASG,CAATH,CFgDZ;AAAA,IE9CamC,EAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAAAA,WAAAA,CAAAA,CAYWG,CAZXH,EAY+BE,CAZ/BF,EAY+BE;AAAAA,QAAAA,CAAAA;AAAAA,QAClCE,CAAAA,GAAejF,CAAAA,CAAe+E,CAAf/E,CADmB+E;AACJA,WACpCzF,CAAAA,CAA6B2F,CAA7B3F,EAA2Cf,CAAAA,CAAaG,OAAxDY,CAAAA,EAAwDZ,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAElDuG,CAFkDvG,EAEpCd,CAAAA,CAAKsH,YAALtH,CAAkBO,CAAlBP,EAAuBA,CAAAA,CAAKC,MAALD,CAAYoH,CAAAA,CAASvD,QAArB7D,CAAvBA,CAFoCc,KAEQ+C,IAFR/C,EAGnDsG,QAHmDtG,GAGxCsG,CAHhB1F,EAGgB0F,CAJoBD;AAIpBC;;AAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAVJF,KAUIE,GAVX,UAAaD,CAAb,EAAaA;AAAAA,WACX,IAAIF,CAAJ,CAAmBlD,CAAnB,EAA0BoD,CAA1B,CADWA;AACeA,GASjBC;AATiBD,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,SAAAA;AAAAA,SAAAA,CAAAA,CAgB5BvE,GAhB4BuE,GAgB5BvE,UAAIuB,CAAJvB,EAAIuB;AAAAA,WACCI,CAAAA,CAAeH,KAAKgD,QAApB7C,EAA8BJ,CAAAA,CAAMiD,QAApC7C,CAAAA,IAAV1C,CAAAA,CAAAA,CAAAA,CAAAA,CAAU0C,EACH,IAAI0C,CAAJ,CAAmB7C,KAAKgD,QAAxB,EAAkCpH,CAAAA,CAAK4C,GAAL5C,CAASoE,KAAKmD,GAAdvH,EAAmBmE,CAAAA,CAAMoD,GAAzBvH,CAAlC,CAFEmE;AAEyDoD,GAlBjCJ,EAkBiCI,CAAAA,CAG7DxB,QAH6DwB,GAG7DxB,UAAS5B,CAAT4B,EAAS5B;AAAAA,WACJI,CAAAA,CAAeH,KAAKgD,QAApB7C,EAA8BJ,CAAAA,CAAMiD,QAApC7C,CAAAA,IAAV1C,CAAAA,CAAAA,CAAAA,CAAAA,CAAU0C,EACH,IAAI0C,CAAJ,CAAmB7C,KAAKgD,QAAxB,EAAkCpH,CAAAA,CAAK+F,QAAL/F,CAAcoE,KAAKmD,GAAnBvH,EAAwBmE,CAAAA,CAAMoD,GAA9BvH,CAAlC,CAFOmE;AAEyDoD,GAvBtCJ,EAuBsCI,CAAAA,CAGlEtB,aAHkEsB,GAGlEtB,UACLC,CADKD,EAELE,CAFKF,EAGLI,CAHKJ,EAGLI;AAAAA,WAAAA,KAAAA,CAAAA,KAFAH,CAEAG,KAFAH,CAAAA,GAA4B,CAE5BG,GAF4B,KAAA,CAAA,KAE5BA,CAF4B,KAE5BA,CAAAA,GAAqBxG,OAAAA,CAAAA,QAAAA,CAASsF,UAFF,CAE5BkB,EAA8BlB,CAAAA,CAAAA,SAAAA,CAEjBc,aAFiBd,CAEjBc,IAFiBd,CAEjBc,IAFiBd,EAEHe,CAFGf,EAEgBgB,CAFhBhB,EAEwBkB,CAFxBlB,CAA9BkB;AAEsDA,GA/BrBc,EA+BqBd,CAAAA,CAGjDS,OAHiDT,GAGjDS,UACLD,CADKC,EAELX,CAFKW,EAGLT,CAHKS,EAGLT;AAAAA,WAAAA,KAAAA,CAAAA,KAFAQ,CAEAR,KAFAQ,CAAAA,GAAwBzC,KAAKgD,QAALhD,CAAcP,QAEtCwC,GAFsCxC,KAAAA,CAAAA,KAEtCwC,CAFsCxC,KAEtCwC,CAAAA,GAAqBxG,OAAAA,CAAAA,QAAAA,CAASsF,UAFQtB,CAEtCwC,EAEUQ,CAAAA,IAAiBzC,KAAKgD,QAALhD,CAAcP,QAA/BgD,IAAVhF,CAAAA,CAAAA,CAAAA,CAAAA,CAFAwE,EAEAxE,CAAAA,CAAAA,SAAAA,CACaiF,OADbjF,CACaiF,IADbjF,CACaiF,IADbjF,EACqBgF,CADrBhF,EACoCsE,CADpCtE,EAC4CwE,CAD5CxE,CAFAwE;AAG4CA,GAxCXc,EAwCWd,CAAAA,CAGvCmB,OAHuCnB,GAGvCmB,UAAQrB,CAARqB,EAAQrB;AAAAA,WAAAA,KAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAiB;AAAEC,MAAAA,cAAAA,EAAgB;AAAlB,KAAjBD,GACbnB,EAAAA,CAAI+B,EAAJ/B,GAASZ,KAAKgD,QAALhD,CAAcP,QADVsC,EAEN,IAAInB,EAAJ,CAAQZ,KAAKoB,SAALpB,CAAe9B,QAAf8B,EAAR,EAAmCuC,GAAnC,CAAuCvC,KAAKqB,WAALrB,CAAiB9B,QAAjB8B,EAAvC,EAAoEU,QAApE,CAA6EqB,CAA7E,CAFMA;AAEuEA,GA7CnDgB,EA6CmDhB,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,IAAAA,GAAAA,EAAAA,KAAAA;AAAAA,IAAAA,GAAAA,EAAAA,eAAAA;AAAAA,aAhC7E/B,KAAKoB,SAgCwEW;AAhCxEX;AAgCwEW,GAAAA,CAAAA,CA7CnDgB,EAarB3B,CAbqB2B;AAarB3B,CArBHyB,CAAuB1B,EAAvB0B,CF8Cb;AAAA,IGpDaQ,EAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAAAA,WAAAA,CAAAA,CAIQC,CAJRD,EAIsBN,CAJtBM,EAIsBN;AAAAA,QAAAA,CAAAA;AAAAA,WAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EACzBO,CADyBP,EAClBA,CADkBA,KAClBA,IADkBA,EAE1BO,KAF0BP,GAElBO,CAFkBP,EAElBO,CAFkBP;AAElBO;;AAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,SAAAA;AAAAA,SAAAA,CAAAA,CAGR9E,GAHQ8E,GAGR9E,UAAIuB,CAAJvB,EAAIuB;AAAAA,WACCC,KAAKsD,KAALtD,CAAWF,MAAXE,CAAkBD,CAAAA,CAAMuD,KAAxBtD,KAAVvC,CAAAA,CAAAA,CAAAA,CAAAA,CAAUuC,EACH,IAAIqD,CAAJ,CAAgBrD,KAAKsD,KAArB,EAA4B1H,CAAAA,CAAK4C,GAAL5C,CAASoE,KAAKmD,GAAdvH,EAAmBmE,CAAAA,CAAMoD,GAAzBvH,CAA5B,CAFEmE;AAEmDoD,GAL/CG,EAK+CH,CAAAA,CAGvDxB,QAHuDwB,GAGvDxB,UAAS5B,CAAT4B,EAAS5B;AAAAA,WACJC,KAAKsD,KAALtD,CAAWF,MAAXE,CAAkBD,CAAAA,CAAMuD,KAAxBtD,KAAVvC,CAAAA,CAAAA,CAAAA,CAAAA,CAAUuC,EACH,IAAIqD,CAAJ,CAAgBrD,KAAKsD,KAArB,EAA4B1H,CAAAA,CAAK+F,QAAL/F,CAAcoE,KAAKmD,GAAnBvH,EAAwBmE,CAAAA,CAAMoD,GAA9BvH,CAA5B,CAFOmE;AAEmDoD,GAVpDG,EAUoDH,CAVpDG;AAUoDH,CAhBxDE,CAAoBR,EAApBQ,CHoDb;AAAA,II/CaE,EAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAAAA,WAAAA,CAAAA,CAkBQe,CAlBRf,EAkBgCgB,CAlBhChB,EAkByDlC,CAlBzDkC,EAkBiFnC,CAlBjFmC,EAkBiFnC;AAAAA,QAAAA,CAAAA;AAAAA,WAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EACpFA,CADoFA,EACzEC,CADyED,KACzEC,IADyED,EAGrFkD,YAHqFlD,GAGtEkD,CAHsElD,EAGtEkD,CAAAA,CACfC,aADeD,GACCC,CAJqEnD,EAIrEmD,CAAAA,CAChBC,MADgBD,GACP,IAAIpD,EAAJ,CACZvF,CAAAA,CAAKsH,YAALtH,CAAkBO,CAAlBP,EAAuBA,CAAAA,CAAKC,MAALD,CAAY0I,CAAAA,CAAa7E,QAAzB7D,CAAvBA,CADY,EAEZA,CAAAA,CAAKsH,YAALtH,CAAkBO,CAAlBP,EAAuBA,CAAAA,CAAKC,MAALD,CAAY2I,CAAAA,CAAc9E,QAA1B7D,CAAvBA,CAFY,CAL4EwF,EAOvC3B,CAPuC2B;AAOvC3B;;AAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CApBvC+D,SAoBuC/D,GApB9C,UAAiBgE,CAAjB,EAAiBA;AAAAA,SAAAA,IAAAA,CAAAA,EAChBC,CAAAA,GAAkB,EADFD,EACE,CAAA,GAAA,CAAA,CACAA,CAAAA,CAAMG,KAANH,CAAYI,OAAZJ,EADA,CADFA,EAEcI,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,IAFdJ,GAEyB;AAAA,UAAA,CAAA,GAAA,CAAA,CAAA,KAAA;AAAA,UAAhCE,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAgC;AAC7CD,MAAAA,CAAAA,CAAOzE,IAAPyE,CACED,CAAAA,CAAMK,IAANL,CAAMK,CAAAA,CAAAA,CAAAA,CAANL,EAAc3D,MAAd2D,CAAqBE,CAAAA,CAAKI,MAA1BN,IACI,IAAIF,CAAJ,CAAUI,CAAAA,CAAKK,QAALL,CAAcX,QAAxB,EAAkCW,CAAAA,CAAKM,QAALN,CAAcX,QAAhD,EAA0DW,CAAAA,CAAKK,QAALL,CAAcR,GAAxE,EAA6EQ,CAAAA,CAAKM,QAALN,CAAcR,GAA3F,CADJM,GAEI,IAAIF,CAAJ,CAAUI,CAAAA,CAAKM,QAALN,CAAcX,QAAxB,EAAkCW,CAAAA,CAAKK,QAALL,CAAcX,QAAhD,EAA0DW,CAAAA,CAAKM,QAALN,CAAcR,GAAxE,EAA6EQ,CAAAA,CAAKK,QAALL,CAAcR,GAA3F,CAHNO;AAGiGP;;AAAAA,WAG5FO,CAAAA,CAAOQ,KAAPR,CAAa,CAAbA,EAAgBS,MAAhBT,CAAuB,UAACU,CAAD,EAAcC,CAAd,EAAcA;AAAAA,aAAiBD,CAAAA,CAAY1C,QAAZ0C,CAAqBC,CAArBD,CAAjBC;AAAsCA,KAA3EX,EAA0FA,CAAAA,CAAO,CAAPA,CAA1FA,CAH4FP;AAGK,GAWrD1D;AAXqD,MAAA,CAAA,GAAA,CAAA,CAAA,SAAA;AAAA,SAAA,CAAA,CAuBnG8B,MAvBmG,GAuBnGA,YAAAA;AAAAA,WACE,IAAIgC,CAAJ,CAAUvD,KAAKuE,aAAf,EAA8BvE,KAAKsE,YAAnC,EAAiDtE,KAAKoB,SAAtD,EAAiEpB,KAAKqB,WAAtE,CADFE;AACwEF,GAxB2B,EAwB3BA,CAAAA,CAGxEK,QAHwEL,GAGxEK,UAAS3B,CAAT2B,EAAS3B;AACJI,IAAAA,CAAAA,CAAeH,KAAKuE,aAApBpE,EAAmCJ,CAAAA,CAAMuE,YAAzCnE,CAAAA,IAAV1C,CAAAA,CAAAA,CAAAA,CAAAA,CAAU0C;AAAV1C,QACMgH,CAAAA,GAAAA,CAAAA,CAAAA,SAAAA,CAAiB/C,QAAjB+C,CAAiB/C,IAAjB+C,CAAiB/C,IAAjB+C,EAA0B1E,CAA1B0E,CADNhH;AACgCsC,WACzB,IAAIwD,CAAJ,CAAUvD,KAAKsE,YAAf,EAA6BvE,CAAAA,CAAMwE,aAAnC,EAAkDE,CAAAA,CAASpD,WAA3D,EAAwEoD,CAAAA,CAASrD,SAAjF,CADyBrB;AACwDqB,GA9BgB,EA8BhBA,CAAAA,CAInFsD,KAJmFtD,GAInFsD,UAAMC,CAAND,EAAMC;AAAAA,WACDxE,CAAAA,CAAewE,CAAAA,CAAe3B,QAA9B7C,EAAwCH,KAAKsE,YAA7CnE,CAAAA,IAAV1C,CAAAA,CAAAA,CAAAA,CAAAA,CAAU0C,EACNH,KAAKuE,aAALvE,YAA8BJ,CAA9BI,GACK,IAAIqD,EAAJ,CAAgBrD,KAAKuE,aAArB,EAAoCK,CAAAA,CAAAA,SAAAA,CAAMlD,QAANkD,CAAMlD,IAANkD,CAAMlD,IAANkD,EAAeD,CAAAA,CAAexB,GAA9ByB,EAAmCtC,QAAvE,CADLtC,GAGG6C,EAAAA,CAAeC,KAAfD,CAAqB+B,CAAAA,CAAAA,SAAAA,CAAMlD,QAANkD,CAAMlD,IAANkD,CAAMlD,IAANkD,EAAeD,CAAAA,CAAexB,GAA9ByB,EAAmCtC,QAAxDO,CALI8B;AAKoDrC,GAvCyC,EAuCzCA,CAAAA,CAG1DT,aAH0DS,GAG1DT,UAAcC,CAAdD,EAA6CE,CAA7CF,EAA8DI,CAA9DJ,EAA8DI;AAAAA,WAAAA,KAAAA,CAAAA,KAAhDH,CAAgDG,KAAhDH,CAAAA,GAA4B,CAAoBG,GAC5DjC,KAAK6E,QAAL7E,CAAc6B,aAAd7B,CAA4B8B,CAA5B9B,EAA+C+B,CAA/C/B,EAAuDiC,CAAvDjC,CAD4DiC;AACLA,GA3C0C,EA2C1CA,CAAAA,CAGzDS,OAHyDT,GAGzDS,UAAQD,CAARC,EAAmCX,CAAnCW,EAAoDT,CAApDS,EAAoDT;AAAAA,WAAAA,KAAAA,CAAAA,KAA5CQ,CAA4CR,KAA5CQ,CAAAA,GAAwB,CAAoBR,GAClDjC,KAAK6E,QAAL7E,CAAc0C,OAAd1C,CAAsByC,CAAtBzC,EAAqC+B,CAArC/B,EAA6CiC,CAA7CjC,CADkDiC;AACLA,GA/CoD,EA+CpDA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,IAAAA,GAAAA,EAAAA,KAAAA;AAAAA,IAAAA,GAAAA,EAAAA,eAAAA;AAAAA,aA/B7C,IAAId,EAAJ,CAAanB,KAAKoB,SAAlB,EAA6BpB,KAAKqB,WAAlC,CA+B6CY;AA/BXZ;AA+BWY,GAAAA,EA/BXZ;AAAAA,IAAAA,GAAAA,EAAAA,UAAAA;AAAAA,IAAAA,GAAAA,EAAAA,eAAAA;AAAAA,aAAAA,CAAAA,CAAAA,SAAAA,CAI5BK,QAJ4BL,CAI5BK,IAJ4BL,CAI5BK,IAJ4BL,EAInBrB,KAAKwE,MAJcnD,CAAAA;AAIdmD;AAJcnD,GA+BWY,CAAAA,CA/CoD,EAoB7EuC,CApB6E;AAoB7EA,CAlClBjB,CAAcpC,EAAdoC,CJ+Cb;AAAA,IKpCIuB,EAAAA,GAAuF,ELoC3F;AAAA,IKlCaC,EAAAA,GAAAA,YAAAA;AAAAA,WAAAA,CAAAA,CAwBQQ,CAxBRR,EAwBmCS,CAxBnCT,EAwBmCS;AAAAA,QACtCC,CAAAA,GAAeF,CAAAA,CAAajC,KAAbiC,CAAmBtF,WAAnBsF,CAA+BC,CAAAA,CAAalC,KAA5CiC,IACjB,CAACA,CAAD,EAAeC,CAAf,CADiBD,GAEjB,CAACC,CAAD,EAAeD,CAAf,CAHwCC;AAGzBD,SACdG,cADcH,GACG,IAAI3F,CAAJ,CACpB6F,CAAAA,CAAa,CAAbA,CAAAA,CAAgBnC,KAAhBmC,CAAsB5F,OADF,EAEpBkF,CAAAA,CAAKjH,UAALiH,CAAgBU,CAAAA,CAAa,CAAbA,CAAAA,CAAgBnC,KAAhCyB,EAAuCU,CAAAA,CAAa,CAAbA,CAAAA,CAAgBnC,KAAvDyB,CAFoB,EAGpB,EAHoB,EAIpB,QAJoB,EAKpB,YALoB,CADHQ,EAMjB,KAEGE,YAFH,GAEkBA,CARDF;AAQCE;;AAAAA,EAAAA,CAAAA,CA/BR3H,UA+BQ2H,GA/Bf,UAAkBT,CAAlB,EAAiCC,CAAjC,EAAiCA;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA;AAAAA,QAChCC,CAAAA,GAASF,CAAAA,CAAO/E,WAAP+E,CAAmBC,CAAnBD,IAA6B,CAACA,CAAD,EAASC,CAAT,CAA7BD,GAAgD,CAACC,CAAD,EAASD,CAAT,CADzBC;AACkCD,WAAAA,KAEHG,CAFGH,MAEHG,UAAAA,CAAAA,GAAjEL,EAAiEK,KAAjEL,KAAAA,CAAAA,KAAAA,CAAiEK,IAAjEL,UAAAA,CAAAA,GAAAA,CAAAA,CAAqBI,CAAAA,CAAO,CAAPA,CAAAA,CAAUrH,OAA/BiH,CAAAA,CAAiEK,IAAlCtH,KAAAA,CAAAA,KAAAA,CAAkCsH,GAAlCtH,KAAAA,CAAkCsH,GAAlCtH,CAAAA,CAAWqH,CAAAA,CAAO,CAAPA,CAAAA,CAAUrH,OAArBA,CAFqCmH,MAGtEF,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EACKA,EADLA,GACKA,CAAAA,CAAAA,GAAAA,EAAAA,EACFI,CAAAA,CAAO,CAAPA,CAAAA,CAAUrH,OADRiH,IACQjH,CAAAA,CAAAA,EAAAA,EAAAA,UAAAA,CAAAA,GACNiH,EADMjH,KACNiH,KAAAA,CAAAA,KAAAA,CADMjH,GACNiH,KAAAA,CADMjH,GACNiH,CAAAA,CAAqBI,CAAAA,CAAO,CAAPA,CAAAA,CAAUrH,OAA/BiH,CADMjH,GACyBA,CAAAA,CAAAA,GAAAA,EAAAA,EACjCqH,CAAAA,CAAO,CAAPA,CAAAA,CAAUrH,OADuBA,IACbuH,CAAAA,CAAAA,iBAAAA,CThBA,4CSgBAA,EAEnBC,CAAAA,CAAAA,SAAAA,CAAU,CAAC,OAAD,CAAVA,EAAqB,CAACC,CAAAA,CAAAA,IAAAA,CAAK,CAAC,SAAD,EAAY,SAAZ,CAALA,EAA6B,CAACJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUrH,OAAX,EAAoBqH,CAAAA,CAAO,CAAPA,CAAAA,CAAUrH,OAA9B,CAA7ByH,CAAD,CAArBD,CAFmBD,EAGnB1J,CAHmB0J,CADavH,EAIhCnC,CALOmC,EADRiH,EAMCpJ,CAPNoJ,EAHsEE,GAgBjEF,EAAAA,CAAmBI,CAAAA,CAAO,CAAPA,CAAAA,CAAUrH,OAA7BiH,CAAAA,CAAsCI,CAAAA,CAAO,CAAPA,CAAAA,CAAUrH,OAAhDiH,CAhBiEE;AAgBjBnH,GAcnC4H;;AAdmC5H,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,SAAAA;AAAAA,SAAAA,CAAAA,CAqBlD8H,aArBkD9H,GAqBlD8H,UAAcrC,CAAdqC,EAAcrC;AAAAA,WACZA,CAAAA,CAAMxD,MAANwD,CAAatD,KAAK+D,MAAlBT,KAA6BA,CAAAA,CAAMxD,MAANwD,CAAatD,KAAK4F,MAAlBtC,CADjBA;AACmCsC,GAtBC/H,EAsBD+H,CAAAA,CAqBjDC,OArBiDD,GAqBjDC,UAAQvC,CAARuC,EAAQvC;AAAAA,WACHtD,KAAK2F,aAAL3F,CAAmBsD,CAAnBtD,KAAVvC,CAAAA,CAAAA,CAAAA,CAAAA,CAAUuC,EACHsD,CAAAA,CAAMxD,MAANwD,CAAatD,KAAK+D,MAAlBT,IAA4BtD,KAAK8F,WAAjCxC,GAA+CtD,KAAK+F,WAF9CzC;AAE8CyC,GA7CJlI,EA6CIkI,CAAAA,CA0BtDC,SA1BsDD,GA0BtDC,UAAU1C,CAAV0C,EAAU1C;AAAAA,WACLtD,KAAK2F,aAAL3F,CAAmBsD,CAAnBtD,KAAVvC,CAAAA,CAAAA,CAAAA,CAAAA,CAAUuC,EACHsD,CAAAA,CAAMxD,MAANwD,CAAatD,KAAK+D,MAAlBT,IAA4BtD,KAAKgE,QAAjCV,GAA4CtD,KAAKiE,QAFzCX;AAEyCW,GAzEDpG,EAyECoG,CAAAA,CAGnDgC,eAHmDhC,GAGnDgC,UAAgBC,CAAhBD,EAAgBC;AAAAA,QACXlG,KAAK2F,aAAL3F,CAAmBkG,CAAAA,CAAY5C,KAA/BtD,KAAVvC,CAAAA,CAAAA,CAAAA,CAAAA,CAAUuC,EACNpE,CAAAA,CAAK6F,KAAL7F,CAAWoE,KAAKgE,QAALhE,CAAcmD,GAAzBvH,EAA8BE,CAA9BF,KAAuCA,CAAAA,CAAK6F,KAAL7F,CAAWoE,KAAKiE,QAALjE,CAAcmD,GAAzBvH,EAA8BE,CAA9BF,CAFtBsK,EAEoDpK,MACjE,IAAIe,CAAJ,EADiEf;AAC7De,QAENsJ,CAAAA,GAAenG,KAAKgG,SAALhG,CAAekG,CAAAA,CAAY5C,KAA3BtD,CAFTnD;AAAAA,QAGNuJ,CAAAA,GAAgBpG,KAAKgG,SAALhG,CAAekG,CAAAA,CAAY5C,KAAZ4C,CAAkBpG,MAAlBoG,CAAyBlG,KAAK+D,MAA9BmC,IAAwClG,KAAK4F,MAA7CM,GAAsDlG,KAAK+D,MAA1E/D,CAHVnD;AAAAA,QAINwJ,CAAAA,GAAqBzK,CAAAA,CAAK8F,QAAL9F,CAAcsK,CAAAA,CAAY/C,GAA1BvH,EAA+BS,CAA/BT,CAJfiB;AAAAA,QAKNuE,CAAAA,GAAYxF,CAAAA,CAAK8F,QAAL9F,CAAcyK,CAAdzK,EAAkCwK,CAAAA,CAAcjD,GAAhDvH,CALNiB;AAAAA,QAMNwE,CAAAA,GAAczF,CAAAA,CAAK4C,GAAL5C,CAASA,CAAAA,CAAK8F,QAAL9F,CAAcuK,CAAAA,CAAahD,GAA3BvH,EAAgCU,CAAhCV,CAATA,EAAiDyK,CAAjDzK,CANRiB;AAAAA,QAONyJ,CAAAA,GAAe,IAAIjD,EAAJ,CACnB6C,CAAAA,CAAY5C,KAAZ4C,CAAkBpG,MAAlBoG,CAAyBlG,KAAK+D,MAA9BmC,IAAwClG,KAAK4F,MAA7CM,GAAsDlG,KAAK+D,MADxC,EAEnBnI,CAAAA,CAAK6C,MAAL7C,CAAYwF,CAAZxF,EAAuByF,CAAvBzF,CAFmB,CAPTiB;AASawE,QAErBzF,CAAAA,CAAK6F,KAAL7F,CAAW0K,CAAAA,CAAanD,GAAxBvH,EAA6BE,CAA7BF,CAFqByF,EAEQvF,MACzB,IAAIsB,CAAJ,EADyBtB;AACrBsB,WAEL,CAACkJ,CAAD,EAAe,IAAIvB,CAAJ,CAASoB,CAAAA,CAAa3H,GAAb2H,CAAiBD,CAAjBC,CAAT,EAAwCC,CAAAA,CAAczE,QAAdyE,CAAuBE,CAAvBF,CAAxC,CAAf,CAFKhJ;AAEyEkJ,GA7F9BzI,EA6F8ByI,CAAAA,CAGhFC,cAHgFD,GAGhFC,UAAeD,CAAfC,EAAeD;AAAAA,QACVtG,KAAK2F,aAAL3F,CAAmBsG,CAAAA,CAAahD,KAAhCtD,KAAVvC,CAAAA,CAAAA,CAAAA,CAAAA,CAAUuC,EAERpE,CAAAA,CAAK6F,KAAL7F,CAAWoE,KAAKgE,QAALhE,CAAcmD,GAAzBvH,EAA8BE,CAA9BF,KACAA,CAAAA,CAAK6F,KAAL7F,CAAWoE,KAAKiE,QAALjE,CAAcmD,GAAzBvH,EAA8BE,CAA9BF,CADAA,IAEAA,CAAAA,CAAK8B,kBAAL9B,CAAwB0K,CAAAA,CAAanD,GAArCvH,EAA0CoE,KAAKgG,SAALhG,CAAesG,CAAAA,CAAahD,KAA5BtD,EAAmCmD,GAA7EvH,CALkB0K,EAK2DnD,MAEvE,IAAItG,CAAJ,EAFuEsG;AAEnEtG,QAGNuJ,CAAAA,GAAgBpG,KAAKgG,SAALhG,CAAesG,CAAAA,CAAahD,KAA5BtD,CAHVnD;AAAAA,QAINsJ,CAAAA,GAAenG,KAAKgG,SAALhG,CAAesG,CAAAA,CAAahD,KAAbgD,CAAmBxG,MAAnBwG,CAA0BtG,KAAK+D,MAA/BuC,IAAyCtG,KAAK4F,MAA9CU,GAAuDtG,KAAK+D,MAA3E/D,CAJTnD;AAAAA,QAKNuE,CAAAA,GAAYxF,CAAAA,CAAK8F,QAAL9F,CAAcA,CAAAA,CAAK8F,QAAL9F,CAAcuK,CAAAA,CAAahD,GAA3BvH,EAAgC0K,CAAAA,CAAanD,GAA7CvH,CAAdA,EAAiEU,CAAjEV,CALNiB;AAAAA,QAMNwE,CAAAA,GAAczF,CAAAA,CAAK8F,QAAL9F,CAAcA,CAAAA,CAAK+F,QAAL/F,CAAcwK,CAAAA,CAAcjD,GAA5BvH,EAAiC0K,CAAAA,CAAanD,GAA9CvH,CAAdA,EAAkES,CAAlET,CANRiB;AAAAA,QAONqJ,CAAAA,GAAc,IAAI7C,EAAJ,CAClBiD,CAAAA,CAAahD,KAAbgD,CAAmBxG,MAAnBwG,CAA0BtG,KAAK+D,MAA/BuC,IAAyCtG,KAAK4F,MAA9CU,GAAuDtG,KAAK+D,MAD1C,EAElBnI,CAAAA,CAAK4C,GAAL5C,CAASA,CAAAA,CAAK6C,MAAL7C,CAAYwF,CAAZxF,EAAuByF,CAAvBzF,CAATA,EAA8CG,CAA9CH,CAFkB,CAPRiB;AASoCd,WAEzC,CAACmK,CAAD,EAAc,IAAInB,CAAJ,CAASoB,CAAAA,CAAa3H,GAAb2H,CAAiBD,CAAjBC,CAAT,EAAwCC,CAAAA,CAAczE,QAAdyE,CAAuBE,CAAvBF,CAAxC,CAAd,CAFyCrK;AAEoCuK,GAlH7BzI,EAkH6ByI,CAAAA,CAG/EE,kBAH+EF,GAG/EE,UACLC,CADKD,EAELjB,CAFKiB,EAGLhB,CAHKgB,EAGLhB;AAEUiB,IAAAA,CAAAA,CAAYnD,KAAZmD,CAAkB3G,MAAlB2G,CAAyBzG,KAAK0F,cAA9Be,KAAVhJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAUgJ;AAAVhJ,QAMIiJ,CANJjJ;AAAAA,QACMgI,CAAAA,GAAeF,CAAAA,CAAajC,KAAbiC,CAAmBtF,WAAnBsF,CAA+BC,CAAAA,CAAalC,KAA5CiC,IACjB,CAACA,CAAD,EAAeC,CAAf,CADiBD,GAEjB,CAACC,CAAD,EAAeD,CAAf,CAHJ9H;AAGmB8H,QACTE,CAAAA,CAAa,CAAbA,CAAAA,CAAgBnC,KAAhBmC,CAAsB3F,MAAtB2F,CAA6BzF,KAAK+D,MAAlC0B,KAA6CA,CAAAA,CAAa,CAAbA,CAAAA,CAAgBnC,KAAhBmC,CAAsB3F,MAAtB2F,CAA6BzF,KAAK4F,MAAlCH,CAA7CA,IAAVhI,CAAAA,CAAAA,CAAAA,CAAAA,CAAUgI,EAGN7J,CAAAA,CAAK6F,KAAL7F,CAAW6K,CAAAA,CAAYtD,GAAvBvH,EAA4BE,CAA5BF,CAJe2J,EAKjBmB,CAAAA,GAAY9K,CAAAA,CAAK+F,QAAL/F,CAAcuC,CAAAA,CAAKvC,CAAAA,CAAK8F,QAAL9F,CAAc6J,CAAAA,CAAa,CAAbA,CAAAA,CAAgBtC,GAA9BvH,EAAmC6J,CAAAA,CAAa,CAAbA,CAAAA,CAAgBtC,GAAnDvH,CAALuC,CAAdvC,EAA6ED,CAA7EC,CAAZ8K,CALiBnB,KAMZ;AAAA,UACCoB,CAAAA,GAAU/K,CAAAA,CAAK6C,MAAL7C,CAAYA,CAAAA,CAAK8F,QAAL9F,CAAc6J,CAAAA,CAAa,CAAbA,CAAAA,CAAgBtC,GAA9BvH,EAAmC6K,CAAAA,CAAYtD,GAA/CvH,CAAZA,EAAiEoE,KAAKgE,QAALhE,CAAcmD,GAA/EvH,CADX;AAAA,UAECgL,CAAAA,GAAUhL,CAAAA,CAAK6C,MAAL7C,CAAYA,CAAAA,CAAK8F,QAAL9F,CAAc6J,CAAAA,CAAa,CAAbA,CAAAA,CAAgBtC,GAA9BvH,EAAmC6K,CAAAA,CAAYtD,GAA/CvH,CAAZA,EAAiEoE,KAAKiE,QAALjE,CAAcmD,GAA/EvH,CAFX;AAGL8K,MAAAA,CAAAA,GAAY9K,CAAAA,CAAK+B,eAAL/B,CAAqB+K,CAArB/K,EAA8BgL,CAA9BhL,IAAyC+K,CAAzC/K,GAAmDgL,CAA/DF;AAA+DE;AAAAA,QAAAA,CAE5DhL,CAAAA,CAAK2C,WAAL3C,CAAiB8K,CAAjB9K,EAA4BE,CAA5BF,CAF4DgL,EAEhC9K,MACzB,IAAIsB,CAAJ,EADyBtB;AACrBsB,WAEL,IAAIiG,EAAJ,CAAgBrD,KAAK0F,cAArB,EAAqCgB,CAArC,CAFKtJ;AAEgCsJ,GA3IW7I,EA2IX6I,CAAAA,CAGvCG,iBAHuCH,GAGvCG,UACLvD,CADKuD,EAELJ,CAFKI,EAGLH,CAHKG,EAILC,CAJKD,EAKLE,CALKF,EAKLE;AAAAA,QAOIC,CAPJD;;AAOIC,QAAAA,KAAAA,CAAAA,KARJF,CAQIE,KARJF,CAAAA,GAAAA,CAAiB,CAQbE,GALMhH,KAAK2F,aAAL3F,CAAmBsD,CAAnBtD,KAAVvC,CAAAA,CAAAA,CAAAA,CAAAA,CAKIuJ,EAJMP,CAAAA,CAAYnD,KAAZmD,CAAkB3G,MAAlB2G,CAAyBzG,KAAK0F,cAA9Be,KAAVhJ,CAAAA,CAAAA,CAAAA,CAAAA,CAIIuJ,EAHMN,CAAAA,CAAUpD,KAAVoD,CAAgB5G,MAAhB4G,CAAuB1G,KAAK0F,cAA5BgB,KAAVjJ,CAAAA,CAAAA,CAAAA,CAAAA,CAGIuJ,EAFMpL,CAAAA,CAAK+B,eAAL/B,CAAqB8K,CAAAA,CAAUvD,GAA/BvH,EAAoC6K,CAAAA,CAAYtD,GAAhDvH,KAAV6B,CAAAA,CAAAA,CAAAA,CAAAA,CAEIuJ,EACCF,CADDE,EAGG;AACOD,MAAAA,CAAAA,IAAZtJ,CAAAA,CAAAA,CAAAA,CAAAA,CAAYsJ;AAAZtJ,UACMwJ,CAAAA,GAAcjJ,CAAAA,CAAe+I,CAAf/I,CADpBP;AACmCsJ,UAC9BnL,CAAAA,CAAK6F,KAAL7F,CAAWqL,CAAXrL,EAAwBE,CAAxBF,CAD8BmL,EAajCC,CAAAA,GAAsBP,CAAtBO,CAbiCD,KACC;AAAA,YAC5BG,CAAAA,GAAQ/I,CAAAA,CAAKvC,CAAAA,CAAK8F,QAAL9F,CAAcoE,KAAKgE,QAALhE,CAAcmD,GAA5BvH,EAAiCoE,KAAKiE,QAALjE,CAAcmD,GAA/CvH,CAALuC,CADoB;AAAA,YAE5BgJ,CAAAA,GAAYhJ,CAAAA,CAAK8I,CAAL9I,CAFgB;;AAEX8I,YACnBrL,CAAAA,CAAK2C,WAAL3C,CAAiBsL,CAAjBtL,EAAwBuL,CAAxBvL,CADmBqL,EACiB;AAAA,cAChC7F,CAAAA,GAAYxF,CAAAA,CAAK8F,QAAL9F,CAAc6K,CAAAA,CAAYtD,GAA1BvH,EAA+BA,CAAAA,CAAK+F,QAAL/F,CAAcsL,CAAdtL,EAAqBuL,CAArBvL,CAA/BA,CADoB;AAAA,cAEhCyF,CAAAA,GAAczF,CAAAA,CAAK4C,GAAL5C,CAASA,CAAAA,CAAK8F,QAAL9F,CAAcsL,CAAdtL,EAAqBM,CAArBN,CAATA,EAAqCuL,CAArCvL,CAFkB;AAAA,cAGhCwL,CAAAA,GAAexL,CAAAA,CAAK6C,MAAL7C,CAAYwF,CAAZxF,EAAuByF,CAAvBzF,CAHiB;AAItCoL,UAAAA,CAAAA,GAAsBP,CAAAA,CAAYjI,GAAZiI,CAAgB,IAAIpD,EAAJ,CAAgBrD,KAAK0F,cAArB,EAAqC0B,CAArC,CAAhBX,CAAtBO;AAA2EI,SALtDH,MAOrBD,CAAAA,GAAsBP,CAAtBO;AAAsBP;AAAAA,KAfxBO,MAEFA,CAAAA,GAAsBP,CAAtBO;;AAAsBP,WAoBjB,IAAIpD,EAAJ,CACLC,CADK,EAEL1H,CAAAA,CAAK6C,MAAL7C,CAAYA,CAAAA,CAAK8F,QAAL9F,CAAc8K,CAAAA,CAAUvD,GAAxBvH,EAA6BoE,KAAKgG,SAALhG,CAAesD,CAAftD,EAAsBmD,GAAnDvH,CAAZA,EAAqEoL,CAAAA,CAAoB7D,GAAzFvH,CAFK,CApBiB6K;AAsBmEtD,GAlLpCtF,EAkLoCsF,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,IAAAA,GAAAA,EAAAA,aAAAA;AAAAA,IAAAA,GAAAA,EAAAA,eAAAA;AAAAA,aArJpF,IAAII,EAAJ,CAAUvD,KAAK+D,MAAf,EAAuB/D,KAAK4F,MAA5B,EAAoC5F,KAAKyF,YAALzF,CAAkB,CAAlBA,EAAqBmD,GAAzD,EAA8DnD,KAAKyF,YAALzF,CAAkB,CAAlBA,EAAqBmD,GAAnF,CAqJoFA;AArJDA;AAqJCA,GAAAA,EArJDA;AAAAA,IAAAA,GAAAA,EAAAA,aAAAA;AAAAA,IAAAA,GAAAA,EAAAA,eAAAA;AAAAA,aAOnF,IAAII,EAAJ,CAAUvD,KAAK4F,MAAf,EAAuB5F,KAAK+D,MAA5B,EAAoC/D,KAAKyF,YAALzF,CAAkB,CAAlBA,EAAqBmD,GAAzD,EAA8DnD,KAAKyF,YAALzF,CAAkB,CAAlBA,EAAqBmD,GAAnF,CAPmFA;AAOAA;AAPAA,GAqJCA,EA9IDA;AAAAA,IAAAA,GAAAA,EAAAA,SAAAA;AAAAA,IAAAA,GAAAA,EAAAA,eAAAA;AAAAA,aAgBnFnD,KAAK+D,MAAL/D,CAAYH,OAhBuEsD;AAgBvEtD;AAhBuEsD,GA8ICA,EA9HxEtD;AAAAA,IAAAA,GAAAA,EAAAA,QAAAA;AAAAA,IAAAA,GAAAA,EAAAA,eAAAA;AAAAA,aAIZG,KAAKyF,YAALzF,CAAkB,CAAlBA,EAAqBsD,KAJTzD;AAISyD;AAJTzD,GA8HwEsD,EA1H/DG;AAAAA,IAAAA,GAAAA,EAAAA,QAAAA;AAAAA,IAAAA,GAAAA,EAAAA,eAAAA;AAAAA,aAIrBtD,KAAKyF,YAALzF,CAAkB,CAAlBA,EAAqBsD,KAJAA;AAIAA;AAJAA,GA0H+DH,EAtH/DG;AAAAA,IAAAA,GAAAA,EAAAA,UAAAA;AAAAA,IAAAA,GAAAA,EAAAA,eAAAA;AAAAA,aAIrBtD,KAAKyF,YAALzF,CAAkB,CAAlBA,CAJqBsD;AAIH;AAJGA,GAsH+DH,EAlHlE;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,aAIlBnD,KAAKyF,YAALzF,CAAkB,CAAlBA,CAJkB;AAIA;AAJA,GAkHkEmD,CAAAA,CAlLpCtF,EAoE9B,CApE8BA;AAoE9B,CAzFhBkH,ELkCb;AAAA,IMnDasC,EAAAA,GAAAA,YAAAA;AAAAA,WAAAA,CAAAA,CAOQzD,CAPRyD,EAOuBC,CAPvBD,EAOwCE,CAPxCF,EAOwCE;AACvC3D,IAAAA,CAAAA,CAAM5E,MAAN4E,GAAe,CAAfA,IAAVnG,CAAAA,CAAAA,CAAAA,CAAAA,CAAUmG,EAERA,CAAAA,CAAM4D,KAAN5D,CAAY,UAAA,CAAA,EAAA;AAAA,aAAQD,CAAAA,CAAK9D,OAAL8D,KAAiBC,CAAAA,CAAM,CAANA,CAAAA,CAAS/D,OAAlC;AAAkCA,KAA9C+D,KADFnG,CAAAA,CAAAA,CAAAA,CAAAA,CADUmG,EAMP0D,CAAAA,YAAiB1H,CAAjB0H,IAA0B1D,CAAAA,CAAM,CAANA,CAAAA,CAAS+B,aAAT/B,CAAuB0D,CAAvB1D,CAA1B0D,IACEA,CAAAA,KAAU3H,CAAV2H,IAAmB1D,CAAAA,CAAM,CAANA,CAAAA,CAAS+B,aAAT/B,CAAuBtD,EAAAA,CAAKsD,CAAAA,CAAM,CAANA,CAAAA,CAAS/D,OAAdS,CAAvBsD,CADrB0D,IADH7J,CAAAA,CAAAA,CAAAA,CAAAA,CALUmG,EAKVnG,KAMoB,CANpBA,KAMS8J,CANT9J,IAOK8J,CAAAA,YAAkB3H,CAAlB2H,IAA2B3D,CAAAA,CAAMA,CAAAA,CAAM5E,MAAN4E,GAAe,CAArBA,CAAAA,CAAwB+B,aAAxB/B,CAAsC2D,CAAtC3D,CAPhCnG,IAQK8J,CAAAA,KAAW5H,CAAX4H,IAAoB3D,CAAAA,CAAMA,CAAAA,CAAM5E,MAAN4E,GAAe,CAArBA,CAAAA,CAAwB+B,aAAxB/B,CAAsCtD,EAAAA,CAAKsD,CAAAA,CAAM,CAANA,CAAAA,CAAS/D,OAAdS,CAAtCsD,CARzBnG,IAKAA,CAAAA,CAAAA,CAAAA,CAAAA,CAVUmG;;AAUVnG,SAAAA,IAAAA,CAAAA,EAOMqG,CAAAA,GAAgB,CAACwD,CAAAA,YAAiB1H,CAAjB0H,GAAyBA,CAAzBA,GAAiChH,EAAAA,CAAKsD,CAAAA,CAAM,CAANA,CAAAA,CAAS/D,OAAdS,CAAlC,CAPtB7C,EAOsEoC,CAAAA,GAAAA,CAAAA,CAC9C+D,CAAAA,CAAMC,OAAND,EAD8C/D,CAPtEpC,EAQ8BoG,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,IAR9BpG,GAQyC;AAAA,UAAA,CAAA,GAAA,CAAA,CAAA,KAAA;AAAA,UAA1BkG,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAA0B;AAAA,UACjC8D,CAAAA,GAAe3D,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CADkB;AAE7B2D,MAAAA,CAAAA,CAAa3H,MAAb2H,CAAoB9D,CAAAA,CAAKI,MAAzB0D,KAAoCA,CAAAA,CAAa3H,MAAb2H,CAAoB9D,CAAAA,CAAKiC,MAAzB6B,CAApCA,IAAVhK,CAAAA,CAAAA,CAAAA,CAAAA,CAAUgK;AAAVhK,UACM8J,CAAAA,GAASE,CAAAA,CAAa3H,MAAb2H,CAAoB9D,CAAAA,CAAKI,MAAzB0D,IAAmC9D,CAAAA,CAAKiC,MAAxC6B,GAAiD9D,CAAAA,CAAKI,MADrEtG;AAEAqG,MAAAA,CAAAA,CAAK7E,IAAL6E,CAAUyD,CAAVzD;AAAUyD;;AAAAA,SAGP3D,KAHO2D,GAGC3D,CAHD2D,EAGC3D,KACRE,IADQF,GACDE,CAJAyD,EAIAzD,KACP4D,QADO5D,GACIP,EAAAA,CAAMC,SAAND,CAAgBvD,IAAhBuD,CALJgE,EAKoBvH,KAC3BsH,KAD2BtH,GACnBsH,CANDC,EAMCD,KACRC,MADQD,GACCC,QAAAA,CAAAA,GAAAA,CAAAA,GAAUzD,CAAAA,CAAKA,CAAAA,CAAK9E,MAAL8E,GAAc,CAAnBA,CAPZyD;AAO+B;;AAAA,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,SAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,aAIpCvH,KAAK4D,KAAL5D,CAAW,CAAXA,EAAcH,OAJsB;AAItBA;AAJsB,GAAA,CAAA,CAAA,EAItBA,CAJsB;AAItBA,CAzCZwH,ENmDb;AAAA,IOxDMM,EAAAA,GAAe,IAAIxG,EAAJ,CAAa/E,CAAb,CPwDrB;AAAA,IOtDawL,EAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAAAA,WAAAA,CAAAA,GAAAA;AAAAA,WAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,KAAAA,IAAAA;AAAAA;;AAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,SAAAA;AAAAA,SAAAA,CAAAA,CACJ/F,aADI+F,GACJ/F,UAAcC,CAAdD,EAA6CE,CAA7CF,EAA8DI,CAA9DJ,EAA8DI;AAAAA,WAAAA,KAAAA,CAAAA,KAAhDH,CAAgDG,KAAhDH,CAAAA,GAA4B,CAAoBG,GAC5DjC,KAAK0B,QAAL1B,CAAc2H,EAAd3H,EAA4B6B,aAA5B7B,CAA0C8B,CAA1C9B,EAA6D+B,CAA7D/B,EAAqEiC,CAArEjC,CAD4DiC;AACSA,GAFnE2F,EAEmE3F,CAAAA,CAGvES,OAHuET,GAGvES,UAAQD,CAARC,EAAmCX,CAAnCW,EAAoDT,CAApDS,EAAoDT;AAAAA,WAAAA,KAAAA,CAAAA,KAA5CQ,CAA4CR,KAA5CQ,CAAAA,GAAwB,CAAoBR,GAClDjC,KAAK0B,QAAL1B,CAAc2H,EAAd3H,EAA4B0C,OAA5B1C,CAAoCyC,CAApCzC,EAAmD+B,CAAnD/B,EAA2DiC,CAA3DjC,CADkDiC;AACSA,GANzD2F,EAMyD3F,CANzD2F;AAMyD3F,CANzD2F,CAAgBzG,EAAhByG,CPsDb;;AOtD6BzG,SC8Bb4G,ED9Ba5G,CC8BS6G,CD9BT7G,EC8ByB8G,CD9BzB9G,EC8ByB8G;AAAAA,SAE1C9H,CAAAA,CAAe6H,CAAAA,CAAE9B,WAAF8B,CAAchF,QAA7B7C,EAAuC8H,CAAAA,CAAE/B,WAAF+B,CAAcjF,QAArD7C,CAAAA,IAAV1C,CAAAA,CAAAA,CAAAA,CAAAA,CAAU0C,EACAA,CAAAA,CAAe6H,CAAAA,CAAE1B,YAAF0B,CAAehF,QAA9B7C,EAAwC8H,CAAAA,CAAE3B,YAAF2B,CAAejF,QAAvD7C,CAAAA,IAAV1C,CAAAA,CAAAA,CAAAA,CAAAA,CADU0C,EAEN6H,CAAAA,CAAE1B,YAAF0B,CAAepG,OAAfoG,CAAuBC,CAAAA,CAAE3B,YAAzB0B,IACEA,CAAAA,CAAE9B,WAAF8B,CAAcpG,OAAdoG,CAAsBC,CAAAA,CAAE/B,WAAxB8B,IACK,CADLA,GAIAA,CAAAA,CAAE9B,WAAF8B,CAActJ,QAAdsJ,CAAuBC,CAAAA,CAAE/B,WAAzB8B,IAAyB9B,CACnB,CADN8B,GAGK,CARPA,GAYEA,CAAAA,CAAE1B,YAAF0B,CAAetJ,QAAfsJ,CAAwBC,CAAAA,CAAE3B,YAA1B0B,IACK,CADLA,GACK,CAEC,CAnBwCC;AAmBxC;;AAAA,SAMEC,EANF,CAMkBF,CANlB,EAM4BC,CAN5B,EAM4BA;AAAAA,MAClCE,CAAAA,GAASJ,EAAAA,CAAsBC,CAAtBD,EAAyBE,CAAzBF,CADyBE;AACAA,SACzB,MAAXE,CAAW,GACNA,CADM,GAKXH,CAAAA,CAAEI,WAAFJ,CAActJ,QAAdsJ,CAAuBC,CAAAA,CAAEG,WAAzBJ,IAAyBI,CACnB,CADNJ,GAEOA,CAAAA,CAAEI,WAAFJ,CAAczJ,WAAdyJ,CAA0BC,CAAAA,CAAEG,WAA5BJ,IACF,CADEA,GAKJA,CAAAA,CAAEvE,KAAFuE,CAAQlE,IAARkE,CAAahJ,MAAbgJ,GAAsBC,CAAAA,CAAExE,KAAFwE,CAAQnE,IAARmE,CAAajJ,MAbFiJ;AA4B1C;;AAAA,SAASI,EAAT,CAAuB1D,CAAvB,EAAuD9E,CAAvD,EAAuDA;AAAAA,SACjD8E,CAAAA,YAA0BtB,EAA1BsB,GAA8CA,CAA9CA,GACAA,CAAAA,CAAe3B,QAAf2B,KAA4BhF,CAA5BgF,GAA0C,IAAItB,EAAJ,CAAgB/C,EAAAA,CAAKT,CAALS,CAAhB,EAA+BqE,CAAAA,CAAexB,GAA9C,CAA1CwB,GAAwFxB,KAC5F1F,CAAAA,CAAAA,CAAAA,CAAAA,CAHqDoC;AAMvD;;AAAA,SAASyI,EAAT,CAAyBtF,CAAzB,EAA6CnD,CAA7C,EAA6CA;AAAAA,SACvCmD,CAAAA,YAAoBpD,CAApBoD,GAAkCA,CAAlCA,GACAA,CAAAA,KAAarD,CAAbqD,GAA2B1C,EAAAA,CAAKT,CAALS,CAA3B0C,GAAgCnD,KACpCpC,CAAAA,CAAAA,CAAAA,CAAAA,CAH2CoC;AAU7C;;AAAA,IAAa0I,EAAAA,GAAAA,YAAAA;AAAAA,WAAAA,CAAAA,CAgDQ9E,CAhDR8E,EAgDsBxF,CAhDtBwF,EAgD8CO,CAhD9CP,EAgD8CO;AAAAA,QArIexC,CAqIfwC;AAAAA,QApInDjB,CAoImDiB;AAAAA,QAlInDhB,CAkImDgB;AAAAA,QACjDC,CAAAA,GAAyB,IAAIC,KAAJ,CAAUvF,CAAAA,CAAMK,IAANL,CAAWzE,MAArB,CADwB8J;AAAAA,QAEjDG,CAAAA,GAAoB,IAAID,KAAJ,CAAUvF,CAAAA,CAAMG,KAANH,CAAYzE,MAAtB,CAF6B8J;;AAEP9J,QAC5C8J,CAAAA,KAActN,OAAAA,CAAAA,SAAAA,CAAUkN,WADoB1J,EACP;AAC7BmB,MAAAA,CAAAA,CAAe4C,CAAAA,CAAOC,QAAtB7C,EAAgCsD,CAAAA,CAAM6D,KAAtCnH,CAAAA,IAAV1C,CAAAA,CAAAA,CAAAA,CAAAA,CAAU0C,EACV4I,CAAAA,CAAQ,CAARA,CAAAA,GAAaV,EAAAA,CAActF,CAAdsF,EAAsB5E,CAAAA,CAAM5D,OAA5BwI,CADHlI;;AAC+BN,WACpC,IAAIqJ,CAAAA,GAAI,CAD4BrJ,EACzBqJ,CAAAA,GAAIzF,CAAAA,CAAMK,IAANL,CAAWzE,MAAXyE,GAAoB,CADC5D,EACEqJ,CAAAA,EADFrJ,EACO;AAAA,YAAA,CAAA,GACjC4D,CAAAA,CAAMG,KAANH,CAAYyF,CAAZzF,EACyBwC,eADzBxC,CACyCsF,CAAAA,CAAQG,CAARH,CADzCtF,CADiC;AAAA,YAEzB0F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAFyB;AAG9CJ,QAAAA,CAAAA,CAAQG,CAAAA,GAAI,CAAZH,CAAAA,GAAY,CAAA,CAAA,CAAA,CAAZA,EACAE,CAAAA,CAAUC,CAAVD,CAAAA,GAAeE,CADfJ;AACeI;AAAAA,KAR6BnK,MAUzC;AACKmB,MAAAA,CAAAA,CAAe4C,CAAAA,CAAOC,QAAtB7C,EAAgCsD,CAAAA,CAAM8D,MAAtCpH,CAAAA,IAAV1C,CAAAA,CAAAA,CAAAA,CAAAA,CAAU0C,EACV4I,CAAAA,CAAQA,CAAAA,CAAQ/J,MAAR+J,GAAiB,CAAzBA,CAAAA,GAA8BV,EAAAA,CAActF,CAAdsF,EAAsB5E,CAAAA,CAAM5D,OAA5BwI,CADpBlI;;AACgDN,WACrD,IAAIqJ,CAAAA,GAAIzF,CAAAA,CAAMK,IAANL,CAAWzE,MAAXyE,GAAoB,CADyB5D,EACtBqJ,CAAAA,GAAI,CADkBrJ,EACfqJ,CAAAA,EADerJ,EACV;AAAA,YAAA,CAAA,GACjC4D,CAAAA,CAAMG,KAANH,CAAYyF,CAAAA,GAAI,CAAhBzF,EACwB8C,cADxB9C,CACuCsF,CAAAA,CAAQG,CAARH,CADvCtF,CADiC;AAAA,YAE1B0F,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAF0B;AAG9CJ,QAAAA,CAAAA,CAAQG,CAAAA,GAAI,CAAZH,CAAAA,GAAY,CAAA,CAAA,CAAA,CAAZA,EACAE,CAAAA,CAAUC,CAAAA,GAAI,CAAdD,CAAAA,GAAmBE,CADnBJ;AACmBI;AAAAA;;AAAAA,SAIlB1F,KAJkB0F,GAIV1F,CAJU0F,EAIV1F,KACRqF,SADQrF,GACIqF,CALMK,EAKNL,KACZ5C,WADY4C,GAEfA,CAAAA,KAActN,OAAAA,CAAAA,SAAAA,CAAUkN,WAAxBI,GACI/F,CADJ+F,GAEIrF,CAAAA,CAAM6D,KAAN7D,KAAgB9D,CAAhB8D,GACAZ,EAAAA,CAAeC,KAAfD,CAAqBkG,CAAAA,CAAQ,CAARA,CAAAA,CAAW5F,GAAhCN,CADAY,GAEAsF,CAAAA,CAAQ,CAARA,CAXiBI,EAWT,KACT7C,YADS,GAEZwC,CAAAA,KAActN,OAAAA,CAAAA,SAAAA,CAAUqN,YAAxBC,GACI/F,CADJ+F,GAEIrF,CAAAA,CAAM8D,MAAN9D,KAAiB9D,CAAjB8D,GACAZ,EAAAA,CAAeC,KAAfD,CAAqBkG,CAAAA,CAAQA,CAAAA,CAAQ/J,MAAR+J,GAAiB,CAAzBA,CAAAA,CAA4B5F,GAAjDN,CADAY,GAEAsF,CAAAA,CAAQA,CAAAA,CAAQ/J,MAAR+J,GAAiB,CAAzBA,CAjBiBI,EAiBQ,KAC1BC,cAD0B,GACT,IAAI7F,EAAJ,CACpBvD,KAAKkG,WAALlG,CAAiBgD,QADG,EAEpBhD,KAAKsG,YAALtG,CAAkBgD,QAFE,EAGpBhD,KAAKkG,WAALlG,CAAiBmD,GAHG,EAIpBnD,KAAKsG,YAALtG,CAAkBmD,GAJE,CAlBCgG,EAsBHhG,KAEfkG,YAFelG,GAEAI,EAAAA,CAAMC,SAAND,CAAgB,IAAI8D,EAAJ,CAAU4B,CAAV,EAAqBxF,CAAAA,CAAM6D,KAA3B,CAAhB/D,CAxBG4F,EAwBwC7B,KAC1Dc,WAD0Dd,IAhLOhB,CAAAA,GAiLEtG,KAAKsG,YAjLPA,EAGlEwB,CAAAA,GAAAA,CAFAD,CAAAA,GAgLkCpE,CAAAA,CAAMiE,QAANjE,CAhLZN,GAgLYM,CAhLR/B,QAgLQ+B,CAAgBzD,KAAKkG,WAALlG,CAhLHmD,GAgLbM,CA9KlCqE,EAAsBnG,QAAtBmG,CAA+BxB,CAAAA,CAAanD,GAA5C2E,EAAiDrJ,MAAjDqJ,CAAwDD,CAAxDC,CAHkExB,EAIjE,IAAIsB,EAAJ,CAAYE,CAAAA,CAAS1G,SAArB,EAAgC0G,CAAAA,CAASzG,WAAzC,CA4K0DiG,CAxBxC6B;AApJuB9H;;AAAAA,EAAAA,CAAAA,CAoHlCmH,OApHkCnH,GAoHzC,UAAeoC,CAAf,EAA6BgF,CAA7B,EAA6BA;AAAAA,WAC3B,IAAIF,CAAJ,CAAU9E,CAAV,EAAiBgF,CAAjB,EAA2BjN,OAAAA,CAAAA,SAAAA,CAAUkN,WAArC,CAD2BD;AACUC,GArHErH,EAqHFqH,CAAAA,CAQhCC,QARgCD,GAQvC,UAAgBjF,CAAhB,EAA8BmF,CAA9B,EAA8BA;AAAAA,WAC5B,IAAIL,CAAJ,CAAU9E,CAAV,EAAiBmF,CAAjB,EAA4BpN,OAAAA,CAAAA,SAAAA,CAAUqN,YAAtC,CAD4BD;AACUC,GA9HCxH;AA8HDwH,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,SAAAA;AAAAA,SAAAA,CAAAA,CAsDxCS,gBAtDwCT,GAsDxCS,UAAiBC,CAAjBD,EAAiBC;AAAAA,QACXA,CAAAA,CAAkB7K,QAAlB6K,CAA2BzN,CAA3ByN,KAAX9L,CAAAA,CAAAA,CAAAA,CAAAA,CAAW8L,EACPvJ,KAAK8I,SAAL9I,KAAmBxE,OAAAA,CAAAA,SAAAA,CAAUqN,YAFXU,EAEWV,OACxB7I,KAAKsG,YADmBuC;AACnBvC,QAENkD,CAAAA,GAA4B,IAAIrI,EAAJ,CAAapF,CAAb,EAC/ByC,GAD+B,CAC3B+K,CAD2B,EAE/BhI,MAF+B,GAG/BG,QAH+B,CAGtB1B,KAAKsG,YAALtG,CAAkBmD,GAHI,EAGCb,QALvBgE;AAKuBhE,WAC5BtC,KAAKsG,YAALtG,YAA6BqD,EAA7BrD,GACH,IAAIqD,EAAJ,CAAgBrD,KAAKsG,YAALtG,CAAkBsD,KAAlC,EAAyCkG,CAAzC,CADGxJ,GAEH6C,EAAAA,CAAeC,KAAfD,CAAqB2G,CAArB3G,CAH+BP;AAGVkH,GAjEkBX,EAiElBW,CAAAA,CAQtBC,eARsBD,GAQtBC,UAAgBF,CAAhBE,EAAgBF;AAAAA,QACVA,CAAAA,CAAkB7K,QAAlB6K,CAA2BzN,CAA3ByN,KAAX9L,CAAAA,CAAAA,CAAAA,CAAAA,CAAW8L,EACPvJ,KAAK8I,SAAL9I,KAAmBxE,OAAAA,CAAAA,SAAAA,CAAUkN,WAFZa,EAEYb,OACxB1I,KAAKkG,WADmBwC;AACnBxC,QAENwD,CAAAA,GAA2B,IAAIvI,EAAJ,CAAapF,CAAb,EAAkByC,GAAlB,CAAsB+K,CAAtB,EAAyC7H,QAAzC,CAAkD1B,KAAKkG,WAALlG,CAAiBmD,GAAnE,EAAwEb,QAF7F4D;AAE6F5D,WAClGtC,KAAKkG,WAALlG,YAA4BqD,EAA5BrD,GACH,IAAIqD,EAAJ,CAAgBrD,KAAKkG,WAALlG,CAAiBsD,KAAjC,EAAwCoG,CAAxC,CADG1J,GAEH6C,EAAAA,CAAeC,KAAfD,CAAqB6G,CAArB7G,CAHqGP;AAGhFoH,GAjFkBb,EAiFlBa,CAAAA,CAkBfC,gBAlBeD,GAkBtB,UACL9F,CADK,EAELgG,CAFK,EAGLC,CAHK,EAGLA,CAHK,EAMLG,CANK,EAOLC,CAPK,EAQLC,CARK,EAQLA;AAAAA,QAAAA,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAJuD,EAIvDA,GAJuD,CAIvDA;AAAAA,QAJuD,CAAA,GAAA,CAAA,CAArDJ,aAIFI;AAAAA,QAJEJ,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAgB,CAAhBA,GAAgB,CAIlBI;AAAAA,QAJkB,CAAA,GAAA,CAAA,CAAGH,OAIrBG;AAAAA,QAJqBH,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAU,CAAVA,GAAU,CAI/BG;AAJ+B,SAAA,CAAA,KAE/BF,CAF+B,KAE/BA,CAAAA,GAAuB,EAFQ,GAER,KAAA,CAAA,KACvBC,CADuB,KACvBA,CAAAA,GAAmCL,CADZ,CAFQ,EAGIA,KAAAA,CAAAA,KACnCM,CADmCN,KACnCM,CAAAA,GAAsB,EADaN,CAHJ,EAMrBhG,CAAAA,CAAM5E,MAAN4E,GAAe,CAAfA,IAAVnG,CAAAA,CAAAA,CAAAA,CAAAA,CAN+B,EAOrBsM,CAAAA,GAAU,CAAVA,IAAVtM,CAAAA,CAAAA,CAAAA,CAAAA,CAP+B,EAQrBwM,CAAAA,KAAqBL,CAArBK,IAAyCD,CAAAA,CAAahL,MAAbgL,GAAsB,CAA/DC,IAAVxM,CAAAA,CAAAA,CAAAA,CAAAA,CAR+B;AAQ/BA,QACMoC,CAAAA,GACJ+J,CAAAA,YAA4BvG,EAA5BuG,GACIA,CAAAA,CAAiBtG,KAAjBsG,CAAuB/J,OAD3B+J,GAEIC,CAAAA,YAAuBjK,CAAvBiK,GACAA,CAAAA,CAAYhK,OADZgK,GACYhK,KACZsF,CANN1H;AAMM0H,SACgBA,CADhBA,KACItF,CADJsF,IACN1H,CAAAA,CAAAA,CAAAA,CAAAA,CADM0H;;AACN1H,SAAAA,IAEMgL,CAAAA,GAAWJ,EAAAA,CAAcuB,CAAdvB,EAAgCxI,CAAhCwI,CAFjB5K,EAGM0M,CAAAA,GAAW7B,EAAAA,CAAgBuB,CAAhBvB,EAA6BzI,CAA7ByI,CAHjB7K,EAISyL,CAAAA,GAAI,CAJbzL,EAIgByL,CAAAA,GAAItF,CAAAA,CAAM5E,MAJ1BvB,EAIkCyL,CAAAA,EAJlCzL,EAIuC;AAAA,UAC/BkG,CAAAA,GAAOC,CAAAA,CAAMsF,CAANtF,CADwB;;AAClBsF,UAAAA,CAEdvF,CAAAA,CAAKI,MAALJ,CAAY7D,MAAZ6D,CAAmB8E,CAAAA,CAASnF,KAA5BK,KAAuCA,CAAAA,CAAKiC,MAALjC,CAAY7D,MAAZ6D,CAAmB8E,CAAAA,CAASnF,KAA5BK,CAFzBuF,KAEqD5F,CACpEK,CAAAA,CAAKK,QAALL,CAAc/B,OAAd+B,CAAsB7H,CAAtB6H,CAHeuF,IAGOpN,CAAS6H,CAAAA,CAAKM,QAALN,CAAc/B,OAAd+B,CAAsB7H,CAAtB6H,CAHhBuF,EAGsCpN;AAAAA,YAErD8M,CAAAA,GAAAA,KAAAA,CAFqD9M;;AAErD8M,YAAAA;AAEAA,UAAAA,CAAAA,GAAajF,CAAAA,CAAKsC,eAALtC,CAAqB8E,CAArB9E,EAAqB8E,CAArB9E,CAAbiF;AACF,SAHEA,CAGF,OAAO7K,CAAP,EAAOA;AAAAA,cAEHA,CAAAA,CAAMqM,8BAFHrM,EAEGqM;AAAAA,gBAGJrM,CAHIqM;AAGJrM;;AAAAA,YAGJ6K,CAAAA,CAAUtF,KAAVsF,CAAgB9I,MAAhB8I,CAAuBuB,CAAvBvB,CAHI7K,EAINa,CAAAA,CACEsL,CADFtL,EAEE,IAAI2J,CAAJ,CACE,IAAIlB,EAAJ,CAAIA,GAAAA,MAAAA,CAAU2C,CAAV3C,EAAU2C,CAAcrG,CAAdqG,CAAV3C,CAAJ,EAAmC4C,CAAAA,CAAiBjH,QAApD,EAA8D6G,CAA9D,CADF,EAEEI,CAFF,EAGEzO,OAAAA,CAAAA,SAAAA,CAAUkN,WAHZ,CAFF9J,EAOEkL,CAPFlL,EAQEsJ,EARFtJ,CAAAA,CAJMb,KAcD,IAAIgM,CAAAA,GAAU,CAAVA,IAAenG,CAAAA,CAAM5E,MAAN4E,GAAe,CAAlC,EAAqC;AAAA,cACpCyG,CAAAA,GAAyBzG,CAAAA,CAAMM,KAANN,CAAY,CAAZA,EAAesF,CAAftF,EAAkB0G,MAAlB1G,CAAyBA,CAAAA,CAAMM,KAANN,CAAYsF,CAAAA,GAAI,CAAhBtF,EAAmBA,CAAAA,CAAM5E,MAAzB4E,CAAzBA,CADW;AAI1C2E,UAAAA,CAAAA,CAAMoB,gBAANpB,CACE8B,CADF9B,EAEEK,CAFFL,EAGEsB,CAHFtB,EAIE;AACEuB,YAAAA,aAAAA,EAAAA,CADF;AAEEC,YAAAA,OAAAA,EAASA,CAAAA,GAAU;AAFrB,WAJFxB,EAMuB,GAAA,MAAA,CAEjByB,CAFiB,EAEjBA,CAAcrG,CAAdqG,CAFiB,CANvBzB,EASE0B,CATF1B,EAUE2B,CAVF3B;AAUE2B;AAAAA;AAAAA;;AAAAA,WAKCA,CALDA;AAKCA,GAzKsCrB,EAyKtCqB,CAAAA,CAkBKK,iBAlBLL,GAkBF,UACLtG,CADK,EAEL4G,CAFK,EAGLC,CAHK,EAGLA,CAHK,EAMLT,CANK,EAOLU,CAPK,EAQLR,CARK,EAQLA;AAAAA,QAAAA,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAJuD,EAIvDA,GAJuD,CAIvDA;AAAAA,QAJuD,CAAA,GAAA,CAAA,CAArDJ,aAIFI;AAAAA,QAJEJ,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAgB,CAAhBA,GAAgB,CAIlBI;AAAAA,QAJkB,CAAA,GAAA,CAAA,CAAGH,OAIrBG;AAAAA,QAJqBH,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAU,CAAVA,GAAU,CAI/BG;AAJ+B,SAAA,CAAA,KAE/BF,CAF+B,KAE/BA,CAAAA,GAAuB,EAFQ,GAER,KAAA,CAAA,KACvBU,CADuB,KACvBA,CAAAA,GAAoCD,CADb,CAFQ,EAGKA,KAAAA,CAAAA,KACpCP,CADoCO,KACpCP,CAAAA,GAAsB,EADcO,CAHL,EAMrB7G,CAAAA,CAAM5E,MAAN4E,GAAe,CAAfA,IAAVnG,CAAAA,CAAAA,CAAAA,CAAAA,CAN+B,EAOrBsM,CAAAA,GAAU,CAAVA,IAAVtM,CAAAA,CAAAA,CAAAA,CAAAA,CAP+B,EAQrBiN,CAAAA,KAAsBD,CAAtBC,IAA2CV,CAAAA,CAAahL,MAAbgL,GAAsB,CAAjEU,IAAVjN,CAAAA,CAAAA,CAAAA,CAAAA,CAR+B;AAQ/BA,QACMoC,CAAAA,GACJ4K,CAAAA,YAA6BpH,EAA7BoH,GACIA,CAAAA,CAAkBnH,KAAlBmH,CAAwB5K,OAD5B4K,GAEID,CAAAA,YAAsB5K,CAAtB4K,GACAA,CAAAA,CAAW3K,OADX2K,GACW3K,KACXsF,CANN1H;AAMM0H,SACgBA,CADhBA,KACItF,CADJsF,IACN1H,CAAAA,CAAAA,CAAAA,CAAAA,CADM0H;;AACN1H,SAAAA,IAEMmL,CAAAA,GAAYP,EAAAA,CAAcoC,CAAdpC,EAAiCxI,CAAjCwI,CAFlB5K,EAGMkN,CAAAA,GAAUrC,EAAAA,CAAgBkC,CAAhBlC,EAA4BzI,CAA5ByI,CAHhB7K,EAISyL,CAAAA,GAAI,CAJbzL,EAIgByL,CAAAA,GAAItF,CAAAA,CAAM5E,MAJ1BvB,EAIkCyL,CAAAA,EAJlCzL,EAIuC;AAAA,UAC/BkG,CAAAA,GAAOC,CAAAA,CAAMsF,CAANtF,CADwB;;AAClBsF,UAAAA,CAEdvF,CAAAA,CAAKI,MAALJ,CAAY7D,MAAZ6D,CAAmBiF,CAAAA,CAAUtF,KAA7BK,KAAwCA,CAAAA,CAAKiC,MAALjC,CAAY7D,MAAZ6D,CAAmBiF,CAAAA,CAAUtF,KAA7BK,CAF1BuF,KAEuD5F,CACtEK,CAAAA,CAAKK,QAALL,CAAc/B,OAAd+B,CAAsB7H,CAAtB6H,CAHeuF,IAGOpN,CAAS6H,CAAAA,CAAKM,QAALN,CAAc/B,OAAd+B,CAAsB7H,CAAtB6H,CAHhBuF,EAGsCpN;AAAAA,YAErD2M,CAAAA,GAAAA,KAAAA,CAFqD3M;;AAErD2M,YAAAA;AAEAA,UAAAA,CAAAA,GAAY9E,CAAAA,CAAK4C,cAAL5C,CAAoBiF,CAApBjF,EAAoBiF,CAApBjF,CAAZ8E;AACF,SAHEA,CAGF,OAAO1K,CAAP,EAAOA;AAAAA,cAEHA,CAAAA,CAAM6M,2BAFH7M,EAEG6M;AAAAA,gBAGJ7M,CAHI6M;AAGJ7M;;AAAAA,YAGJ0K,CAAAA,CAASnF,KAATmF,CAAe3I,MAAf2I,CAAsBkC,CAAtBlC,CAHI1K,EAINa,CAAAA,CACEsL,CADFtL,EAEE,IAAI2J,CAAJ,CACE,IAAIlB,EAAJ,CAAIA,CAAO1D,CAAP0D,EAAO1D,MAAP0D,CAAgB2C,CAAhB3C,CAAJ,EAAmCmD,CAAnC,EAA+CE,CAAAA,CAAkB1H,QAAjE,CADF,EAEE0H,CAFF,EAGElP,OAAAA,CAAAA,SAAAA,CAAUqN,YAHZ,CAFFjK,EAOEkL,CAPFlL,EAQEsJ,EARFtJ,CAAAA,CAJMb,KAcD,IAAIgM,CAAAA,GAAU,CAAVA,IAAenG,CAAAA,CAAM5E,MAAN4E,GAAe,CAAlC,EAAqC;AAAA,cACpCyG,CAAAA,GAAyBzG,CAAAA,CAAMM,KAANN,CAAY,CAAZA,EAAesF,CAAftF,EAAkB0G,MAAlB1G,CAAyBA,CAAAA,CAAMM,KAANN,CAAYsF,CAAAA,GAAI,CAAhBtF,EAAmBA,CAAAA,CAAM5E,MAAzB4E,CAAzBA,CADW;AAI1C2E,UAAAA,CAAAA,CAAMgC,iBAANhC,CACE8B,CADF9B,EAEEiC,CAFFjC,EAGEE,CAHFF,EAIE;AACEuB,YAAAA,aAAAA,EAAAA,CADF;AAEEC,YAAAA,OAAAA,EAASA,CAAAA,GAAU;AAFrB,WAJFxB,EAMuB,CAEpB5E,CAFoB,EAEpBA,MAFoB,CAEXqG,CAFW,CANvBzB,EASEmC,CATFnC,EAUE2B,CAVF3B;AAUE2B;AAAAA;AAAAA;;AAAAA,WAKCA,CALDA;AAKCA,GAjQsCrB,EAiQtCqB,CAjQsCrB;AAiQtCqB,CA9SE3B,EAAb;;ACjDA,SAASsC,EAAT,CAAelG,CAAf,EAAeA;AAAAA,SAAAA,OACDA,CAAAA,CAAexB,GAAfwB,CAAmBzG,QAAnByG,CAA4B,EAA5BA,CADCA;AAIf;;AAAA,IAAA,EAAA;AAAA,IAKsBmG,EAAAA,GAAAA,YAAAA;AAAAA,WAAAA,CAAAA,GAAAA,CAAAA;;AAAAA,SAAAA,CAAAA,CAUNC,kBAVMD,GAUb,UAA0BE,CAA1B,EAAwCC,CAAxC,EAAwCA;AAAAA,QACvCC,CAAAA,GAAUF,CAAAA,CAAM9E,WAAN8E,CAAkBhI,QAAlBgI,KAA+BrL,CADFsL;AAAAA,QAEvCE,CAAAA,GAAWH,CAAAA,CAAM1E,YAAN0E,CAAmBhI,QAAnBgI,KAAgCrL,CAFJsL;AAIjCC,IAAAA,CAAAA,IAAWC,CAAXD,IAAZzN,CAAAA,CAAAA,CAAAA,CAAAA,CAAYyN,EAAZzN,EACY,SAASwN,CADrBxN,KACiCwN,CAAAA,CAAQG,GAARH,GAAc,CAD/CxN,IACAA,CAAAA,CAAAA,CAAAA,CAAAA,CADYyN;AACZzN,QAaIwO,CAbJxO;AAAAA,QAcIyO,CAdJzO;AAAAA,QAeIF,CAfJE;AAAAA,QAEM4N,CAAAA,GAAazN,CAAAA,CAAwBqN,CAAAA,CAAQK,SAAhC1N,CAFnBH;AAAAA,QAGMgL,CAAAA,GAAmBoC,EAAAA,CAAMG,CAAAA,CAAMvB,eAANuB,CAAsBC,CAAAA,CAAQM,eAA9BP,CAANH,CAHzBpN;AAAAA,QAIMmL,CAAAA,GAAoBiC,EAAAA,CAAMG,CAAAA,CAAM1B,gBAAN0B,CAAuBC,CAAAA,CAAQM,eAA/BP,CAANH,CAJ1BpN;AAAAA,QAKMqG,CAAAA,GAAiBkH,CAAAA,CAAMvH,KAANuH,CAAYlH,IAAZkH,CAAiBQ,GAAjBR,CAAqB,UAAA,CAAA,EAAA;AAAA,aAAS1H,CAAAA,CAAMzF,OAAf;AAAeA,KAApCmN,CALvBvN;AAAAA,QAMMgO,CAAAA,GACJ,SAASR,CAAT,GAASA,OAAAA,CACCS,IAAAA,CAAKC,KAALD,CAAW,IAAIE,IAAJ,EAAND,CAAiBE,OAAjBF,KAA6B,GAAlCD,IAA0CT,CAAAA,CAAQG,GADnDH,EACwD/M,QADxD+M,CACiE,EADjEA,CAAT,GAC0E,OACjEA,CAAAA,CAAQQ,QAARR,CAAiB/M,QAAjB+M,CAA0B,EAA1BA,CATXxN;AAAAA,QAWMqO,CAAAA,GAAmBC,OAAAA,CAAQd,CAAAA,CAAQe,aAAhBD,CAXzBtO;;AAWyCuO,YAKjChB,CAAAA,CAAMlC,SAL2BkD;AAK3BlD,WACPtN,OAAAA,CAAAA,SAAAA,CAAUkN,WADHI;AAENoC,QAAAA,CAAAA,IACFe,CAAAA,GAAaH,CAAAA,GAAmB,oDAAnBA,GAA0E,uBAAvFG,EAEAC,CAAAA,GAAO,CAACtD,CAAD,EAAY9E,CAAZ,EAAkBuH,CAAlB,EAAsBI,CAAtB,CAFPQ,EAGA1O,CAAAA,GAAQkL,CAJNyC,IAKOC,CAAAA,IACTc,CAAAA,GAAaH,CAAAA,GAAmB,oDAAnBA,GAA0E,uBAAvFG,EAEAC,CAAAA,GAAO,CAACzD,CAAD,EAAWG,CAAX,EAAsB9E,CAAtB,EAA4BuH,CAA5B,EAAgCI,CAAhC,CAFPQ,EAGA1O,CAAAA,GA/CO,KA2CE4N,KAMTc,CAAAA,GAAaH,CAAAA,GACT,uDADSA,GAET,0BAFJG,EAIAC,CAAAA,GAAO,CAACzD,CAAD,EAAWG,CAAX,EAAsB9E,CAAtB,EAA4BuH,CAA5B,EAAgCI,CAAhC,CAJPQ,EAKA1O,CAAAA,GAtDO,KA2CE4N,CALPD;AAtCK;;AAAA,WAyDN1P,OAAAA,CAAAA,SAAAA,CAAUqN,YAzDJ;AA0DEiD,QAAAA,CAAAA,IAAXrO,CAAAA,CAAAA,CAAAA,CAAAA,CAAWqO,EACPZ,CAAAA,IACFe,CAAAA,GAAa,uBAAbA,EAEAC,CAAAA,GAAO,CAACtD,CAAD,EAAY9E,CAAZ,EAAkBuH,CAAlB,EAAsBI,CAAtB,CAFPQ,EAGA1O,CAAAA,GAAQkL,CAJNyC,IAKOC,CAAAA,IACTc,CAAAA,GAAa,uBAAbA,EAEAC,CAAAA,GAAO,CAACtD,CAAD,EAAYH,CAAZ,EAAsB3E,CAAtB,EAA4BuH,CAA5B,EAAgCI,CAAhC,CAFPQ,EAGA1O,CAAAA,GApEO,KAgEE4N,KAMTc,CAAAA,GAAa,0BAAbA,EAEAC,CAAAA,GAAO,CAACtD,CAAD,EAAYH,CAAZ,EAAsB3E,CAAtB,EAA4BuH,CAA5B,EAAgCI,CAAhC,CAFPQ,EAGA1O,CAAAA,GAzEO,KAgEE4N,CANAW;AA3B0BE;;AA/B5B,WA6EN;AACLC,MAAAA,UAAAA,EAAAA,CADK;AAELC,MAAAA,IAAAA,EAAAA,CAFK;AAGL3O,MAAAA,KAAAA,EAAAA;AAHK,KA7EM;AAgFXA,GA3EgBuN,EA2EhBvN,CA3EgBuN;AA2EhBvN,CA3EgBuN,EALtB;AAAA,IAgFMvN,EAAAA,GAAAA,CAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,UAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,WAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,CAhFN;AAAA,IAgFMA,EAAAA,GAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,YAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,SAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,OAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,OAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,UAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,SAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,QAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,IAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,SAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,QAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,SAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,QAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,WAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,WAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,YAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,YAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,IAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,SAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,UAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,UAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,SAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,MAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,IAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,OAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,UAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,kBAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,mBAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,iBAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,WAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,OAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,SAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,MAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,YAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,WAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,IAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,MAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,YAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,SAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,UAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,OAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,SAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,aAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,WAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,WAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,QAAAA;AAAAA,IAAAA,IAAAA,EAAAA,qBAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,YAAAA;AAAAA,EAAAA,OAAAA,EAAAA,EAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,YAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,OAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,IAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,MAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,WAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,YAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,MAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,QAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,QAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,OAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,OAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,UAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,OAAAA;AAAAA,IAAAA,IAAAA,EAAAA,GAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,GAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,GAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,QAAAA;AAAAA,EAAAA,OAAAA,EAAAA,EAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,YAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,sBAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,sBAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,IAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,MAAAA;AAAAA,EAAAA,OAAAA,EAAAA,EAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,YAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,YAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,YAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,IAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,OAAAA;AAAAA,IAAAA,IAAAA,EAAAA,MAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,MAAAA;AAAAA,EAAAA,OAAAA,EAAAA,EAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,YAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,QAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,QAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,MAAAA;AAAAA,EAAAA,OAAAA,EAAAA,EAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,YAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,QAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,QAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,EAAAA;AAAAA,EAAAA,IAAAA,EAAAA,aAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,MAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,IAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,OAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,UAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,MAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,YAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,EAAAA;AAAAA,EAAAA,QAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,MAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,MAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,IAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,EAAAA;AAAAA,IAAAA,YAAAA,EAAAA,SAAAA;AAAAA,IAAAA,IAAAA,EAAAA,OAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,IAAAA,EAAAA,cAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA;AAAAA,IAAAA,YAAAA,EAAAA,MAAAA;AAAAA,IAAAA,IAAAA,EAAAA,EAAAA;AAAAA,IAAAA,IAAAA,EAAAA;AAAAA,GAAAA,CAAAA;AAAAA,EAAAA,OAAAA,EAAAA,CAAAA,CAAAA;AAAAA,EAAAA,eAAAA,EAAAA,YAAAA;AAAAA,EAAAA,IAAAA,EAAAA;AAAAA,CAAAA,CAhFN;AAAA,IChDI4O,EAAAA,IAAAA,CAAAA,EAAAA,GAAAA,EAAAA,EACD5Q,OAAAA,CAAAA,OAAAA,CAAQgF,OADP4L,IACiB;AAAA,gDAC6B;AAD7B,CADjBA,EAE8C,EAF9CA,CDgDJ;AAAA,ICvCsBC,EAAAA,GAAAA,YAAAA;AAAAA,WAAAA,CAAAA,GAAAA,CAAAA;;AAAAA,SAAAA,CAAAA,CAcAC,cAdAD,GAcAC,UAClBxM,CADkBwM,EAElBxO,CAFkBwO,EAGlBC,CAHkBD,EAIlB3M,CAJkB2M,EAKlBtP,CALkBsP,EAKlBtP;AAAAA,QAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAEM0P,CAFN1P,EAEM0P;AAAAA,eAaC,IAAI7M,CAAJ,CAAUC,CAAV,EAAmBhC,CAAnB,EAA4B4O,CAA5B,EAA4C/M,CAA5C,EAAoD3C,CAApD,CAbD0P;AAaqD1P,OAf3DA;;AAe2DA,WAAAA,CAAAA,KAjB3DuP,CAiB2DvP,KAjB3DuP,CAAAA,GAAWC,CAAAA,CAAAA,kBAAAA,CAAmBC,CAAAA,CAAAA,UAAAA,CAAW3M,CAAX2M,CAAnBD,CAiBgDxP;AAjBlB8C,UAAAA,CAAAA,GAKe,YAAA,QAAA,UAAA,CAAA,GAA/CsM,EAA+C,KAA/CA,KAAAA,CAAAA,KAAAA,CAA+C,IAA/CA,UAAAA,CAAAA,GAAAA,CAAAA,CAAuBtM,CAAvBsM,CAAAA,CAA+C,IAAxBtM,KAAAA,CAAAA,KAAAA,CAAwB,GAAxBA,KAAAA,CAAwB,GAA/CsM,CAAAA,CAAkCtO,CAAlCsO,CAA+C,CALftM;AAKEhC,aAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CACrCsO,EAAAA,CAAqBtM,CAArBsM,CAAAA,CAA8BtO,CAA9BsO,CADqCtO,CAAAA,GACPA,OAAAA,CAAAA,OAAAA,CACxB,IAAI6O,CAAAA,CAAAA,QAAJ,CAAa7O,CAAb,EAAsB8O,EAAtB,EAA6BL,CAA7B,EAAuC7M,QAAvC,GAAkDmN,IAAlD,CAAuD,UAACnN,CAAD,EAACA;AAAAA,YAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA;AAAAA,eAC5D0M,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EACKA,EADLA,GACKA,CAAAA,CAAAA,GAAAA,EAAAA,EACFtM,CADEsM,IACFtM,CAAAA,CAAAA,EAAAA,EAAAA,UAAAA,CAAAA,GACIsM,EADJtM,KACIsM,KAAAA,CAAAA,KAAAA,CADJtM,GACIsM,KAAAA,CADJtM,GACIsM,CAAAA,CAAuBtM,CAAvBsM,CADJtM,GAC2BA,CAAAA,CAAAA,GAAAA,EAAAA,EACzBhC,CADyBgC,IACfJ,CADeI,EACfJ,CAFZI,EADEsM,EAGU1M,CAJf0M,EAAAA,EAOO1M,CARqDA;AAQrDA,OARH,CADwB5B,EASrB4B,IATqB5B,CASrB4B,CATqB5B,CADOA,CAAAA;AAU5B4B,KAbf1C,CAae0C,OAAAA,CAAAA,EAAAA;AAAAA,aAAAA,OAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA,GAhCG2M,EAgCH3M,CAAAA,CAWGoN,aAXHpN,GAWGoN,UAClB7H,CADkB6H,EAElB5H,CAFkB4H,EAGlBP,CAHkBO,EAGlBP;AAAAA,QAAAA;AAAAA,WAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAWC,CAAAA,CAAAA,kBAAAA,CAAmBC,CAAAA,CAAAA,UAAAA,CAAWxH,CAAAA,CAAOnF,OAAlB2M,CAAnBD,CAAXD,GAEUtH,CAAAA,CAAOnF,OAAPmF,KAAmBC,CAAAA,CAAOpF,OAA1BmF,IAAVvH,CAAAA,CAAAA,CAAAA,CAAAA,CAFA6O;AAEA7O,UACMI,CAAAA,GAAUkH,EAAAA,CAAKjH,UAALiH,CAAgBC,CAAhBD,EAAwBE,CAAxBF,CADhBtH;AACwCwH,aAAAA,OAAAA,CAAAA,OAAAA,CACH,IAAIyH,CAAAA,CAAAA,QAAJ,CAAa7O,CAAb,EAAsBmP,EAAtB,EAAsCV,CAAtC,EAAgDW,WAAhD,EADGhI,EAC6CgI,IAD7ChI,CAC6CgI,UAAAA,CAAAA,EAAAA;AAAAA,YAA9EH,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAA8EG;AAAAA,YAAnEF,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAmEE;AAAAA,YAC/EC,CAAAA,GAAWlI,CAAAA,CAAO/E,WAAP+E,CAAmBC,CAAnBD,IAA6B,CAAC8H,CAAD,EAAYC,CAAZ,CAA7B/H,GAAsD,CAAC+H,CAAD,EAAYD,CAAZ,CADcG;AACFH,eAC5E,IAAI/H,EAAJ,CAAS,IAAI1B,EAAJ,CAAgB2B,CAAhB,EAAwBkI,CAAAA,CAAS,CAATA,CAAxB,CAAT,EAA+C,IAAI7J,EAAJ,CAAgB4B,CAAhB,EAAwBiI,CAAAA,CAAS,CAATA,CAAxB,CAA/C,CAD4EJ;AACI,OAH/C7H,CAAAA;AAG+C,KANvFqH,CAMuF,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GApDrEF,EAoDqE,CApDrEA;AAoDqE,CApDrEA,EDuCtB;;ACa2F,OAAA,CAAA,IAAA,GAAA,CAAA,EAAA,OAAA,CAAA,QAAA,GAAA,CAAA,EAAA,OAAA,CAAA,cAAA,GAAA,EAAA,EAAA,OAAA,CAAA,cAAA,GAAA;AAAA,KAAA;AAAA,IAAA,IAAA,EAAA;AAAA,MAAA,YAAA,EAAA,4CAAA;AAAA,MAAA,WAAA,EAAA,4CAAA;AAAA,MAAA,OAAA,EAAA,OAAA;AAAA,MAAA,QAAA,EAAA,OAAA;AAAA,MAAA,QAAA,EAAA,4CAAA;AAAA,MAAA,SAAA,EAAA;AAAA,KAAA;AAAA,IAAA,OAAA,EAAA;AAAA,MAAA,YAAA,EAAA,4CAAA;AAAA,MAAA,WAAA,EAAA,4CAAA;AAAA,MAAA,OAAA,EAAA,OAAA;AAAA,MAAA,QAAA,EAAA,kBAAA;AAAA,MAAA,QAAA,EAAA,4CAAA;AAAA,MAAA,SAAA,EAAA;AAAA,KAAA;AAAA,IAAA,MAAA,EAAA;AAAA,MAAA,YAAA,EAAA,4CAAA;AAAA,MAAA,WAAA,EAAA,4CAAA;AAAA,MAAA,OAAA,EAAA,OAAA;AAAA,MAAA,QAAA,EAAA,mBAAA;AAAA,MAAA,QAAA,EAAA,4CAAA;AAAA,MAAA,SAAA,EAAA;AAAA;AAAA;AAAA,CAAA,EAAA,OAAA,CAAA,KAAA,GAAA,CAAA,EAAA,OAAA,CAAA,eAAA,GdpD5D,4CcoD4D,EdpD5D,OAAA,CAAA,OAAA,GAAA,EcoD4D,EdpD5D,OAAA,CAAA,QAAA,GAAA,EcoD4D,EdpD5D,OAAA,CAAA,cAAA,GAAA,CcoD4D,EdpD5D,OAAA,CAAA,4BAAA,GAAA,CcoD4D,EdpD5D,OAAA,CAAA,yBAAA,GAAA,CcoD4D,EdpD5D,OAAA,CAAA,iBAAA,GAAA,CcoD4D,EdpD5D,OAAA,CAAA,IAAA,GAAA,EcoD4D,EdpD5D,OAAA,CAAA,OAAA,GAAA,EcoD4D,EdpD5D,OAAA,CAAA,KAAA,GAAA,EcoD4D,EdpD5D,OAAA,CAAA,KAAA,GAAA,EcoD4D,EdpD5D,OAAA,CAAA,MAAA,GAAA,EcoD4D,EdpD5D,OAAA,CAAA,KAAA,GAAA,CcoD4D,EdpD5D,OAAA,CAAA,WAAA,GAAA,EcoD4D,EdpD5D,OAAA,CAAA,KAAA,GAAA,EcoD4D,EdpD5D,OAAA,CAAA,IAAA,GAAA,EcoD4D,EdpD5D,OAAA,CAAA,cAAA,GAAA,CcoD4D,EdpD5D,OAAA,CAAA,qBAAA,GAAA,EcoD4D,EdpD5D,OAAA,CAAA,eAAA,GAAA,EcoD4D","sourcesContent":["import JSBI from 'jsbi'\nimport {DeploymentInfo} from './config'\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  SEPOLIA = 11155111\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x5530A244A1E47f7400C981d5dB46A182f8a5e080'\n\nexport const INIT_CODE_HASH = '0x3ff5a57d3cff2a87c16babf1bd5b75630fa43eec63718c79bda4190933c2d320'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\nimport { DeploymentInfo } from '../config'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.SEPOLIA]: new Token(\n    ChainId.SEPOLIA,\n    '0x770cDf0f0783cF58a3d1bDc0269dE4C2883e7892',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  \n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\n// import IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\nimport { bytecode, abi as InfererPairAbi } from '../src/contracts/inferer-core/InfererPair.sol/InfererPair.json'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, InfererPairAbi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}