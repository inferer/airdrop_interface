{"ast":null,"code":"/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getTokenList(listUrl, resolveENSContentHash) {\n  let response;\n\n  try {\n    response = await fetch('/tokens/tokenlist.json');\n\n    if (!response.ok) {}\n\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.debug('Failed to fetch list', listUrl, error);\n  }\n}\nexport async function getTokenListLocal(listUrl) {\n  let response;\n\n  try {\n    response = await fetch('/tokens/tokenlist.json');\n\n    if (!response.ok) {}\n\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.debug('Failed to fetch list', listUrl, error);\n  }\n}","map":{"version":3,"sources":["/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/utils/getTokenList.ts"],"names":["getTokenList","listUrl","resolveENSContentHash","response","fetch","ok","json","error","console","debug","getTokenListLocal"],"mappings":"AAIA;;;;;AAKA,eAAe,eAAeA,YAAf,CACbC,OADa,EAEbC,qBAFa,EAGC;AACd,MAAIC,QAAJ;;AACE,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAD,CAAtB;;AACA,QAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB,CAEjB;;AACD,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACA,WAAOA,IAAP;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd,EAAsCR,OAAtC,EAA+CM,KAA/C;AAED;AACJ;AAED,OAAO,eAAeG,iBAAf,CACLT,OADK,EAES;AACd,MAAIE,QAAJ;;AACE,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAD,CAAtB;;AACA,QAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB,CAEjB;;AACD,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACA,WAAOA,IAAP;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd,EAAsCR,OAAtC,EAA+CM,KAA/C;AAED;AACJ","sourcesContent":["import { TokenList } from '@uniswap/token-lists'\n\nimport { NETWORK_CHAIN_ID } from '../connectors'\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getTokenList(\n  listUrl: string,\n  resolveENSContentHash?: (ensName: string) => Promise<string>\n): Promise<any> {\n  let response\n    try {\n      response = await fetch('/tokens/tokenlist.json')\n      if (!response.ok) {\n      \n      }\n      const json = await response.json()\n      return json as TokenList\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error)\n      \n    }\n}\n\nexport async function getTokenListLocal(\n  listUrl: string,\n): Promise<any> {\n  let response\n    try {\n      response = await fetch('/tokens/tokenlist.json')\n      if (!response.ok) {\n      \n      }\n      const json = await response.json()\n      return json as TokenList\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error)\n      \n    }\n}\n"]},"metadata":{},"sourceType":"module"}