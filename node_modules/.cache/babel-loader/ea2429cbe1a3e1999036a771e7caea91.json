{"ast":null,"code":"import schema from '@uniswap/token-lists/src/tokenlist.schema.json';\nimport Ajv from 'ajv';\nconst tokenListValidator = new Ajv({\n  allErrors: true\n}).compile(schema);\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\n\nexport default async function getTokenList(listUrl, resolveENSContentHash) {\n  let response;\n\n  try {\n    response = await fetch('/tokens/tokenlist.json');\n\n    if (!response.ok) {}\n\n    const json = await response.json();\n    console.log(listUrl, json, 11111111);\n    return json;\n  } catch (error) {\n    console.debug('Failed to fetch list', listUrl, error);\n  }\n}","map":{"version":3,"sources":["/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/utils/getTokenList.ts"],"names":["schema","Ajv","tokenListValidator","allErrors","compile","getTokenList","listUrl","resolveENSContentHash","response","fetch","ok","json","console","log","error","debug"],"mappings":"AACA,OAAOA,MAAP,MAAmB,gDAAnB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AAKA,MAAMC,kBAAkB,GAAG,IAAID,GAAJ,CAAQ;AAAEE,EAAAA,SAAS,EAAE;AAAb,CAAR,EAA6BC,OAA7B,CAAqCJ,MAArC,CAA3B;AAEA;;;;;;AAKA,eAAe,eAAeK,YAAf,CACbC,OADa,EAEbC,qBAFa,EAGC;AACd,MAAIC,QAAJ;;AACE,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAD,CAAtB;;AACA,QAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB,CAEjB;;AAED,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ,EAAqBK,IAArB,EAA2B,QAA3B;AACA,WAAOA,IAAP;AACD,GATD,CASE,OAAOG,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACG,KAAR,CAAc,sBAAd,EAAsCT,OAAtC,EAA+CQ,KAA/C;AAED;AAIJ","sourcesContent":["import { TokenList } from '@uniswap/token-lists'\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\nimport Ajv from 'ajv'\nimport contenthashToUri from './contenthashToUri'\nimport { parseENSAddress } from './parseENSAddress'\nimport uriToHttp from './uriToHttp'\n\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getTokenList(\n  listUrl: string,\n  resolveENSContentHash: (ensName: string) => Promise<string>\n): Promise<any> {\n  let response\n    try {\n      response = await fetch('/tokens/tokenlist.json')\n      if (!response.ok) {\n      \n      }\n  \n      const json = await response.json()\n      console.log(listUrl, json, 11111111)\n      return json as TokenList\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error)\n      \n    }\n\n\n   \n}\n"]},"metadata":{},"sourceType":"module"}