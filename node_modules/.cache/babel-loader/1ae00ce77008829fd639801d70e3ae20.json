{"ast":null,"code":"import _regeneratorRuntime from\"/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{nanoid}from'@reduxjs/toolkit';import{useCallback}from'react';import{useDispatch}from'react-redux';import{fetchTokenList}from'../state/lists/actions';import getTokenList from'../utils/getTokenList';import{useActiveWeb3React}from'./index';export function useFetchListCallback(){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId,library=_useActiveWeb3React.library;var dispatch=useDispatch();return useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(listUrl){var requestId;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:requestId=nanoid();dispatch(fetchTokenList.pending({requestId:requestId,url:listUrl}));return _context.abrupt(\"return\",getTokenList(listUrl).then(function(tokenList){dispatch(fetchTokenList.fulfilled({url:listUrl,tokenList:tokenList,requestId:requestId}));return tokenList;}).catch(function(error){console.debug(\"Failed to get list at url \".concat(listUrl),error);dispatch(fetchTokenList.rejected({url:listUrl,requestId:requestId,errorMessage:error.message}));throw error;}));case 3:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}(),[dispatch]);}","map":{"version":3,"sources":["/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/hooks/useFetchListCallback.ts"],"names":["nanoid","useCallback","useDispatch","fetchTokenList","getTokenList","useActiveWeb3React","useFetchListCallback","chainId","library","dispatch","listUrl","requestId","pending","url","then","tokenList","fulfilled","catch","error","console","debug","rejected","errorMessage","message"],"mappings":"iXAAA,OAASA,MAAT,KAAuB,kBAAvB,CAGA,OAASC,WAAT,KAA4B,OAA5B,CACA,OAASC,WAAT,KAA4B,aAA5B,CAEA,OAASC,cAAT,KAA+B,wBAA/B,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CACA,OAASC,kBAAT,KAAmC,SAAnC,CAEA,MAAO,SAASC,CAAAA,oBAAT,EAAyE,yBACjDD,kBAAkB,EAD+B,CACtEE,OADsE,qBACtEA,OADsE,CAC7DC,OAD6D,qBAC7DA,OAD6D,CAE9E,GAAMC,CAAAA,QAAQ,CAAGP,WAAW,EAA5B,CAEA,MAAOD,CAAAA,WAAW,0FAChB,iBAAOS,OAAP,gIACQC,SADR,CACoBX,MAAM,EAD1B,CAEES,QAAQ,CAACN,cAAc,CAACS,OAAf,CAAuB,CAAED,SAAS,CAATA,SAAF,CAAaE,GAAG,CAAEH,OAAlB,CAAvB,CAAD,CAAR,CAFF,gCAGSN,YAAY,CAACM,OAAD,CAAZ,CACJI,IADI,CACC,SAAAC,SAAS,CAAI,CACjBN,QAAQ,CAACN,cAAc,CAACa,SAAf,CAAyB,CAAEH,GAAG,CAAEH,OAAP,CAAgBK,SAAS,CAATA,SAAhB,CAA2BJ,SAAS,CAATA,SAA3B,CAAzB,CAAD,CAAR,CACA,MAAOI,CAAAA,SAAP,CACD,CAJI,EAKJE,KALI,CAKE,SAAAC,KAAK,CAAI,CACdC,OAAO,CAACC,KAAR,qCAA2CV,OAA3C,EAAsDQ,KAAtD,EACAT,QAAQ,CAACN,cAAc,CAACkB,QAAf,CAAwB,CAAER,GAAG,CAAEH,OAAP,CAAgBC,SAAS,CAATA,SAAhB,CAA2BW,YAAY,CAAEJ,KAAK,CAACK,OAA/C,CAAxB,CAAD,CAAR,CACA,KAAML,CAAAA,KAAN,CACD,CATI,CAHT,wDADgB,+DAehB,CAACT,QAAD,CAfgB,CAAlB,CAiBD","sourcesContent":["import { nanoid } from '@reduxjs/toolkit'\nimport { ChainId } from '@uniswap/sdk'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { AppDispatch } from '../state'\nimport { fetchTokenList } from '../state/lists/actions'\nimport getTokenList from '../utils/getTokenList'\nimport { useActiveWeb3React } from './index'\n\nexport function useFetchListCallback(): (listUrl: string) => Promise<TokenList> {\n  const { chainId, library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n\n  return useCallback(\n    async (listUrl: string) => {\n      const requestId = nanoid()\n      dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\n      return getTokenList(listUrl)\n        .then(tokenList => {\n          dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\n          return tokenList\n        })\n        .catch(error => {\n          console.debug(`Failed to get list at url ${listUrl}`, error)\n          dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\n          throw error\n        })\n    },\n    [dispatch]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}