{"ast":null,"code":"import _regeneratorRuntime from\"/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import schema from'@uniswap/token-lists/src/tokenlist.schema.json';import Ajv from'ajv';var tokenListValidator=new Ajv({allErrors:true}).compile(schema);/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */export default function getTokenList(_x,_x2){return _getTokenList.apply(this,arguments);}function _getTokenList(){_getTokenList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(listUrl,resolveENSContentHash){var response,json;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch('/tokens/tokenlist.json');case 3:response=_context.sent;if(!response.ok){}_context.next=7;return response.json();case 7:json=_context.sent;return _context.abrupt(\"return\",json);case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);console.debug('Failed to fetch list',listUrl,_context.t0);case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,11]]);}));return _getTokenList.apply(this,arguments);}","map":{"version":3,"sources":["/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/utils/getTokenList.ts"],"names":["schema","Ajv","tokenListValidator","allErrors","compile","getTokenList","listUrl","resolveENSContentHash","fetch","response","ok","json","console","debug"],"mappings":"iXACA,MAAOA,CAAAA,MAAP,KAAmB,gDAAnB,CACA,MAAOC,CAAAA,GAAP,KAAgB,KAAhB,CAKA,GAAMC,CAAAA,kBAAkB,CAAG,GAAID,CAAAA,GAAJ,CAAQ,CAAEE,SAAS,CAAE,IAAb,CAAR,EAA6BC,OAA7B,CAAqCJ,MAArC,CAA3B,CAEA;;;;GAKA,uBAA8BK,CAAAA,YAA9B,qD,+FAAe,iBACbC,OADa,CAEbC,qBAFa,0KAMQC,CAAAA,KAAK,CAAC,wBAAD,CANb,QAMTC,QANS,eAOT,GAAI,CAACA,QAAQ,CAACC,EAAd,CAAkB,CAEjB,CATQ,sBAUUD,CAAAA,QAAQ,CAACE,IAAT,EAVV,QAUHA,IAVG,+CAWFA,IAXE,4DAaTC,OAAO,CAACC,KAAR,CAAc,sBAAd,CAAsCP,OAAtC,cAbS,qE","sourcesContent":["import { TokenList } from '@uniswap/token-lists'\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\nimport Ajv from 'ajv'\nimport contenthashToUri from './contenthashToUri'\nimport { parseENSAddress } from './parseENSAddress'\nimport uriToHttp from './uriToHttp'\n\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getTokenList(\n  listUrl: string,\n  resolveENSContentHash?: (ensName: string) => Promise<string>\n): Promise<any> {\n  let response\n    try {\n      response = await fetch('/tokens/tokenlist.json')\n      if (!response.ok) {\n      \n      }\n      const json = await response.json()\n      return json as TokenList\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error)\n      \n    }\n\n\n   \n}\n"]},"metadata":{},"sourceType":"module"}