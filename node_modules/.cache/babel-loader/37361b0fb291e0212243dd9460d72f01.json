{"ast":null,"code":"var _jsxFileName = \"/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/pages/Swap/index.tsx\";\nimport React from 'react';\nimport { Wrapper } from '../../components/swap/styleds';\nimport { useDefaultsFromURLSearch } from '../../state/swap/hooks';\nimport AppBody from '../AppBody';\nimport { useSelectedTokenList } from '../../state/lists/hooks';\nexport default function Swap() {\n  const loadedUrlParams = useDefaultsFromURLSearch(); // token warning stuff\n  // const [loadedInputCurrency, loadedOutputCurrency] = [\n  //   useCurrency(loadedUrlParams?.inputCurrencyId),\n  //   useCurrency(loadedUrlParams?.outputCurrencyId)\n  // ]\n\n  const allTokens = useSelectedTokenList(); // const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\n  // const urlLoadedTokens: Token[] = useMemo(\n  //   () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\n  //   [loadedInputCurrency, loadedOutputCurrency]\n  // )\n  // const handleConfirmTokenWarning = useCallback(() => {\n  //   setDismissTokenWarning(true)\n  // }, [])\n  // const { account } = useActiveWeb3React()\n  // const theme = useContext(ThemeContext)\n  // // toggle wallet when disconnected\n  // const toggleWalletModal = useWalletModalToggle()\n  // // for expert mode\n  // const toggleSettings = useToggleSettingsMenu()\n  // const [isExpertMode] = useExpertModeManager()\n  // // get custom setting values for user\n  // const [deadline] = useUserDeadline()\n  // const [allowedSlippage] = useUserSlippageTolerance()\n  // // swap state\n  // const { independentField, typedValue, recipient } = useSwapState()\n  // const {\n  //   v1Trade,\n  //   v2Trade,\n  //   currencyBalances,\n  //   parsedAmount,\n  //   currencies,\n  //   inputError: swapInputError\n  // } = useDerivedSwapInfo()\n  // const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\n  //   currencies[Field.INPUT],\n  //   currencies[Field.OUTPUT],\n  //   typedValue\n  // )\n  // const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\n  // const { address: recipientAddress } = useENSAddress(recipient)\n  // const toggledVersion = useToggledVersion()\n  // const trade = showWrap\n  //   ? undefined\n  //   : {\n  //       [Version.v1]: v1Trade,\n  //       [Version.v2]: v2Trade\n  //     }[toggledVersion]\n  // const betterTradeLinkVersion: Version | undefined =\n  //   toggledVersion === Version.v2 && isTradeBetter(v2Trade, v1Trade, BETTER_TRADE_LINK_THRESHOLD)\n  //     ? Version.v1\n  //     : toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade)\n  //     ? Version.v2\n  //     : undefined\n  // const parsedAmounts = showWrap\n  //   ? {\n  //       [Field.INPUT]: parsedAmount,\n  //       [Field.OUTPUT]: parsedAmount\n  //     }\n  //   : {\n  //       [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n  //       [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\n  //     }\n  // const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n  // const isValid = !swapInputError\n  // const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n  // const handleTypeInput = useCallback(\n  //   (value: string) => {\n  //     onUserInput(Field.INPUT, value)\n  //   },\n  //   [onUserInput]\n  // )\n  // const handleTypeOutput = useCallback(\n  //   (value: string) => {\n  //     onUserInput(Field.OUTPUT, value)\n  //   },\n  //   [onUserInput]\n  // )\n  // // modal and loading\n  // const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n  //   showConfirm: boolean\n  //   tradeToConfirm: Trade | undefined\n  //   attemptingTxn: boolean\n  //   swapErrorMessage: string | undefined\n  //   txHash: string | undefined\n  // }>({\n  //   showConfirm: false,\n  //   tradeToConfirm: undefined,\n  //   attemptingTxn: false,\n  //   swapErrorMessage: undefined,\n  //   txHash: undefined\n  // })\n  // const formattedAmounts = {\n  //   [independentField]: typedValue,\n  //   [dependentField]: showWrap\n  //     ? parsedAmounts[independentField]?.toExact() ?? ''\n  //     : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\n  // }\n  // const route = trade?.route\n  // const userHasSpecifiedInputOutput = Boolean(\n  //   currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  // )\n  // const noRoute = !route\n  // // check whether the user has approved the router on the input token\n  // const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\n  // // check if user has gone through approval process, used to show two step buttons, reset on token change\n  // const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n  // // mark when a user has submitted an approval, reset onTokenSelection for input field\n  // useEffect(() => {\n  //   if (approval === ApprovalState.PENDING) {\n  //     setApprovalSubmitted(true)\n  //   }\n  // }, [approval, approvalSubmitted])\n  // const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  // const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\n  // // the callback to execute the swap\n  // const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\n  //   trade,\n  //   allowedSlippage,\n  //   deadline,\n  //   recipient\n  // )\n  // const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\n  // const handleSwap = useCallback(() => {\n  //   if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n  //     return\n  //   }\n  //   if (!swapCallback) {\n  //     return\n  //   }\n  //   setSwapState({ attemptingTxn: true, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: undefined })\n  //   swapCallback()\n  //     .then(hash => {\n  //       setSwapState({ attemptingTxn: false, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: hash })\n  //       ReactGA.event({\n  //         category: 'Swap',\n  //         action:\n  //           recipient === null\n  //             ? 'Swap w/o Send'\n  //             : (recipientAddress ?? recipient) === account\n  //             ? 'Swap w/o Send + recipient'\n  //             : 'Swap w/ Send',\n  //         label: [\n  //           trade?.inputAmount?.currency?.symbol,\n  //           trade?.outputAmount?.currency?.symbol,\n  //           getTradeVersion(trade)\n  //         ].join('/')\n  //       })\n  //     })\n  //     .catch(error => {\n  //       setSwapState({\n  //         attemptingTxn: false,\n  //         tradeToConfirm,\n  //         showConfirm,\n  //         swapErrorMessage: error.message,\n  //         txHash: undefined\n  //       })\n  //     })\n  // }, [tradeToConfirm, account, priceImpactWithoutFee, recipient, recipientAddress, showConfirm, swapCallback, trade])\n  // // errors\n  // const [showInverted, setShowInverted] = useState<boolean>(false)\n  // // warnings on slippage\n  // const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n  // // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // // never show if price impact is above threshold in non expert mode\n  // const showApproveFlow =\n  //   !swapInputError &&\n  //   (approval === ApprovalState.NOT_APPROVED ||\n  //     approval === ApprovalState.PENDING ||\n  //     (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n  //   !(priceImpactSeverity > 3 && !isExpertMode)\n  // const handleConfirmDismiss = useCallback(() => {\n  //   setSwapState({ showConfirm: false, tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\n  //   // if there was a tx hash, we want to clear the input\n  //   if (txHash) {\n  //     onUserInput(Field.INPUT, '')\n  //   }\n  // }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\n  // const handleAcceptChanges = useCallback(() => {\n  //   setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn, showConfirm })\n  // }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash])\n  // const handleInputSelect = useCallback(\n  //   inputCurrency => {\n  //     setApprovalSubmitted(false) // reset 2 step UI for approvals\n  //     onCurrencySelection(Field.INPUT, inputCurrency)\n  //   },\n  //   [onCurrencySelection]\n  // )\n  // const handleMaxInput = useCallback(() => {\n  //   maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact())\n  // }, [maxAmountInput, onUserInput])\n  // const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [\n  //   onCurrencySelection\n  // ])\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AppBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Wrapper, {\n    id: \"swap-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/pages/Swap/index.tsx"],"names":["React","Wrapper","useDefaultsFromURLSearch","AppBody","useSelectedTokenList","Swap","loadedUrlParams","allTokens"],"mappings":";AACA,OAAOA,KAAP,MAA6E,OAA7E;AAgBA,SAA0DC,OAA1D,QAAyE,+BAAzE;AAgBA,SACEC,wBADF,QAKO,wBALP;AAUA,OAAOC,OAAP,MAAoB,YAApB;AAGA,SAASC,oBAAT,QAAqC,yBAArC;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC7B,QAAMC,eAAe,GAAGJ,wBAAwB,EAAhD,CAD6B,CAG7B;AACA;AACA;AACA;AACA;;AACA,QAAMK,SAAS,GAAGH,oBAAoB,EAAtsBACE,uDAME,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAC,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CANF,CADF;AA6MD","sourcesContent":["import { CurrencyAmount, JSBI, Token, Trade } from '@uniswap/sdk'\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { ArrowDown } from 'react-feather'\nimport ReactGA from 'react-ga'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport AddressInputPanel from '../../components/AddressInputPanel'\nimport { ButtonError, ButtonLight, ButtonPrimary, ButtonConfirmed } from '../../components/Button'\nimport Card, { GreyCard } from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { SwapPoolTabs } from '../../components/NavigationTabs'\nimport { AutoRow, RowBetween } from '../../components/Row'\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown'\nimport BetterTradeLink from '../../components/swap/BetterTradeLink'\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee'\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds'\nimport TradePrice from '../../components/swap/TradePrice'\nimport TokenWarningModal from '../../components/TokenWarningModal'\nimport ProgressSteps from '../../components/ProgressSteps'\n\nimport { BETTER_TRADE_LINK_THRESHOLD, INITIAL_ALLOWED_SLIPPAGE } from '../../constants'\nimport { getTradeVersion, isTradeBetter } from '../../data/V1'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\nimport useENSAddress from '../../hooks/useENSAddress'\nimport { useSwapCallback } from '../../hooks/useSwapCallback'\nimport useToggledVersion, { Version } from '../../hooks/useToggledVersion'\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback'\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks'\nimport { Field } from '../../state/swap/actions'\nimport {\n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState\n} from '../../state/swap/hooks'\nimport { useExpertModeManager, useUserDeadline, useUserSlippageTolerance } from '../../state/user/hooks'\nimport { LinkStyledButton, TYPE } from '../../theme'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\nimport AppBody from '../AppBody'\nimport { ClickableText } from '../Pool/styleds'\nimport Loader from '../../components/Loader'\nimport { useSelectedTokenList } from '../../state/lists/hooks'\n\nexport default function Swap() {\n  const loadedUrlParams = useDefaultsFromURLSearch()\n\n  // token warning stuff\n  // const [loadedInputCurrency, loadedOutputCurrency] = [\n  //   useCurrency(loadedUrlParams?.inputCurrencyId),\n  //   useCurrency(loadedUrlParams?.outputCurrencyId)\n  // ]\n  const allTokens = useSelectedTokenList()\n  // const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\n  // const urlLoadedTokens: Token[] = useMemo(\n  //   () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\n  //   [loadedInputCurrency, loadedOutputCurrency]\n  // )\n  // const handleConfirmTokenWarning = useCallback(() => {\n  //   setDismissTokenWarning(true)\n  // }, [])\n\n  // const { account } = useActiveWeb3React()\n  // const theme = useContext(ThemeContext)\n\n  // // toggle wallet when disconnected\n  // const toggleWalletModal = useWalletModalToggle()\n\n  // // for expert mode\n  // const toggleSettings = useToggleSettingsMenu()\n  // const [isExpertMode] = useExpertModeManager()\n\n  // // get custom setting values for user\n  // const [deadline] = useUserDeadline()\n  // const [allowedSlippage] = useUserSlippageTolerance()\n\n  // // swap state\n  // const { independentField, typedValue, recipient } = useSwapState()\n  // const {\n  //   v1Trade,\n  //   v2Trade,\n  //   currencyBalances,\n  //   parsedAmount,\n  //   currencies,\n  //   inputError: swapInputError\n  // } = useDerivedSwapInfo()\n  // const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\n  //   currencies[Field.INPUT],\n  //   currencies[Field.OUTPUT],\n  //   typedValue\n  // )\n  // const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\n  // const { address: recipientAddress } = useENSAddress(recipient)\n  // const toggledVersion = useToggledVersion()\n  // const trade = showWrap\n  //   ? undefined\n  //   : {\n  //       [Version.v1]: v1Trade,\n  //       [Version.v2]: v2Trade\n  //     }[toggledVersion]\n\n  // const betterTradeLinkVersion: Version | undefined =\n  //   toggledVersion === Version.v2 && isTradeBetter(v2Trade, v1Trade, BETTER_TRADE_LINK_THRESHOLD)\n  //     ? Version.v1\n  //     : toggledVersion === Version.v1 && isTradeBetter(v1Trade, v2Trade)\n  //     ? Version.v2\n  //     : undefined\n\n  // const parsedAmounts = showWrap\n  //   ? {\n  //       [Field.INPUT]: parsedAmount,\n  //       [Field.OUTPUT]: parsedAmount\n  //     }\n  //   : {\n  //       [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n  //       [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\n  //     }\n\n  // const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n  // const isValid = !swapInputError\n  // const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  // const handleTypeInput = useCallback(\n  //   (value: string) => {\n  //     onUserInput(Field.INPUT, value)\n  //   },\n  //   [onUserInput]\n  // )\n  // const handleTypeOutput = useCallback(\n  //   (value: string) => {\n  //     onUserInput(Field.OUTPUT, value)\n  //   },\n  //   [onUserInput]\n  // )\n\n  // // modal and loading\n  // const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n  //   showConfirm: boolean\n  //   tradeToConfirm: Trade | undefined\n  //   attemptingTxn: boolean\n  //   swapErrorMessage: string | undefined\n  //   txHash: string | undefined\n  // }>({\n  //   showConfirm: false,\n  //   tradeToConfirm: undefined,\n  //   attemptingTxn: false,\n  //   swapErrorMessage: undefined,\n  //   txHash: undefined\n  // })\n\n  // const formattedAmounts = {\n  //   [independentField]: typedValue,\n  //   [dependentField]: showWrap\n  //     ? parsedAmounts[independentField]?.toExact() ?? ''\n  //     : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\n  // }\n\n  // const route = trade?.route\n  // const userHasSpecifiedInputOutput = Boolean(\n  //   currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  // )\n  // const noRoute = !route\n\n  // // check whether the user has approved the router on the input token\n  // const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\n\n  // // check if user has gone through approval process, used to show two step buttons, reset on token change\n  // const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // // mark when a user has submitted an approval, reset onTokenSelection for input field\n  // useEffect(() => {\n  //   if (approval === ApprovalState.PENDING) {\n  //     setApprovalSubmitted(true)\n  //   }\n  // }, [approval, approvalSubmitted])\n\n  // const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  // const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\n\n  // // the callback to execute the swap\n  // const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\n  //   trade,\n  //   allowedSlippage,\n  //   deadline,\n  //   recipient\n  // )\n\n  // const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\n\n  // const handleSwap = useCallback(() => {\n  //   if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n  //     return\n  //   }\n  //   if (!swapCallback) {\n  //     return\n  //   }\n  //   setSwapState({ attemptingTxn: true, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: undefined })\n  //   swapCallback()\n  //     .then(hash => {\n  //       setSwapState({ attemptingTxn: false, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: hash })\n\n  //       ReactGA.event({\n  //         category: 'Swap',\n  //         action:\n  //           recipient === null\n  //             ? 'Swap w/o Send'\n  //             : (recipientAddress ?? recipient) === account\n  //             ? 'Swap w/o Send + recipient'\n  //             : 'Swap w/ Send',\n  //         label: [\n  //           trade?.inputAmount?.currency?.symbol,\n  //           trade?.outputAmount?.currency?.symbol,\n  //           getTradeVersion(trade)\n  //         ].join('/')\n  //       })\n  //     })\n  //     .catch(error => {\n  //       setSwapState({\n  //         attemptingTxn: false,\n  //         tradeToConfirm,\n  //         showConfirm,\n  //         swapErrorMessage: error.message,\n  //         txHash: undefined\n  //       })\n  //     })\n  // }, [tradeToConfirm, account, priceImpactWithoutFee, recipient, recipientAddress, showConfirm, swapCallback, trade])\n\n  // // errors\n  // const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  // // warnings on slippage\n  // const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  // // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // // never show if price impact is above threshold in non expert mode\n  // const showApproveFlow =\n  //   !swapInputError &&\n  //   (approval === ApprovalState.NOT_APPROVED ||\n  //     approval === ApprovalState.PENDING ||\n  //     (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n  //   !(priceImpactSeverity > 3 && !isExpertMode)\n\n  // const handleConfirmDismiss = useCallback(() => {\n  //   setSwapState({ showConfirm: false, tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\n  //   // if there was a tx hash, we want to clear the input\n  //   if (txHash) {\n  //     onUserInput(Field.INPUT, '')\n  //   }\n  // }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\n\n  // const handleAcceptChanges = useCallback(() => {\n  //   setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn, showConfirm })\n  // }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash])\n\n  // const handleInputSelect = useCallback(\n  //   inputCurrency => {\n  //     setApprovalSubmitted(false) // reset 2 step UI for approvals\n  //     onCurrencySelection(Field.INPUT, inputCurrency)\n  //   },\n  //   [onCurrencySelection]\n  // )\n\n  // const handleMaxInput = useCallback(() => {\n  //   maxAmountInput && onUserInput(Field.INPUT, maxAmountInput.toExact())\n  // }, [maxAmountInput, onUserInput])\n\n  // const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [\n  //   onCurrencySelection\n  // ])\n  \n  return (\n    <>\n      {/* <TokenWarningModal\n        isOpen={urlLoadedTokens.length > 0 && !dismissTokenWarning}\n        tokens={urlLoadedTokens}\n        onConfirm={handleConfirmTokenWarning}\n      /> */}\n      <AppBody>\n        {/* <SwapPoolTabs active={'swap'} /> */}\n        <Wrapper id=\"swap-page\">\n          {/* <ConfirmSwapModal\n            isOpen={showConfirm}\n            trade={trade}\n            originalTrade={tradeToConfirm}\n            onAcceptChanges={handleAcceptChanges}\n            attemptingTxn={attemptingTxn}\n            txHash={txHash}\n            recipient={recipient}\n            allowedSlippage={allowedSlippage}\n            onConfirm={handleSwap}\n            swapErrorMessage={swapErrorMessage}\n            onDismiss={handleConfirmDismiss}\n          />\n\n          <AutoColumn gap={'md'}>\n            <CurrencyInputPanel\n              label={independentField === Field.OUTPUT && !showWrap && trade ? 'From (estimated)' : 'From'}\n              value={formattedAmounts[Field.INPUT]}\n              showMaxButton={!atMaxAmountInput}\n              currency={currencies[Field.INPUT]}\n              onUserInput={handleTypeInput}\n              onMax={handleMaxInput}\n              onCurrencySelect={handleInputSelect}\n              otherCurrency={currencies[Field.OUTPUT]}\n              id=\"swap-currency-input\"\n            />\n            <AutoColumn justify=\"space-between\">\n              <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\n                <ArrowWrapper clickable>\n                  <ArrowDown\n                    size=\"16\"\n                    onClick={() => {\n                      setApprovalSubmitted(false) // reset 2 step UI for approvals\n                      onSwitchTokens()\n                    }}\n                    color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2}\n                  />\n                </ArrowWrapper>\n                {recipient === null && !showWrap && isExpertMode ? (\n                  <LinkStyledButton id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\n                    + Add a send (optional)\n                  </LinkStyledButton>\n                ) : null}\n              </AutoRow>\n            </AutoColumn>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.OUTPUT]}\n              onUserInput={handleTypeOutput}\n              label={independentField === Field.INPUT && !showWrap && trade ? 'To (estimated)' : 'To'}\n              showMaxButton={false}\n              currency={currencies[Field.OUTPUT]}\n              onCurrencySelect={handleOutputSelect}\n              otherCurrency={currencies[Field.INPUT]}\n              id=\"swap-currency-output\"\n            />\n\n            {recipient !== null && !showWrap ? (\n              <>\n                <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                  <ArrowWrapper clickable={false}>\n                    <ArrowDown size=\"16\" color={theme.text2} />\n                  </ArrowWrapper>\n                  <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\n                    - Remove send\n                  </LinkStyledButton>\n                </AutoRow>\n                <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n              </>\n            ) : null}\n\n            {showWrap ? null : (\n              <Card padding={'.25rem .75rem 0 .75rem'} borderRadius={'20px'}>\n                <AutoColumn gap=\"4px\">\n                  {Boolean(trade) && (\n                    <RowBetween align=\"center\">\n                      <Text fontWeight={500} fontSize={14} color={theme.text2}>\n                        Price\n                      </Text>\n                      <TradePrice\n                        price={trade?.executionPrice}\n                        showInverted={showInverted}\n                        setShowInverted={setShowInverted}\n                      />\n                    </RowBetween>\n                  )}\n                  {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\n                    <RowBetween align=\"center\">\n                      <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\n                        Slippage Tolerance\n                      </ClickableText>\n                      <ClickableText fontWeight={500} fontSize={14} color={theme.text2} onClick={toggleSettings}>\n                        {allowedSlippage / 100}%\n                      </ClickableText>\n                    </RowBetween>\n                  )}\n                </AutoColumn>\n              </Card>\n            )}\n          </AutoColumn>\n          <BottomGrouping>\n            {!account ? (\n              <ButtonLight onClick={toggleWalletModal}>Connect Wallet</ButtonLight>\n            ) : showWrap ? (\n              <ButtonPrimary disabled={Boolean(wrapInputError)} onClick={onWrap}>\n                {wrapInputError ??\n                  (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\n              </ButtonPrimary>\n            ) : noRoute && userHasSpecifiedInputOutput ? (\n              <GreyCard style={{ textAlign: 'center' }}>\n                <TYPE.main mb=\"4px\">Insufficient liquidity for this trade.</TYPE.main>\n              </GreyCard>\n            ) : showApproveFlow ? (\n              <RowBetween>\n                <ButtonConfirmed\n                  onClick={approveCallback}\n                  disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n                  width=\"48%\"\n                  altDisabledStyle={approval === ApprovalState.PENDING} // show solid button while waiting\n                  confirmed={approval === ApprovalState.APPROVED}\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <AutoRow gap=\"6px\" justify=\"center\">\n                      Approving <Loader stroke=\"white\" />\n                    </AutoRow>\n                  ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n                    'Approved'\n                  ) : (\n                    'Approve ' + currencies[Field.INPUT]?.symbol\n                  )}\n                </ButtonConfirmed>\n                <ButtonError\n                  onClick={() => {\n                    if (isExpertMode) {\n                      handleSwap()\n                    } else {\n                      setSwapState({\n                        tradeToConfirm: trade,\n                        attemptingTxn: false,\n                        swapErrorMessage: undefined,\n                        showConfirm: true,\n                        txHash: undefined\n                      })\n                    }\n                  }}\n                  width=\"48%\"\n                  id=\"swap-button\"\n                  disabled={\n                    !isValid || approval !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !isExpertMode)\n                  }\n                  error={isValid && priceImpactSeverity > 2}\n                >\n                  <Text fontSize={16} fontWeight={500}>\n                    {priceImpactSeverity > 3 && !isExpertMode\n                      ? `Price Impact High`\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                  </Text>\n                </ButtonError>\n              </RowBetween>\n            ) : (\n              <ButtonError\n                onClick={() => {\n                  if (isExpertMode) {\n                    handleSwap()\n                  } else {\n                    setSwapState({\n                      tradeToConfirm: trade,\n                      attemptingTxn: false,\n                      swapErrorMessage: undefined,\n                      showConfirm: true,\n                      txHash: undefined\n                    })\n                  }\n                }}\n                id=\"swap-button\"\n                disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError}\n                error={isValid && priceImpactSeverity > 2 && !swapCallbackError}\n              >\n                <Text fontSize={20} fontWeight={500}>\n                  {swapInputError\n                    ? swapInputError\n                    : priceImpactSeverity > 3 && !isExpertMode\n                    ? `Price Impact Too High`\n                    : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                </Text>\n              </ButtonError>\n            )}\n            {showApproveFlow && <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />}\n            {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n            {betterTradeLinkVersion && <BetterTradeLink version={betterTradeLinkVersion} />}\n          </BottomGrouping> */}\n        </Wrapper>\n      </AppBody>\n      {/* <AdvancedSwapDetailsDropdown trade={trade} /> */}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}