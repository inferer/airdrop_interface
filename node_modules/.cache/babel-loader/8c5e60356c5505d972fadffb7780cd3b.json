{"ast":null,"code":"import { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nexport default function Updater() {\n  const {\n    library\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const lists = useSelector(state => state.lists.byUrl);\n  console.log(lists, 2222222);\n  const isWindowVisible = useIsWindowVisible();\n  const fetchList = useFetchListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(lists).forEach(url => fetchList(url).catch(error => console.debug('interval list fetching error', error)));\n  }, [fetchList, isWindowVisible, lists]); // fetch all lists every 10 minutes, but only after we initialize library\n  // useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\n  // whenever a list is not loaded and not loading, try again to load it\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]); // automatically update lists if versions are minor/patch\n  // useEffect(() => {\n  //   Object.keys(lists).forEach(listUrl => {\n  //     const list = lists[listUrl]\n  //     if (list.current && list.pendingUpdate) {\n  //       const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n  //       switch (bump) {\n  //         case VersionUpgrade.NONE:\n  //           throw new Error('unexpected no version bump')\n  //         case VersionUpgrade.PATCH:\n  //         case VersionUpgrade.MINOR:\n  //           const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n  //           // automatically update minor/patch as long as bump matches the min update\n  //           if (bump >= min) {\n  //             dispatch(acceptListUpdate(listUrl))\n  //             dispatch(\n  //               addPopup({\n  //                 key: listUrl,\n  //                 content: {\n  //                   listUpdate: {\n  //                     listUrl,\n  //                     oldList: list.current,\n  //                     newList: list.pendingUpdate,\n  //                     auto: true\n  //                   }\n  //                 }\n  //               })\n  //             )\n  //           } else {\n  //             console.error(\n  //               `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n  //             )\n  //           }\n  //           break\n  //         case VersionUpgrade.MAJOR:\n  //           dispatch(\n  //             addPopup({\n  //               key: listUrl,\n  //               content: {\n  //                 listUpdate: {\n  //                   listUrl,\n  //                   auto: false,\n  //                   oldList: list.current,\n  //                   newList: list.pendingUpdate\n  //                 }\n  //               },\n  //               removeAfterMs: null\n  //             })\n  //           )\n  //       }\n  //     }\n  //   })\n  // }, [dispatch, lists])\n\n  return null;\n}","map":{"version":3,"sources":["/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/state/lists/updater.ts"],"names":["useCallback","useEffect","useDispatch","useSelector","useActiveWeb3React","useFetchListCallback","useIsWindowVisible","Updater","library","dispatch","lists","state","byUrl","console","log","isWindowVisible","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","debug","listUrl","list","current","loadingRequestId"],"mappings":"AACA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,oBAAT,QAAqC,kCAArC;AAEA,OAAOC,kBAAP,MAA+B,gCAA/B;AAKA,eAAe,SAASC,OAAT,GAAyB;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,kBAAkB,EAAtC;AACA,QAAMK,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,KAAK,GAAGP,WAAW,CAAuCQ,KAAK,IAAIA,KAAK,CAACD,KAAN,CAAYE,KAA5D,CAAzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmB,OAAnB;AACA,QAAMK,eAAe,GAAGT,kBAAkB,EAA1C;AAEA,QAAMU,SAAS,GAAGX,oBAAoB,EAAtC;AAEA,QAAMY,qBAAqB,GAAGjB,WAAW,CAAC,MAAM;AAC9C,QAAI,CAACe,eAAL,EAAsB;AACtBG,IAAAA,MAAM,CAACC,IAAP,CAAYT,KAAZ,EAAmBU,OAAnB,CAA2BC,GAAG,IAC5BL,SAAS,CAACK,GAAD,CAAT,CAAeC,KAAf,CAAqBC,KAAK,IAAIV,OAAO,CAACW,KAAR,CAAc,8BAAd,EAA8CD,KAA9C,CAA9B,CADF;AAGD,GALwC,EAKtC,CAACP,SAAD,EAAYD,eAAZ,EAA6BL,KAA7B,CALsC,CAAzC,CATsC,CAgBtC;AACA;AAEA;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,MAAM,CAACC,IAAP,CAAYT,KAAZ,EAAmBU,OAAnB,CAA2BK,OAAO,IAAI;AACpC,YAAMC,IAAI,GAAGhB,KAAK,CAACe,OAAD,CAAlB;;AAEA,UAAI,CAACC,IAAI,CAACC,OAAN,IAAiB,CAACD,IAAI,CAACE,gBAAvB,IAA2C,CAACF,IAAI,CAACH,KAArD,EAA4D;AAC1DP,QAAAA,SAAS,CAACS,OAAD,CAAT,CAAmBH,KAAnB,CAAyBC,KAAK,IAAIV,OAAO,CAACW,KAAR,CAAc,2BAAd,EAA2CD,KAA3C,CAAlC;AACD;AACF,KAND;AAOD,GARQ,EAQN,CAACd,QAAD,EAAWO,SAAX,EAAsBR,OAAtB,EAA+BE,KAA/B,CARM,CAAT,CApBsC,CA8BtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO,IAAP;AACD","sourcesContent":["import { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { addPopup } from '../application/actions'\nimport { AppDispatch, AppState } from '../index'\nimport { acceptListUpdate } from './actions'\n\nexport default function Updater(): null {\n  const { library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const lists = useSelector<AppState, AppState['lists']['byUrl']>(state => state.lists.byUrl)\n  console.log(lists, 2222222)\n  const isWindowVisible = useIsWindowVisible()\n\n  const fetchList = useFetchListCallback()\n\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach(url =>\n      fetchList(url).catch(error => console.debug('interval list fetching error', error))\n    )\n  }, [fetchList, isWindowVisible, lists])\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  // useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // automatically update lists if versions are minor/patch\n  // useEffect(() => {\n  //   Object.keys(lists).forEach(listUrl => {\n  //     const list = lists[listUrl]\n  //     if (list.current && list.pendingUpdate) {\n  //       const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n  //       switch (bump) {\n  //         case VersionUpgrade.NONE:\n  //           throw new Error('unexpected no version bump')\n  //         case VersionUpgrade.PATCH:\n  //         case VersionUpgrade.MINOR:\n  //           const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n  //           // automatically update minor/patch as long as bump matches the min update\n  //           if (bump >= min) {\n  //             dispatch(acceptListUpdate(listUrl))\n  //             dispatch(\n  //               addPopup({\n  //                 key: listUrl,\n  //                 content: {\n  //                   listUpdate: {\n  //                     listUrl,\n  //                     oldList: list.current,\n  //                     newList: list.pendingUpdate,\n  //                     auto: true\n  //                   }\n  //                 }\n  //               })\n  //             )\n  //           } else {\n  //             console.error(\n  //               `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n  //             )\n  //           }\n  //           break\n\n  //         case VersionUpgrade.MAJOR:\n  //           dispatch(\n  //             addPopup({\n  //               key: listUrl,\n  //               content: {\n  //                 listUpdate: {\n  //                   listUrl,\n  //                   auto: false,\n  //                   oldList: list.current,\n  //                   newList: list.pendingUpdate\n  //                 }\n  //               },\n  //               removeAfterMs: null\n  //             })\n  //           )\n  //       }\n  //     }\n  //   })\n  // }, [dispatch, lists])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}