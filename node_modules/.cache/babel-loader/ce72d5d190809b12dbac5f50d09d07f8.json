{"ast":null,"code":"import _toConsumableArray from\"/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _taggedTemplateLiteral from\"/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  width: \",\";\\n  height: \",\";\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  width: \",\";\\n  height: \",\";\\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\\n  border-radius: 24px;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import{ETHER,Token}from'@uniswap/sdk';import React,{useMemo}from'react';import styled from'styled-components';import EthereumLogo from'../../assets/images/ethereum-logo.png';import useHttpLocations from'../../hooks/useHttpLocations';import{WrappedTokenInfo}from'../../state/lists/hooks';import Logo from'../Logo';var getTokenLogoURL=function getTokenLogoURL(address){return\"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/\".concat(address,\"/logo.png\");};var getTokenLogoURL2=function getTokenLogoURL2(currency){if(currency.symbol==='WETH')return EthereumLogo;var logoName=currency.symbol.toLowerCase();if(currency.symbol.indexOf('air-')===0){logoName=currency.symbol.slice(4).toLowerCase();}return\"/images/tokens/\".concat(logoName,\".png\");};var StyledEthereumLogo=styled.img(_templateObject(),function(_ref){var size=_ref.size;return size;},function(_ref2){var size=_ref2.size;return size;});var StyledLogo=styled(Logo)(_templateObject2(),function(_ref3){var size=_ref3.size;return size;},function(_ref4){var size=_ref4.size;return size;});export default function CurrencyLogo(_ref5){var _currency$symbol;var currency=_ref5.currency,_ref5$size=_ref5.size,size=_ref5$size===void 0?'24px':_ref5$size,style=_ref5.style;var uriLocations=useHttpLocations(currency instanceof WrappedTokenInfo?currency.logoURI:undefined);var srcs=useMemo(function(){if(currency===ETHER)return[];if(currency instanceof Token){if(currency instanceof WrappedTokenInfo){return[].concat(_toConsumableArray(uriLocations),[getTokenLogoURL2(currency)]);}return[getTokenLogoURL2(currency)];}return[];},[currency,uriLocations]);if(currency===ETHER){return/*#__PURE__*/React.createElement(StyledEthereumLogo,{src:EthereumLogo,size:size,style:style});}return/*#__PURE__*/React.createElement(StyledLogo,{size:size,srcs:srcs,alt:\"\".concat((_currency$symbol=currency===null||currency===void 0?void 0:currency.symbol)!==null&&_currency$symbol!==void 0?_currency$symbol:'token',\" logo\"),style:style});}","map":{"version":3,"sources":["/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/components/CurrencyLogo/index.tsx"],"names":["ETHER","Token","React","useMemo","styled","EthereumLogo","useHttpLocations","WrappedTokenInfo","Logo","getTokenLogoURL","address","getTokenLogoURL2","currency","symbol","logoName","toLowerCase","indexOf","slice","StyledEthereumLogo","img","size","StyledLogo","CurrencyLogo","style","uriLocations","logoURI","undefined","srcs"],"mappings":"yyBAAA,OAAmBA,KAAnB,CAA0BC,KAA1B,KAAuC,cAAvC,CACA,MAAOC,CAAAA,KAAP,EAAgBC,OAAhB,KAA+B,OAA/B,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CAEA,MAAOC,CAAAA,YAAP,KAAyB,uCAAzB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,8BAA7B,CACA,OAASC,gBAAT,KAAiC,yBAAjC,CACA,MAAOC,CAAAA,IAAP,KAAiB,SAAjB,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,OAAD,0GACqEA,OADrE,eAAxB,CAGA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,QAAD,CAAmB,CAC1C,GAAIA,QAAQ,CAACC,MAAT,GAAoB,MAAxB,CAAgC,MAAOR,CAAAA,YAAP,CAChC,GAAIS,CAAAA,QAAQ,CAAGF,QAAQ,CAACC,MAAT,CAAgBE,WAAhB,EAAf,CACA,GAAIH,QAAQ,CAACC,MAAT,CAAgBG,OAAhB,CAAwB,MAAxB,IAAoC,CAAxC,CAA2C,CACzCF,QAAQ,CAAGF,QAAQ,CAACC,MAAT,CAAgBI,KAAhB,CAAsB,CAAtB,EAAyBF,WAAzB,EAAX,CACD,CACD,+BAAyBD,QAAzB,SACD,CAPD,CASA,GAAMI,CAAAA,kBAAkB,CAAGd,MAAM,CAACe,GAAV,mBACb,kBAAGC,CAAAA,IAAH,MAAGA,IAAH,OAAcA,CAAAA,IAAd,EADa,CAEZ,mBAAGA,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EAFY,CAAxB,CAOA,GAAMC,CAAAA,UAAU,CAAGjB,MAAM,CAACI,IAAD,CAAT,oBACL,mBAAGY,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EADK,CAEJ,mBAAGA,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EAFI,CAAhB,CAKA,cAAe,SAASE,CAAAA,YAAT,OAQZ,yBAPDV,CAAAA,QAOC,OAPDA,QAOC,kBANDQ,IAMC,CANDA,IAMC,qBANM,MAMN,YALDG,KAKC,OALDA,KAKC,CACD,GAAMC,CAAAA,YAAY,CAAGlB,gBAAgB,CAACM,QAAQ,WAAYL,CAAAA,gBAApB,CAAuCK,QAAQ,CAACa,OAAhD,CAA0DC,SAA3D,CAArC,CAEA,GAAMC,CAAAA,IAAc,CAAGxB,OAAO,CAAC,UAAM,CACnC,GAAIS,QAAQ,GAAKZ,KAAjB,CAAwB,MAAO,EAAP,CAExB,GAAIY,QAAQ,WAAYX,CAAAA,KAAxB,CAA+B,CAC7B,GAAIW,QAAQ,WAAYL,CAAAA,gBAAxB,CAA0C,CACxC,mCAAWiB,YAAX,GAAyBb,gBAAgB,CAACC,QAAD,CAAzC,GACD,CAED,MAAO,CAACD,gBAAgB,CAACC,QAAD,CAAjB,CAAP,CACD,CACD,MAAO,EAAP,CACD,CAX6B,CAW3B,CAACA,QAAD,CAAWY,YAAX,CAX2B,CAA9B,CAaA,GAAIZ,QAAQ,GAAKZ,KAAjB,CAAwB,CACtB,mBAAO,oBAAC,kBAAD,EAAoB,GAAG,CAAEK,YAAzB,CAAuC,IAAI,CAAEe,IAA7C,CAAmD,KAAK,CAAEG,KAA1D,EAAP,CACD,CAED,mBAAO,oBAAC,UAAD,EAAY,IAAI,CAAEH,IAAlB,CAAwB,IAAI,CAAEO,IAA9B,CAAoC,GAAG,6BAAKf,QAAL,SAAKA,QAAL,iBAAKA,QAAQ,CAAEC,MAAf,qDAAyB,OAAzB,SAAvC,CAAgF,KAAK,CAAEU,KAAvF,EAAP,CACD","sourcesContent":["import { Currency, ETHER, Token } from '@uniswap/sdk'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport EthereumLogo from '../../assets/images/ethereum-logo.png'\nimport useHttpLocations from '../../hooks/useHttpLocations'\nimport { WrappedTokenInfo } from '../../state/lists/hooks'\nimport Logo from '../Logo'\n\nconst getTokenLogoURL = (address: string) =>\n  `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${address}/logo.png`\n\nconst getTokenLogoURL2 = (currency: any) => {\n  if (currency.symbol === 'WETH') return EthereumLogo\n  let logoName = currency.symbol.toLowerCase()\n  if (currency.symbol.indexOf('air-') === 0) {\n    logoName = currency.symbol.slice(4).toLowerCase()\n  }\n  return `/images/tokens/${logoName}.png`\n}\n\nconst StyledEthereumLogo = styled.img<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  border-radius: 24px;\n`\n\nconst StyledLogo = styled(Logo)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`\n\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style\n}: {\n  currency?: Currency\n  size?: string\n  style?: React.CSSProperties\n}) {\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined)\n\n  const srcs: string[] = useMemo(() => {\n    if (currency === ETHER) return []\n\n    if (currency instanceof Token) {\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, getTokenLogoURL2(currency)]\n      }\n\n      return [getTokenLogoURL2(currency)]\n    }\n    return []\n  }, [currency, uriLocations])\n\n  if (currency === ETHER) {\n    return <StyledEthereumLogo src={EthereumLogo} size={size} style={style} />\n  }\n\n  return <StyledLogo size={size} srcs={srcs} alt={`${currency?.symbol ?? 'token'} logo`} style={style} />\n}\n"]},"metadata":{},"sourceType":"module"}