{"ast":null,"code":"import _objectSpread from\"/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{NETWORK_CHAIN_ID}from'../connectors';import{ST_TOKEN_LIST,AIR_TOKEN_LIST,AIRLABEL_TOKEN_LIST}from'../constants/tokenList';import{AIRLABEL_TOKEN_LIST_URL,AIR_TOKEN_LIST_URL}from'../constants/lists';/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */export default function getTokenList(_x,_x2){return _getTokenList.apply(this,arguments);}function _getTokenList(){_getTokenList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(listUrl,resolveENSContentHash){var response,json;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch('/tokens/tokenlist.json');case 3:response=_context.sent;if(!response.ok){}_context.next=7;return response.json();case 7:json=_context.sent;return _context.abrupt(\"return\",json);case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);console.debug('Failed to fetch list',listUrl,_context.t0);case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,11]]);}));return _getTokenList.apply(this,arguments);}var template={\"name\":\"\",\"timestamp\":\"\",\"version\":{\"major\":1},\"tags\":{},\"logoURI\":\"\",\"keywords\":[],\"tokens\":[]};export function filterTokenByChainId(tokens){return tokens.filter(function(token){return token.chainId===NETWORK_CHAIN_ID;});}export function getTokenListLocal(_x3){return _getTokenListLocal.apply(this,arguments);}function _getTokenListLocal(){_getTokenListLocal=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(listUrl){var tokens;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:tokens={};if(listUrl===AIR_TOKEN_LIST_URL){tokens=filterTokenByChainId(AIR_TOKEN_LIST);}else if(listUrl===AIRLABEL_TOKEN_LIST_URL){tokens=filterTokenByChainId(AIRLABEL_TOKEN_LIST);}else{tokens=filterTokenByChainId(ST_TOKEN_LIST);}return _context2.abrupt(\"return\",_objectSpread(_objectSpread({},template),{},{name:listUrl,timestamp:new Date().toLocaleString(),tokens:tokens}));case 3:case\"end\":return _context2.stop();}}},_callee2);}));return _getTokenListLocal.apply(this,arguments);}","map":{"version":3,"sources":["/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/utils/getTokenList.ts"],"names":["NETWORK_CHAIN_ID","ST_TOKEN_LIST","AIR_TOKEN_LIST","AIRLABEL_TOKEN_LIST","AIRLABEL_TOKEN_LIST_URL","AIR_TOKEN_LIST_URL","getTokenList","listUrl","resolveENSContentHash","fetch","response","ok","json","console","debug","template","filterTokenByChainId","tokens","filter","token","chainId","getTokenListLocal","name","timestamp","Date","toLocaleString"],"mappings":"0iBAEA,OAASA,gBAAT,KAAiC,eAAjC,CACA,OAASC,aAAT,CAAwBC,cAAxB,CAAwCC,mBAAxC,KAAmE,wBAAnE,CACA,OAASC,uBAAT,CAAkCC,kBAAlC,KAA4D,oBAA5D,CAEA;;;;GAKA,uBAA8BC,CAAAA,YAA9B,qD,+FAAe,iBACbC,OADa,CAEbC,qBAFa,0KAMQC,CAAAA,KAAK,CAAC,wBAAD,CANb,QAMTC,QANS,eAOT,GAAI,CAACA,QAAQ,CAACC,EAAd,CAAkB,CAEjB,CATQ,sBAUUD,CAAAA,QAAQ,CAACE,IAAT,EAVV,QAUHA,IAVG,+CAWFA,IAXE,4DAaTC,OAAO,CAACC,KAAR,CAAc,sBAAd,CAAsCP,OAAtC,cAbS,qE,+CAkBf,GAAMQ,CAAAA,QAAQ,CAAG,CACf,OAAQ,EADO,CAEf,YAAa,EAFE,CAGf,UAAW,CACT,QAAS,CADA,CAHI,CAMf,OAAQ,EANO,CAOf,UAAW,EAPI,CAQf,WAAY,EARG,CAUf,SAAU,EAVK,CAAjB,CAaA,MAAO,SAASC,CAAAA,oBAAT,CAA8BC,MAA9B,CAAmD,CACxD,MAAOA,CAAAA,MAAM,CAACC,MAAP,CAAc,SAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,OAAN,GAAkBpB,gBAAtB,EAAnB,CAAP,CACD,CAED,eAAsBqB,CAAAA,iBAAtB,uD,yGAAO,kBACLd,OADK,iIAGDU,MAHC,CAGQ,EAHR,CAIL,GAAIV,OAAO,GAAKF,kBAAhB,CAAoC,CAClCY,MAAM,CAAGD,oBAAoB,CAACd,cAAD,CAA7B,CACD,CAFD,IAEO,IAAIK,OAAO,GAAKH,uBAAhB,CAAyC,CAC9Ca,MAAM,CAAGD,oBAAoB,CAACb,mBAAD,CAA7B,CACD,CAFM,IAEA,CACLc,MAAM,CAAGD,oBAAoB,CAACf,aAAD,CAA7B,CACD,CAVI,gEAaAc,QAbA,MAcHO,IAAI,CAAEf,OAdH,CAeHgB,SAAS,CAAE,GAAIC,CAAAA,IAAJ,GAAWC,cAAX,EAfR,CAgBHR,MAAM,CAAEA,MAhBL,4D","sourcesContent":["import { TokenList, TokenInfo } from '@uniswap/token-lists'\n\nimport { NETWORK_CHAIN_ID } from '../connectors'\nimport { ST_TOKEN_LIST, AIR_TOKEN_LIST, AIRLABEL_TOKEN_LIST } from '../constants/tokenList'\nimport { AIRLABEL_TOKEN_LIST_URL, AIR_TOKEN_LIST_URL } from '../constants/lists'\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getTokenList(\n  listUrl: string,\n  resolveENSContentHash?: (ensName: string) => Promise<string>\n): Promise<any> {\n  let response\n    try {\n      response = await fetch('/tokens/tokenlist.json')\n      if (!response.ok) {\n      \n      }\n      const json = await response.json()\n      return json as TokenList\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error)\n      \n    }\n}\n\nconst template = {\n  \"name\": \"\",\n  \"timestamp\": \"\",\n  \"version\": {\n    \"major\": 1\n  },\n  \"tags\": {},\n  \"logoURI\": \"\",\n  \"keywords\": [\n  ],\n  \"tokens\": [ ]\n}\n\nexport function filterTokenByChainId(tokens: TokenInfo[]) {\n  return tokens.filter(token => token.chainId === NETWORK_CHAIN_ID)\n}\n\nexport async function getTokenListLocal(\n  listUrl: string,\n): Promise<any> {\n  let tokens = {}\n  if (listUrl === AIR_TOKEN_LIST_URL) {\n    tokens = filterTokenByChainId(AIR_TOKEN_LIST)\n  } else if (listUrl === AIRLABEL_TOKEN_LIST_URL) {\n    tokens = filterTokenByChainId(AIRLABEL_TOKEN_LIST)\n  } else {\n    tokens = filterTokenByChainId(ST_TOKEN_LIST)\n  }\n\n  return {\n    ...template,\n    name: listUrl,\n    timestamp: new Date().toLocaleString(),\n    tokens: tokens\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module"}