{"ast":null,"code":"import _defineProperty from\"/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createReducer}from'@reduxjs/toolkit';import{getVersionUpgrade,VersionUpgrade}from'@uniswap/token-lists';import{AIR_TOKEN_LIST_URL,DEFAULT_LIST_OF_LISTS}from'../../constants/lists';import{updateVersion}from'../global/actions';import{acceptListUpdate,addList,fetchTokenList,removeList,selectList}from'./actions';var NEW_LIST_STATE={error:null,current:null,loadingRequestId:null,pendingUpdate:null};var initialState={lastInitializedDefaultListOfLists:DEFAULT_LIST_OF_LISTS,byUrl:_objectSpread(_objectSpread({},DEFAULT_LIST_OF_LISTS.reduce(function(memo,listUrl){memo[listUrl]=NEW_LIST_STATE;return memo;},{})),{},_defineProperty({},AIR_TOKEN_LIST_URL,{error:null,current:null,loadingRequestId:null,pendingUpdate:null})),selectedListUrl:AIR_TOKEN_LIST_URL};export default createReducer(initialState,function(builder){return builder.addCase(fetchTokenList.pending,function(state,_ref){var _ref$payload=_ref.payload,requestId=_ref$payload.requestId,url=_ref$payload.url;state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{loadingRequestId:requestId,error:null});}).addCase(fetchTokenList.fulfilled,function(state,_ref2){var _state$byUrl$url,_state$byUrl$url2;var _ref2$payload=_ref2.payload,requestId=_ref2$payload.requestId,tokenList=_ref2$payload.tokenList,url=_ref2$payload.url;var current=(_state$byUrl$url=state.byUrl[url])===null||_state$byUrl$url===void 0?void 0:_state$byUrl$url.current;var loadingRequestId=(_state$byUrl$url2=state.byUrl[url])===null||_state$byUrl$url2===void 0?void 0:_state$byUrl$url2.loadingRequestId;console.log(tokenList,url);// no-op if update does nothing\nif(current){var upgradeType=getVersionUpgrade(current.version,tokenList.version);if(upgradeType===VersionUpgrade.NONE)return;if(loadingRequestId===null||loadingRequestId===requestId){state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{loadingRequestId:null,error:null,current:current,pendingUpdate:tokenList});}}else{state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{loadingRequestId:null,error:null,current:tokenList,pendingUpdate:null});}}).addCase(fetchTokenList.rejected,function(state,_ref3){var _state$byUrl$url3;var _ref3$payload=_ref3.payload,url=_ref3$payload.url,requestId=_ref3$payload.requestId,errorMessage=_ref3$payload.errorMessage;if(((_state$byUrl$url3=state.byUrl[url])===null||_state$byUrl$url3===void 0?void 0:_state$byUrl$url3.loadingRequestId)!==requestId){// no-op since it's not the latest request\nreturn;}state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{loadingRequestId:null,error:errorMessage,current:null,pendingUpdate:null});}).addCase(selectList,function(state,_ref4){var url=_ref4.payload;state.selectedListUrl=url;// automatically adds list\nif(!state.byUrl[url]){state.byUrl[url]=NEW_LIST_STATE;}}).addCase(addList,function(state,_ref5){var url=_ref5.payload;if(!state.byUrl[url]){state.byUrl[url]=NEW_LIST_STATE;}}).addCase(removeList,function(state,_ref6){var url=_ref6.payload;if(state.byUrl[url]){delete state.byUrl[url];}if(state.selectedListUrl===url){state.selectedListUrl=Object.keys(state.byUrl)[0];}}).addCase(acceptListUpdate,function(state,_ref7){var _state$byUrl$url4;var url=_ref7.payload;if(!((_state$byUrl$url4=state.byUrl[url])===null||_state$byUrl$url4===void 0?void 0:_state$byUrl$url4.pendingUpdate)){throw new Error('accept list update called without pending update');}state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{pendingUpdate:null,current:state.byUrl[url].pendingUpdate});}).addCase(updateVersion,function(state){// state loaded from localStorage, but new lists have never been initialized\nif(!state.lastInitializedDefaultListOfLists){state.byUrl=initialState.byUrl;state.selectedListUrl=undefined;}else if(state.lastInitializedDefaultListOfLists){var lastInitializedSet=state.lastInitializedDefaultListOfLists.reduce(function(s,l){return s.add(l);},new Set());var newListOfListsSet=DEFAULT_LIST_OF_LISTS.reduce(function(s,l){return s.add(l);},new Set());DEFAULT_LIST_OF_LISTS.forEach(function(listUrl){if(!lastInitializedSet.has(listUrl)){state.byUrl[listUrl]=NEW_LIST_STATE;}});state.lastInitializedDefaultListOfLists.forEach(function(listUrl){if(!newListOfListsSet.has(listUrl)){delete state.byUrl[listUrl];}});}state.lastInitializedDefaultListOfLists=DEFAULT_LIST_OF_LISTS;});});","map":{"version":3,"sources":["/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/state/lists/reducer.ts"],"names":["createReducer","getVersionUpgrade","VersionUpgrade","AIR_TOKEN_LIST_URL","DEFAULT_LIST_OF_LISTS","updateVersion","acceptListUpdate","addList","fetchTokenList","removeList","selectList","NEW_LIST_STATE","error","current","loadingRequestId","pendingUpdate","initialState","lastInitializedDefaultListOfLists","byUrl","reduce","memo","listUrl","selectedListUrl","builder","addCase","pending","state","payload","requestId","url","fulfilled","tokenList","console","log","upgradeType","version","NONE","rejected","errorMessage","Object","keys","Error","undefined","lastInitializedSet","s","l","add","Set","newListOfListsSet","forEach","has"],"mappings":"qXAAA,OAASA,aAAT,KAA8B,kBAA9B,CACA,OAASC,iBAAT,CAA4BC,cAA5B,KAAkD,sBAAlD,CAEA,OAASC,kBAAT,CAA6BC,qBAA7B,KAAkF,uBAAlF,CACA,OAASC,aAAT,KAA8B,mBAA9B,CACA,OAASC,gBAAT,CAA2BC,OAA3B,CAAoCC,cAApC,CAAoDC,UAApD,CAAgEC,UAAhE,KAAkF,WAAlF,CAiBA,GAAMC,CAAAA,cAA2C,CAAG,CAClDC,KAAK,CAAE,IAD2C,CAElDC,OAAO,CAAE,IAFyC,CAGlDC,gBAAgB,CAAE,IAHgC,CAIlDC,aAAa,CAAE,IAJmC,CAApD,CASA,GAAMC,CAAAA,YAAwB,CAAG,CAC/BC,iCAAiC,CAAEb,qBADJ,CAE/Bc,KAAK,gCACAd,qBAAqB,CAACe,MAAtB,CAA2D,SAACC,IAAD,CAAOC,OAAP,CAAmB,CAC/ED,IAAI,CAACC,OAAD,CAAJ,CAAgBV,cAAhB,CACA,MAAOS,CAAAA,IAAP,CACD,CAHE,CAGA,EAHA,CADA,wBAKFjB,kBALE,CAKmB,CACpBS,KAAK,CAAE,IADa,CAEpBC,OAAO,CAAE,IAFW,CAGpBC,gBAAgB,CAAE,IAHE,CAIpBC,aAAa,CAAE,IAJK,CALnB,EAF0B,CAc/BO,eAAe,CAAEnB,kBAdc,CAAjC,CAiBA,cAAeH,CAAAA,aAAa,CAACgB,YAAD,CAAe,SAAAO,OAAO,QAChDA,CAAAA,OAAO,CACJC,OADH,CACWhB,cAAc,CAACiB,OAD1B,CACmC,SAACC,KAAD,MAA4C,uBAAlCC,OAAkC,CAAvBC,SAAuB,cAAvBA,SAAuB,CAAZC,GAAY,cAAZA,GAAY,CAC3EH,KAAK,CAACR,KAAN,CAAYW,GAAZ,iCACKH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CADL,MAEEf,gBAAgB,CAAEc,SAFpB,CAGEhB,KAAK,CAAE,IAHT,GAKD,CAPH,EAQGY,OARH,CAQWhB,cAAc,CAACsB,SAR1B,CAQqC,SAACJ,KAAD,OAAuD,gEAA7CC,OAA6C,CAAlCC,SAAkC,eAAlCA,SAAkC,CAAvBG,SAAuB,eAAvBA,SAAuB,CAAZF,GAAY,eAAZA,GAAY,CACxF,GAAMhB,CAAAA,OAAO,mBAAGa,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAH,2CAAG,iBAAkBhB,OAAlC,CACA,GAAMC,CAAAA,gBAAgB,oBAAGY,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAH,4CAAG,kBAAkBf,gBAA3C,CACAkB,OAAO,CAACC,GAAR,CAAYF,SAAZ,CAAuBF,GAAvB,EACA;AACA,GAAIhB,OAAJ,CAAa,CACX,GAAMqB,CAAAA,WAAW,CAAGjC,iBAAiB,CAACY,OAAO,CAACsB,OAAT,CAAkBJ,SAAS,CAACI,OAA5B,CAArC,CACA,GAAID,WAAW,GAAKhC,cAAc,CAACkC,IAAnC,CAAyC,OACzC,GAAItB,gBAAgB,GAAK,IAArB,EAA6BA,gBAAgB,GAAKc,SAAtD,CAAiE,CAC/DF,KAAK,CAACR,KAAN,CAAYW,GAAZ,iCACKH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CADL,MAEEf,gBAAgB,CAAE,IAFpB,CAGEF,KAAK,CAAE,IAHT,CAIEC,OAAO,CAAEA,OAJX,CAKEE,aAAa,CAAEgB,SALjB,GAOD,CACF,CAZD,IAYO,CACLL,KAAK,CAACR,KAAN,CAAYW,GAAZ,iCACKH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CADL,MAEEf,gBAAgB,CAAE,IAFpB,CAGEF,KAAK,CAAE,IAHT,CAIEC,OAAO,CAAEkB,SAJX,CAKEhB,aAAa,CAAE,IALjB,GAOD,CACF,CAlCH,EAmCGS,OAnCH,CAmCWhB,cAAc,CAAC6B,QAnC1B,CAmCoC,SAACX,KAAD,OAA0D,+CAAhDC,OAAgD,CAArCE,GAAqC,eAArCA,GAAqC,CAAhCD,SAAgC,eAAhCA,SAAgC,CAArBU,YAAqB,eAArBA,YAAqB,CAC1F,GAAI,oBAAAZ,KAAK,CAACR,KAAN,CAAYW,GAAZ,+DAAkBf,gBAAlB,IAAuCc,SAA3C,CAAsD,CACpD;AACA,OACD,CAEDF,KAAK,CAACR,KAAN,CAAYW,GAAZ,iCACKH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CADL,MAEEf,gBAAgB,CAAE,IAFpB,CAGEF,KAAK,CAAE0B,YAHT,CAIEzB,OAAO,CAAE,IAJX,CAKEE,aAAa,CAAE,IALjB,GAOD,CAhDH,EAiDGS,OAjDH,CAiDWd,UAjDX,CAiDuB,SAACgB,KAAD,OAA6B,IAAVG,CAAAA,GAAU,OAAnBF,OAAmB,CAChDD,KAAK,CAACJ,eAAN,CAAwBO,GAAxB,CACA;AACA,GAAI,CAACH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAL,CAAuB,CACrBH,KAAK,CAACR,KAAN,CAAYW,GAAZ,EAAmBlB,cAAnB,CACD,CACF,CAvDH,EAwDGa,OAxDH,CAwDWjB,OAxDX,CAwDoB,SAACmB,KAAD,OAA6B,IAAVG,CAAAA,GAAU,OAAnBF,OAAmB,CAC7C,GAAI,CAACD,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAL,CAAuB,CACrBH,KAAK,CAACR,KAAN,CAAYW,GAAZ,EAAmBlB,cAAnB,CACD,CACF,CA5DH,EA6DGa,OA7DH,CA6DWf,UA7DX,CA6DuB,SAACiB,KAAD,OAA6B,IAAVG,CAAAA,GAAU,OAAnBF,OAAmB,CAChD,GAAID,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAJ,CAAsB,CACpB,MAAOH,CAAAA,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAP,CACD,CACD,GAAIH,KAAK,CAACJ,eAAN,GAA0BO,GAA9B,CAAmC,CACjCH,KAAK,CAACJ,eAAN,CAAwBiB,MAAM,CAACC,IAAP,CAAYd,KAAK,CAACR,KAAlB,EAAyB,CAAzB,CAAxB,CACD,CACF,CApEH,EAqEGM,OArEH,CAqEWlB,gBArEX,CAqE6B,SAACoB,KAAD,OAA6B,0BAAVG,CAAAA,GAAU,OAAnBF,OAAmB,CACtD,GAAI,qBAACD,KAAK,CAACR,KAAN,CAAYW,GAAZ,CAAD,4CAAC,kBAAkBd,aAAnB,CAAJ,CAAsC,CACpC,KAAM,IAAI0B,CAAAA,KAAJ,CAAU,kDAAV,CAAN,CACD,CACDf,KAAK,CAACR,KAAN,CAAYW,GAAZ,iCACKH,KAAK,CAACR,KAAN,CAAYW,GAAZ,CADL,MAEEd,aAAa,CAAE,IAFjB,CAGEF,OAAO,CAAEa,KAAK,CAACR,KAAN,CAAYW,GAAZ,EAAiBd,aAH5B,GAKD,CA9EH,EA+EGS,OA/EH,CA+EWnB,aA/EX,CA+E0B,SAAAqB,KAAK,CAAI,CAC/B;AACA,GAAI,CAACA,KAAK,CAACT,iCAAX,CAA8C,CAC5CS,KAAK,CAACR,KAAN,CAAcF,YAAY,CAACE,KAA3B,CACAQ,KAAK,CAACJ,eAAN,CAAwBoB,SAAxB,CACD,CAHD,IAGO,IAAIhB,KAAK,CAACT,iCAAV,CAA6C,CAClD,GAAM0B,CAAAA,kBAAkB,CAAGjB,KAAK,CAACT,iCAAN,CAAwCE,MAAxC,CACzB,SAACyB,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAACE,GAAF,CAAMD,CAAN,CAAV,EADyB,CAEzB,GAAIE,CAAAA,GAAJ,EAFyB,CAA3B,CAIA,GAAMC,CAAAA,iBAAiB,CAAG5C,qBAAqB,CAACe,MAAtB,CAA0C,SAACyB,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAACE,GAAF,CAAMD,CAAN,CAAV,EAA1C,CAA8D,GAAIE,CAAAA,GAAJ,EAA9D,CAA1B,CAEA3C,qBAAqB,CAAC6C,OAAtB,CAA8B,SAAA5B,OAAO,CAAI,CACvC,GAAI,CAACsB,kBAAkB,CAACO,GAAnB,CAAuB7B,OAAvB,CAAL,CAAsC,CACpCK,KAAK,CAACR,KAAN,CAAYG,OAAZ,EAAuBV,cAAvB,CACD,CACF,CAJD,EAMAe,KAAK,CAACT,iCAAN,CAAwCgC,OAAxC,CAAgD,SAAA5B,OAAO,CAAI,CACzD,GAAI,CAAC2B,iBAAiB,CAACE,GAAlB,CAAsB7B,OAAtB,CAAL,CAAqC,CACnC,MAAOK,CAAAA,KAAK,CAACR,KAAN,CAAYG,OAAZ,CAAP,CACD,CACF,CAJD,EAKD,CAEDK,KAAK,CAACT,iCAAN,CAA0Cb,qBAA1C,CACD,CAzGH,CADgD,EAAtB,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\nimport { TokenList } from '@uniswap/token-lists/dist/types'\nimport { AIR_TOKEN_LIST_URL, DEFAULT_LIST_OF_LISTS, DEFAULT_TOKEN_LIST_URL } from '../../constants/lists'\nimport { updateVersion } from '../global/actions'\nimport { acceptListUpdate, addList, fetchTokenList, removeList, selectList } from './actions'\nimport UNISWAP_DEFAULT_LIST from '@uniswap/default-token-list'\n\nexport interface ListsState {\n  readonly byUrl: {\n    readonly [url: string]: {\n      readonly current: TokenList | null\n      readonly pendingUpdate: TokenList | null\n      readonly loadingRequestId: string | null\n      readonly error: string | null\n    }\n  }\n  // this contains the default list of lists from the last time the updateVersion was called, i.e. the app was reloaded\n  readonly lastInitializedDefaultListOfLists?: string[]\n  readonly selectedListUrl: string | undefined\n}\n\nconst NEW_LIST_STATE: ListsState['byUrl'][string] = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null\n}\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P] }\n\nconst initialState: ListsState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  byUrl: {\n    ...DEFAULT_LIST_OF_LISTS.reduce<Mutable<ListsState['byUrl']>>((memo, listUrl) => {\n      memo[listUrl] = NEW_LIST_STATE\n      return memo\n    }, {}),\n    [AIR_TOKEN_LIST_URL]: {\n      error: null,\n      current: null,\n      loadingRequestId: null,\n      pendingUpdate: null\n    }\n  },\n  selectedListUrl: AIR_TOKEN_LIST_URL\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(fetchTokenList.pending, (state, { payload: { requestId, url } }) => {\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        loadingRequestId: requestId,\n        error: null\n      }\n    })\n    .addCase(fetchTokenList.fulfilled, (state, { payload: { requestId, tokenList, url } }) => {\n      const current = state.byUrl[url]?.current\n      const loadingRequestId = state.byUrl[url]?.loadingRequestId\n      console.log(tokenList, url)\n      // no-op if update does nothing\n      if (current) {\n        const upgradeType = getVersionUpgrade(current.version, tokenList.version)\n        if (upgradeType === VersionUpgrade.NONE) return\n        if (loadingRequestId === null || loadingRequestId === requestId) {\n          state.byUrl[url] = {\n            ...state.byUrl[url],\n            loadingRequestId: null,\n            error: null,\n            current: current,\n            pendingUpdate: tokenList\n          }\n        }\n      } else {\n        state.byUrl[url] = {\n          ...state.byUrl[url],\n          loadingRequestId: null,\n          error: null,\n          current: tokenList,\n          pendingUpdate: null\n        }\n      }\n    })\n    .addCase(fetchTokenList.rejected, (state, { payload: { url, requestId, errorMessage } }) => {\n      if (state.byUrl[url]?.loadingRequestId !== requestId) {\n        // no-op since it's not the latest request\n        return\n      }\n\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        loadingRequestId: null,\n        error: errorMessage,\n        current: null,\n        pendingUpdate: null\n      }\n    })\n    .addCase(selectList, (state, { payload: url }) => {\n      state.selectedListUrl = url\n      // automatically adds list\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n    })\n    .addCase(addList, (state, { payload: url }) => {\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n    })\n    .addCase(removeList, (state, { payload: url }) => {\n      if (state.byUrl[url]) {\n        delete state.byUrl[url]\n      }\n      if (state.selectedListUrl === url) {\n        state.selectedListUrl = Object.keys(state.byUrl)[0]\n      }\n    })\n    .addCase(acceptListUpdate, (state, { payload: url }) => {\n      if (!state.byUrl[url]?.pendingUpdate) {\n        throw new Error('accept list update called without pending update')\n      }\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        pendingUpdate: null,\n        current: state.byUrl[url].pendingUpdate\n      }\n    })\n    .addCase(updateVersion, state => {\n      // state loaded from localStorage, but new lists have never been initialized\n      if (!state.lastInitializedDefaultListOfLists) {\n        state.byUrl = initialState.byUrl\n        state.selectedListUrl = undefined\n      } else if (state.lastInitializedDefaultListOfLists) {\n        const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<Set<string>>(\n          (s, l) => s.add(l),\n          new Set()\n        )\n        const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce<Set<string>>((s, l) => s.add(l), new Set())\n\n        DEFAULT_LIST_OF_LISTS.forEach(listUrl => {\n          if (!lastInitializedSet.has(listUrl)) {\n            state.byUrl[listUrl] = NEW_LIST_STATE\n          }\n        })\n\n        state.lastInitializedDefaultListOfLists.forEach(listUrl => {\n          if (!newListOfListsSet.has(listUrl)) {\n            delete state.byUrl[listUrl]\n          }\n        })\n      }\n\n      state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS\n    })\n)\n"]},"metadata":{},"sourceType":"module"}