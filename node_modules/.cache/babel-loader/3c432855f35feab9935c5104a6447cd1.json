{"ast":null,"code":"import schema from '@uniswap/token-lists/src/tokenlist.schema.json';\nimport Ajv from 'ajv';\nconst tokenListValidator = new Ajv({\n  allErrors: true\n}).compile(schema);\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\n\nexport default async function getTokenList(listUrl, resolveENSContentHash) {\n  const res = await fetch('/tokens/tokens.json');\n  const json = await res.json();\n\n  if (!tokenListValidator(json)) {\n    var _tokenListValidator$e, _tokenListValidator$e2;\n\n    const validationErrors = (_tokenListValidator$e = (_tokenListValidator$e2 = tokenListValidator.errors) === null || _tokenListValidator$e2 === void 0 ? void 0 : _tokenListValidator$e2.reduce((memo, error) => {\n      var _error$message;\n\n      const add = `${error.dataPath} ${(_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : ''}`;\n      return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n    }, '')) !== null && _tokenListValidator$e !== void 0 ? _tokenListValidator$e : 'unknown error';\n    throw new Error(`Token list failed validation: ${validationErrors}`);\n  }\n\n  return json;\n}","map":{"version":3,"sources":["/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/utils/getTokenList.ts"],"names":["schema","Ajv","tokenListValidator","allErrors","compile","getTokenList","listUrl","resolveENSContentHash","res","fetch","json","validationErrors","errors","reduce","memo","error","add","dataPath","message","length","Error"],"mappings":"AACA,OAAOA,MAAP,MAAmB,gDAAnB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AAKA,MAAMC,kBAAkB,GAAG,IAAID,GAAJ,CAAQ;AAAEE,EAAAA,SAAS,EAAE;AAAb,CAAR,EAA6BC,OAA7B,CAAqCJ,MAArC,CAA3B;AAEA;;;;;;AAKA,eAAe,eAAeK,YAAf,CACbC,OADa,EAEbC,qBAFa,EAGO;AACpB,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,qBAAD,CAAvB;AACA,QAAMC,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB;;AACA,MAAI,CAACR,kBAAkB,CAACQ,IAAD,CAAvB,EAA+B;AAAA;;AAC7B,UAAMC,gBAAwB,sDAC5BT,kBAAkB,CAACU,MADS,2DAC5B,uBAA2BC,MAA3B,CAA0C,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAAA;;AACzD,YAAMC,GAAG,GAAI,GAAED,KAAK,CAACE,QAAS,IAAlB,kBAAqBF,KAAK,CAACG,OAA3B,2DAAsC,EAAG,EAArD;AACA,aAAOJ,IAAI,CAACK,MAAL,GAAc,CAAd,GAAmB,GAAEL,IAAK,KAAIE,GAAI,EAAlC,GAAuC,GAAEA,GAAI,EAApD;AACD,KAHD,EAGG,EAHH,CAD4B,yEAIlB,eAJZ;AAKA,UAAM,IAAII,KAAJ,CAAW,iCAAgCT,gBAAiB,EAA5D,CAAN;AACD;;AACD,SAAOD,IAAP;AAED","sourcesContent":["import { TokenList } from '@uniswap/token-lists'\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\nimport Ajv from 'ajv'\nimport contenthashToUri from './contenthashToUri'\nimport { parseENSAddress } from './parseENSAddress'\nimport uriToHttp from './uriToHttp'\n\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getTokenList(\n  listUrl: string,\n  resolveENSContentHash: (ensName: string) => Promise<string>\n): Promise<TokenList> {\n  const res = await fetch('/tokens/tokens.json')\n  const json = await res.json()\n  if (!tokenListValidator(json)) {\n    const validationErrors: string =\n      tokenListValidator.errors?.reduce<string>((memo, error) => {\n        const add = `${error.dataPath} ${error.message ?? ''}`\n        return memo.length > 0 ? `${memo}; ${add}` : `${add}`\n      }, '') ?? 'unknown error'\n    throw new Error(`Token list failed validation: ${validationErrors}`)\n  }\n  return json\n  \n}\n"]},"metadata":{},"sourceType":"module"}