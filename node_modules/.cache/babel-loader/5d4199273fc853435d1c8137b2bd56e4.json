{"ast":null,"code":"// @ts-ignore\nimport axios from 'axios/dist/axios';\nimport { API_ROOT } from '../constants';\nconst instance = axios.create({\n  baseURL: API_ROOT,\n  timeout: 60000\n});\n\nconst getHeaders = () => {\n  // instance.defaults.headers.common['access_sign'] = access_sign == 'null' || !access_sign ? '' : access_sign\n  // instance.defaults.headers.common['user_addr'] = user_addr\n  // instance.defaults.headers.common['content'] = nowallet_content\n  return {};\n};\n\nconst processResult = (res, url) => {\n  return res;\n};\n\nexport function fetcher(url, data = {}) {\n  let formatData = { ...data\n  };\n  getHeaders();\n  return instance.get(url, {\n    params: formatData\n  }).then(res => processResult(res.data, url));\n}\nexport function fetcherServerSide(url, data) {\n  let formatData = { ...data\n  };\n  return instance.get(url, {\n    params: formatData\n  }).then(res => res.data);\n}\nexport function poster(url, data, options = {}) {\n  let formatData = { ...data\n  };\n  getHeaders();\n  return instance.post(url, formatData, { ...options\n  }).then(res => processResult(res.data));\n}\nexport function deleter(url, data, options = {}) {\n  getHeaders();\n  return instance.delete(url, data).then(res => processResult(res.data));\n}\nexport function updater(url, data, options = {}) {\n  getHeaders();\n  return instance.put(url, data).then(res => processResult(res.data));\n}\nexport function uploader(url, data) {\n  return instance.post(url, data, {\n    headers: {\n      'Content-type': 'multipart/form-data',\n      \"type\": \"formData\",\n      ...getHeaders()\n    }\n  }).then(res => processResult(res.data)).catch(e => {\n    return false;\n  });\n}\nexport default instance;","map":{"version":3,"sources":["/Users/xuyanjun/workspace/vision/airdrop_protocol/airdrop_interface/src/utils/axios.ts"],"names":["axios","API_ROOT","instance","create","baseURL","timeout","getHeaders","processResult","res","url","fetcher","data","formatData","get","params","then","fetcherServerSide","poster","options","post","deleter","delete","updater","put","uploader","headers","catch","e"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAEH,QADmB;AAE5BI,EAAAA,OAAO,EAAE;AAFmB,CAAb,CAAjB;;AAKA,MAAMC,UAAU,GAAG,MAAM;AAEvB;AACA;AACA;AAEA,SAAO,EAAP;AAGD,CATD;;AAWA,MAAMC,aAAa,GAAG,CAACC,GAAD,EAAWC,GAAX,KAA4B;AAEhD,SAAOD,GAAP;AACD,CAHD;;AAKA,OAAO,SAASE,OAAT,CAAiBD,GAAjB,EAA8BE,IAAS,GAAG,EAA1C,EAA8C;AACnD,MAAIC,UAAU,GAAG,EAAE,GAAGD;AAAL,GAAjB;AACAL,EAAAA,UAAU;AACV,SAAOJ,QAAQ,CAACW,GAAT,CAAaJ,GAAb,EAAkB;AAAEK,IAAAA,MAAM,EAAEF;AAAV,GAAlB,EAA0CG,IAA1C,CAAgDP,GAAD,IAAyBD,aAAa,CAACC,GAAG,CAACG,IAAL,EAAWF,GAAX,CAArF,CAAP;AACD;AAED,OAAO,SAASO,iBAAT,CAA2BP,GAA3B,EAAwCE,IAAxC,EAAmD;AACxD,MAAIC,UAAU,GAAG,EAAE,GAAGD;AAAL,GAAjB;AAEA,SAAOT,QAAQ,CAACW,GAAT,CAAaJ,GAAb,EAAkB;AAAEK,IAAAA,MAAM,EAAEF;AAAV,GAAlB,EAA0CG,IAA1C,CAAgDP,GAAD,IAAyBA,GAAG,CAACG,IAA5E,CAAP;AACD;AAED,OAAO,SAASM,MAAT,CAAgBR,GAAhB,EAA6BE,IAA7B,EAAwCO,OAAO,GAAG,EAAlD,EAAsD;AAC3D,MAAIN,UAAU,GAAG,EAAE,GAAGD;AAAL,GAAjB;AAEAL,EAAAA,UAAU;AACV,SAAOJ,QAAQ,CAACiB,IAAT,CAAcV,GAAd,EAAmBG,UAAnB,EAA+B,EAAE,GAAGM;AAAL,GAA/B,EAA+CH,IAA/C,CAAqDP,GAAD,IAAyBD,aAAa,CAACC,GAAG,CAACG,IAAL,CAA1F,CAAP;AACD;AAED,OAAO,SAASS,OAAT,CAAiBX,GAAjB,EAA8BE,IAA9B,EAAyCO,OAAO,GAAG,EAAnD,EAAuD;AAC5DZ,EAAAA,UAAU;AACV,SAAOJ,QAAQ,CAACmB,MAAT,CAAgBZ,GAAhB,EAAqBE,IAArB,EAA2BI,IAA3B,CAAiCP,GAAD,IAAyBD,aAAa,CAACC,GAAG,CAACG,IAAL,CAAtE,CAAP;AACD;AAED,OAAO,SAASW,OAAT,CAAiBb,GAAjB,EAA8BE,IAA9B,EAAyCO,OAAO,GAAG,EAAnD,EAAuD;AAC5DZ,EAAAA,UAAU;AACV,SAAOJ,QAAQ,CAACqB,GAAT,CAAad,GAAb,EAAkBE,IAAlB,EAAwBI,IAAxB,CAA8BP,GAAD,IAAyBD,aAAa,CAACC,GAAG,CAACG,IAAL,CAAnE,CAAP;AACD;AAED,OAAO,SAASa,QAAT,CAAkBf,GAAlB,EAA+BE,IAA/B,EAA0C;AAC/C,SAAOT,QAAQ,CAACiB,IAAT,CACLV,GADK,EAELE,IAFK,EAGL;AACEc,IAAAA,OAAO,EAAE;AACP,sBAAgB,qBADT;AAEP,cAAQ,UAFD;AAGP,SAAGnB,UAAU;AAHN;AADX,GAHK,EAUJS,IAVI,CAUEP,GAAD,IAAyBD,aAAa,CAACC,GAAG,CAACG,IAAL,CAVvC,EAWJe,KAXI,CAWGC,CAAD,IAAY;AACjB,WAAO,KAAP;AACD,GAbI,CAAP;AAcD;AAED,eAAezB,QAAf","sourcesContent":["// @ts-ignore\nimport axios from 'axios/dist/axios'\nimport { API_ROOT } from '../constants'\n\nconst instance = axios.create({\n  baseURL: API_ROOT,\n  timeout: 60000,\n});\n\nconst getHeaders = () => {\n  \n  // instance.defaults.headers.common['access_sign'] = access_sign == 'null' || !access_sign ? '' : access_sign\n  // instance.defaults.headers.common['user_addr'] = user_addr\n  // instance.defaults.headers.common['content'] = nowallet_content\n\n  return {\n    \n  }\n}\n\nconst processResult = (res: any, url?: string) => {\n  \n  return res\n}\n\nexport function fetcher(url: string, data: any = {}) {\n  let formatData = { ...data }\n  getHeaders()\n  return instance.get(url, { params: formatData }).then((res: { data: any; }) => processResult(res.data, url))\n}\n\nexport function fetcherServerSide(url: string, data: any) {\n  let formatData = { ...data }\n\n  return instance.get(url, { params: formatData }).then((res: { data: any; }) => res.data)\n}\n\nexport function poster(url: string, data: any, options = {}) {\n  let formatData = { ...data }\n\n  getHeaders()\n  return instance.post(url, formatData, { ...options }).then((res: { data: any; }) => processResult(res.data))\n}\n\nexport function deleter(url: string, data: any, options = {}) {\n  getHeaders()\n  return instance.delete(url, data).then((res: { data: any; }) => processResult(res.data))\n}\n\nexport function updater(url: string, data: any, options = {}) {\n  getHeaders()\n  return instance.put(url, data).then((res: { data: any; }) => processResult(res.data))\n}\n\nexport function uploader(url: string, data: any) {\n  return instance.post(\n    url,\n    data,\n    {\n      headers: {\n        'Content-type': 'multipart/form-data', \n        \"type\": \"formData\",\n        ...getHeaders()\n      }\n    })\n    .then((res: { data: any; }) => processResult(res.data))\n    .catch((e: any) => {\n      return false\n    })\n}\n\nexport default instance"]},"metadata":{},"sourceType":"module"}